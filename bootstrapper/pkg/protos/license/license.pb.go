// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: license.proto

package license

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Verify License Request
type VerifyLicenseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyLicenseRequest) Reset() {
	*x = VerifyLicenseRequest{}
	mi := &file_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyLicenseRequest) ProtoMessage() {}

func (x *VerifyLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyLicenseRequest.ProtoReflect.Descriptor instead.
func (*VerifyLicenseRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

// Verify License Response
//
// - valid = [required] Whether the license is valid
// - expires_at = [required] When the license expires
// - max_users = [required] Maximum number of users the license allows
// - enabled_features = [required] List of enabled features
// - message = [required] Message associated with the license
type VerifyLicenseResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Valid           bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ExpiresAt       *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	MaxUsers        int32                  `protobuf:"varint,3,opt,name=max_users,json=maxUsers,proto3" json:"max_users,omitempty"`
	EnabledFeatures []string               `protobuf:"bytes,4,rep,name=enabled_features,json=enabledFeatures,proto3" json:"enabled_features,omitempty"`
	Message         string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VerifyLicenseResponse) Reset() {
	*x = VerifyLicenseResponse{}
	mi := &file_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyLicenseResponse) ProtoMessage() {}

func (x *VerifyLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyLicenseResponse.ProtoReflect.Descriptor instead.
func (*VerifyLicenseResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyLicenseResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifyLicenseResponse) GetExpiresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *VerifyLicenseResponse) GetMaxUsers() int32 {
	if x != nil {
		return x.MaxUsers
	}
	return 0
}

func (x *VerifyLicenseResponse) GetEnabledFeatures() []string {
	if x != nil {
		return x.EnabledFeatures
	}
	return nil
}

func (x *VerifyLicenseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_license_proto protoreflect.FileDescriptor

const file_license_proto_rawDesc = "" +
	"\n" +
	"\rlicense.proto\x12\x13InternalApi.License\x1a\x1fgoogle/protobuf/timestamp.proto\"\x16\n" +
	"\x14VerifyLicenseRequest\"\xca\x01\n" +
	"\x15VerifyLicenseResponse\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x129\n" +
	"\n" +
	"expires_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\texpiresAt\x12\x1b\n" +
	"\tmax_users\x18\x03 \x01(\x05R\bmaxUsers\x12)\n" +
	"\x10enabled_features\x18\x04 \x03(\tR\x0fenabledFeatures\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage2z\n" +
	"\x0eLicenseService\x12h\n" +
	"\rVerifyLicense\x12).InternalApi.License.VerifyLicenseRequest\x1a*.InternalApi.License.VerifyLicenseResponse\"\x00BBZ@github.com/semaphoreio/semaphore/bootstrapper/pkg/protos/licenseb\x06proto3"

var (
	file_license_proto_rawDescOnce sync.Once
	file_license_proto_rawDescData []byte
)

func file_license_proto_rawDescGZIP() []byte {
	file_license_proto_rawDescOnce.Do(func() {
		file_license_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_license_proto_rawDesc), len(file_license_proto_rawDesc)))
	})
	return file_license_proto_rawDescData
}

var file_license_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_license_proto_goTypes = []any{
	(*VerifyLicenseRequest)(nil),  // 0: InternalApi.License.VerifyLicenseRequest
	(*VerifyLicenseResponse)(nil), // 1: InternalApi.License.VerifyLicenseResponse
	(*timestamp.Timestamp)(nil),   // 2: google.protobuf.Timestamp
}
var file_license_proto_depIdxs = []int32{
	2, // 0: InternalApi.License.VerifyLicenseResponse.expires_at:type_name -> google.protobuf.Timestamp
	0, // 1: InternalApi.License.LicenseService.VerifyLicense:input_type -> InternalApi.License.VerifyLicenseRequest
	1, // 2: InternalApi.License.LicenseService.VerifyLicense:output_type -> InternalApi.License.VerifyLicenseResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_license_proto_init() }
func file_license_proto_init() {
	if File_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_license_proto_rawDesc), len(file_license_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_license_proto_goTypes,
		DependencyIndexes: file_license_proto_depIdxs,
		MessageInfos:      file_license_proto_msgTypes,
	}.Build()
	File_license_proto = out.File
	file_license_proto_goTypes = nil
	file_license_proto_depIdxs = nil
}
