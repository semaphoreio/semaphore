// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.17.3
// source: semaphore/dashboards.v1alpha.proto

package semaphore_dashboards_v1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DashboardsApi_ListDashboards_FullMethodName  = "/semaphore.dashboards.v1alpha.DashboardsApi/ListDashboards"
	DashboardsApi_GetDashboard_FullMethodName    = "/semaphore.dashboards.v1alpha.DashboardsApi/GetDashboard"
	DashboardsApi_CreateDashboard_FullMethodName = "/semaphore.dashboards.v1alpha.DashboardsApi/CreateDashboard"
	DashboardsApi_UpdateDashboard_FullMethodName = "/semaphore.dashboards.v1alpha.DashboardsApi/UpdateDashboard"
	DashboardsApi_DeleteDashboard_FullMethodName = "/semaphore.dashboards.v1alpha.DashboardsApi/DeleteDashboard"
)

// DashboardsApiClient is the client API for DashboardsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardsApiClient interface {
	ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error)
	CreateDashboard(ctx context.Context, in *Dashboard, opts ...grpc.CallOption) (*Dashboard, error)
	UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error)
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dashboardsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardsApiClient(cc grpc.ClientConnInterface) DashboardsApiClient {
	return &dashboardsApiClient{cc}
}

func (c *dashboardsApiClient) ListDashboards(ctx context.Context, in *ListDashboardsRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, DashboardsApi_ListDashboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsApiClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, DashboardsApi_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsApiClient) CreateDashboard(ctx context.Context, in *Dashboard, opts ...grpc.CallOption) (*Dashboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, DashboardsApi_CreateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsApiClient) UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, DashboardsApi_UpdateDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsApiClient) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DashboardsApi_DeleteDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardsApiServer is the server API for DashboardsApi service.
// All implementations should embed UnimplementedDashboardsApiServer
// for forward compatibility
type DashboardsApiServer interface {
	ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error)
	GetDashboard(context.Context, *GetDashboardRequest) (*Dashboard, error)
	CreateDashboard(context.Context, *Dashboard) (*Dashboard, error)
	UpdateDashboard(context.Context, *UpdateDashboardRequest) (*Dashboard, error)
	DeleteDashboard(context.Context, *DeleteDashboardRequest) (*Empty, error)
}

// UnimplementedDashboardsApiServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardsApiServer struct {
}

func (UnimplementedDashboardsApiServer) ListDashboards(context.Context, *ListDashboardsRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboards not implemented")
}
func (UnimplementedDashboardsApiServer) GetDashboard(context.Context, *GetDashboardRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedDashboardsApiServer) CreateDashboard(context.Context, *Dashboard) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (UnimplementedDashboardsApiServer) UpdateDashboard(context.Context, *UpdateDashboardRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (UnimplementedDashboardsApiServer) DeleteDashboard(context.Context, *DeleteDashboardRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}

// UnsafeDashboardsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardsApiServer will
// result in compilation errors.
type UnsafeDashboardsApiServer interface {
	mustEmbedUnimplementedDashboardsApiServer()
}

func RegisterDashboardsApiServer(s grpc.ServiceRegistrar, srv DashboardsApiServer) {
	s.RegisterService(&DashboardsApi_ServiceDesc, srv)
}

func _DashboardsApi_ListDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsApiServer).ListDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardsApi_ListDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsApiServer).ListDashboards(ctx, req.(*ListDashboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsApi_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsApiServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardsApi_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsApiServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsApi_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dashboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsApiServer).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardsApi_CreateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsApiServer).CreateDashboard(ctx, req.(*Dashboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsApi_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsApiServer).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardsApi_UpdateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsApiServer).UpdateDashboard(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsApi_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsApiServer).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardsApi_DeleteDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsApiServer).DeleteDashboard(ctx, req.(*DeleteDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardsApi_ServiceDesc is the grpc.ServiceDesc for DashboardsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semaphore.dashboards.v1alpha.DashboardsApi",
	HandlerType: (*DashboardsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDashboards",
			Handler:    _DashboardsApi_ListDashboards_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _DashboardsApi_GetDashboard_Handler,
		},
		{
			MethodName: "CreateDashboard",
			Handler:    _DashboardsApi_CreateDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _DashboardsApi_UpdateDashboard_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _DashboardsApi_DeleteDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "semaphore/dashboards.v1alpha.proto",
}
