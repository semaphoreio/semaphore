// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.3.0
// source: feature.proto

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeatureService_ListOrganizationFeatures_FullMethodName = "/InternalApi.Feature.FeatureService/ListOrganizationFeatures"
	FeatureService_ListFeatures_FullMethodName             = "/InternalApi.Feature.FeatureService/ListFeatures"
	FeatureService_ListOrganizationMachines_FullMethodName = "/InternalApi.Feature.FeatureService/ListOrganizationMachines"
	FeatureService_ListMachines_FullMethodName             = "/InternalApi.Feature.FeatureService/ListMachines"
)

// FeatureServiceClient is the client API for FeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServiceClient interface {
	// Operation is called to get all features for an organization.
	// Operation is used by client facing services to check what features
	// are enabled for the organization.
	// Operation is synchronous.
	ListOrganizationFeatures(ctx context.Context, in *ListOrganizationFeaturesRequest, opts ...grpc.CallOption) (*ListOrganizationFeaturesResponse, error)
	// Operation is called to get the list of a features available on semaphore.
	// Operation is synchronous.
	ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error)
	// Operation is called to get all machines for an organization.
	// Operation is used by client facing services to check what machines
	// are enabled for the organization.
	// Operation is synchronous.
	ListOrganizationMachines(ctx context.Context, in *ListOrganizationMachinesRequest, opts ...grpc.CallOption) (*ListOrganizationMachinesResponse, error)
	// Operation is called to get the list of a machines available on semaphore.
	// Operation is synchronous.
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
}

type featureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServiceClient(cc grpc.ClientConnInterface) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) ListOrganizationFeatures(ctx context.Context, in *ListOrganizationFeaturesRequest, opts ...grpc.CallOption) (*ListOrganizationFeaturesResponse, error) {
	out := new(ListOrganizationFeaturesResponse)
	err := c.cc.Invoke(ctx, FeatureService_ListOrganizationFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error) {
	out := new(ListFeaturesResponse)
	err := c.cc.Invoke(ctx, FeatureService_ListFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) ListOrganizationMachines(ctx context.Context, in *ListOrganizationMachinesRequest, opts ...grpc.CallOption) (*ListOrganizationMachinesResponse, error) {
	out := new(ListOrganizationMachinesResponse)
	err := c.cc.Invoke(ctx, FeatureService_ListOrganizationMachines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, FeatureService_ListMachines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServiceServer is the server API for FeatureService service.
// All implementations should embed UnimplementedFeatureServiceServer
// for forward compatibility
type FeatureServiceServer interface {
	// Operation is called to get all features for an organization.
	// Operation is used by client facing services to check what features
	// are enabled for the organization.
	// Operation is synchronous.
	ListOrganizationFeatures(context.Context, *ListOrganizationFeaturesRequest) (*ListOrganizationFeaturesResponse, error)
	// Operation is called to get the list of a features available on semaphore.
	// Operation is synchronous.
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error)
	// Operation is called to get all machines for an organization.
	// Operation is used by client facing services to check what machines
	// are enabled for the organization.
	// Operation is synchronous.
	ListOrganizationMachines(context.Context, *ListOrganizationMachinesRequest) (*ListOrganizationMachinesResponse, error)
	// Operation is called to get the list of a machines available on semaphore.
	// Operation is synchronous.
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
}

// UnimplementedFeatureServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeatureServiceServer struct {
}

func (UnimplementedFeatureServiceServer) ListOrganizationFeatures(context.Context, *ListOrganizationFeaturesRequest) (*ListOrganizationFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationFeatures not implemented")
}
func (UnimplementedFeatureServiceServer) ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedFeatureServiceServer) ListOrganizationMachines(context.Context, *ListOrganizationMachinesRequest) (*ListOrganizationMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMachines not implemented")
}
func (UnimplementedFeatureServiceServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}

// UnsafeFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServiceServer will
// result in compilation errors.
type UnsafeFeatureServiceServer interface {
	mustEmbedUnimplementedFeatureServiceServer()
}

func RegisterFeatureServiceServer(s grpc.ServiceRegistrar, srv FeatureServiceServer) {
	s.RegisterService(&FeatureService_ServiceDesc, srv)
}

func _FeatureService_ListOrganizationFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListOrganizationFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureService_ListOrganizationFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListOrganizationFeatures(ctx, req.(*ListOrganizationFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureService_ListFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListFeatures(ctx, req.(*ListFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_ListOrganizationMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListOrganizationMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureService_ListOrganizationMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListOrganizationMachines(ctx, req.(*ListOrganizationMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureService_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureService_ServiceDesc is the grpc.ServiceDesc for FeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Feature.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationFeatures",
			Handler:    _FeatureService_ListOrganizationFeatures_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _FeatureService_ListFeatures_Handler,
		},
		{
			MethodName: "ListOrganizationMachines",
			Handler:    _FeatureService_ListOrganizationMachines_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _FeatureService_ListMachines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature.proto",
}
