// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: organization.proto

package organization

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganizationService_Describe_FullMethodName                   = "/InternalApi.Organization.OrganizationService/Describe"
	OrganizationService_DescribeMany_FullMethodName               = "/InternalApi.Organization.OrganizationService/DescribeMany"
	OrganizationService_List_FullMethodName                       = "/InternalApi.Organization.OrganizationService/List"
	OrganizationService_Create_FullMethodName                     = "/InternalApi.Organization.OrganizationService/Create"
	OrganizationService_CreateWithQuotas_FullMethodName           = "/InternalApi.Organization.OrganizationService/CreateWithQuotas"
	OrganizationService_Update_FullMethodName                     = "/InternalApi.Organization.OrganizationService/Update"
	OrganizationService_IsValid_FullMethodName                    = "/InternalApi.Organization.OrganizationService/IsValid"
	OrganizationService_IsMember_FullMethodName                   = "/InternalApi.Organization.OrganizationService/IsMember"
	OrganizationService_IsOwner_FullMethodName                    = "/InternalApi.Organization.OrganizationService/IsOwner"
	OrganizationService_MakeOwner_FullMethodName                  = "/InternalApi.Organization.OrganizationService/MakeOwner"
	OrganizationService_Members_FullMethodName                    = "/InternalApi.Organization.OrganizationService/Members"
	OrganizationService_AddMember_FullMethodName                  = "/InternalApi.Organization.OrganizationService/AddMember"
	OrganizationService_AddMembers_FullMethodName                 = "/InternalApi.Organization.OrganizationService/AddMembers"
	OrganizationService_DeleteMember_FullMethodName               = "/InternalApi.Organization.OrganizationService/DeleteMember"
	OrganizationService_Suspend_FullMethodName                    = "/InternalApi.Organization.OrganizationService/Suspend"
	OrganizationService_Unsuspend_FullMethodName                  = "/InternalApi.Organization.OrganizationService/Unsuspend"
	OrganizationService_Verify_FullMethodName                     = "/InternalApi.Organization.OrganizationService/Verify"
	OrganizationService_SetOpenSource_FullMethodName              = "/InternalApi.Organization.OrganizationService/SetOpenSource"
	OrganizationService_ListSuspensions_FullMethodName            = "/InternalApi.Organization.OrganizationService/ListSuspensions"
	OrganizationService_UpdateQuotas_FullMethodName               = "/InternalApi.Organization.OrganizationService/UpdateQuotas"
	OrganizationService_GetQuotas_FullMethodName                  = "/InternalApi.Organization.OrganizationService/GetQuotas"
	OrganizationService_Destroy_FullMethodName                    = "/InternalApi.Organization.OrganizationService/Destroy"
	OrganizationService_RepositoryIntegrators_FullMethodName      = "/InternalApi.Organization.OrganizationService/RepositoryIntegrators"
	OrganizationService_FetchOrganizationContacts_FullMethodName  = "/InternalApi.Organization.OrganizationService/FetchOrganizationContacts"
	OrganizationService_ModifyOrganizationContact_FullMethodName  = "/InternalApi.Organization.OrganizationService/ModifyOrganizationContact"
	OrganizationService_FetchOrganizationSettings_FullMethodName  = "/InternalApi.Organization.OrganizationService/FetchOrganizationSettings"
	OrganizationService_ModifyOrganizationSettings_FullMethodName = "/InternalApi.Organization.OrganizationService/ModifyOrganizationSettings"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	// Operation is called to describe an organization.
	// Operation is synchronous.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	// Operation is called to describe many organizations based on org ids.
	// Operation is synchronous.
	DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error)
	// Operation is called to list organizations for user.
	// Operation is synchronous.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// DEPRECATED
	// Operation is called to create organization.
	// Operation is synchronous.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Operation is called to create organization.
	// Operation is synchronous.
	CreateWithQuotas(ctx context.Context, in *CreateWithQuotasRequest, opts ...grpc.CallOption) (*CreateWithQuotasResponse, error)
	// Operation is called to update organization.
	// Operation is synchronous.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Operation is called to check if an organization is valid.
	// Operation is synchronous.
	IsValid(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*IsValidResponse, error)
	// Operation is called to check if user is a member of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error)
	// Operation is called to check if user is an owner of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error)
	// Operation is called to change owner of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	MakeOwner(ctx context.Context, in *MakeOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Operation is called to list members of the organziation.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
	// Operation is called to add a github user to the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	// Operation is called to add a github users to the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*AddMembersResponse, error)
	// Operation is called to remove a member from an organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	// Operation is called to suspend processing of jobs belonging to this organization.
	// Operation is synchronous.
	Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error)
	// Operation is called to suspend processing of jobs belonging to this organization.
	// Operation is synchronous.
	Unsuspend(ctx context.Context, in *UnsuspendRequest, opts ...grpc.CallOption) (*UnsuspendResponse, error)
	// Operation is called to mark the organization as verified.
	// Operation is synchronous.
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*Organization, error)
	// Operation is called to set organization as OpenSource
	// Operation is synchronous.
	SetOpenSource(ctx context.Context, in *SetOpenSourceRequest, opts ...grpc.CallOption) (*SetOpenSourceResponse, error)
	// Operation is called to list organization suspensions.
	// Operation is synchronous.
	ListSuspensions(ctx context.Context, in *ListSuspensionsRequest, opts ...grpc.CallOption) (*ListSuspensionsResponse, error)
	// Operation is called to set new quotas for organization.
	// Operation is synchronous.
	// Deprecated - use Features instead
	UpdateQuotas(ctx context.Context, in *UpdateQuotasRequest, opts ...grpc.CallOption) (*UpdateQuotasResponse, error)
	// Operation is called to get values of a quotas for an organization.
	// Operation is synchronous.
	// Deprecated - use Features instead
	GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotaResponse, error)
	// Operation is called to destroy an organization.
	// If it fails, a GRPC error is raised.
	// Operation is synchronous.
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Operation is called to get information about available repository integration types.
	// Operation is synchronous.
	RepositoryIntegrators(ctx context.Context, in *RepositoryIntegratorsRequest, opts ...grpc.CallOption) (*RepositoryIntegratorsResponse, error)
	// Operation for fetching contact information regarding an organization.
	// Operation is synchronous.
	FetchOrganizationContacts(ctx context.Context, in *FetchOrganizationContactsRequest, opts ...grpc.CallOption) (*FetchOrganizationContactsResponse, error)
	// Operation for adding/modifying organization contacts
	// Operation is synchronous.
	ModifyOrganizationContact(ctx context.Context, in *ModifyOrganizationContactRequest, opts ...grpc.CallOption) (*ModifyOrganizationContactResponse, error)
	// Operation for fetching organization settings
	// Operation is synchronous.
	FetchOrganizationSettings(ctx context.Context, in *FetchOrganizationSettingsRequest, opts ...grpc.CallOption) (*FetchOrganizationSettingsResponse, error)
	// Operation for adding/modifying organization settings
	// Operation is synchronous.
	ModifyOrganizationSettings(ctx context.Context, in *ModifyOrganizationSettingsRequest, opts ...grpc.CallOption) (*ModifyOrganizationSettingsResponse, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DescribeMany(ctx context.Context, in *DescribeManyRequest, opts ...grpc.CallOption) (*DescribeManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeManyResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DescribeMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, OrganizationService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateWithQuotas(ctx context.Context, in *CreateWithQuotasRequest, opts ...grpc.CallOption) (*CreateWithQuotasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWithQuotasResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateWithQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) IsValid(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*IsValidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsValidResponse)
	err := c.cc.Invoke(ctx, OrganizationService_IsValid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_IsMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsOwnerResponse)
	err := c.cc.Invoke(ctx, OrganizationService_IsOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) MakeOwner(ctx context.Context, in *MakeOwnerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OrganizationService_MakeOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Members_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*AddMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_AddMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Suspend(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Suspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Unsuspend(ctx context.Context, in *UnsuspendRequest, opts ...grpc.CallOption) (*UnsuspendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsuspendResponse)
	err := c.cc.Invoke(ctx, OrganizationService_Unsuspend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) SetOpenSource(ctx context.Context, in *SetOpenSourceRequest, opts ...grpc.CallOption) (*SetOpenSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOpenSourceResponse)
	err := c.cc.Invoke(ctx, OrganizationService_SetOpenSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListSuspensions(ctx context.Context, in *ListSuspensionsRequest, opts ...grpc.CallOption) (*ListSuspensionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuspensionsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListSuspensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateQuotas(ctx context.Context, in *UpdateQuotasRequest, opts ...grpc.CallOption) (*UpdateQuotasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuotasResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuotaResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetQuotas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OrganizationService_Destroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) RepositoryIntegrators(ctx context.Context, in *RepositoryIntegratorsRequest, opts ...grpc.CallOption) (*RepositoryIntegratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryIntegratorsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_RepositoryIntegrators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) FetchOrganizationContacts(ctx context.Context, in *FetchOrganizationContactsRequest, opts ...grpc.CallOption) (*FetchOrganizationContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchOrganizationContactsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_FetchOrganizationContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ModifyOrganizationContact(ctx context.Context, in *ModifyOrganizationContactRequest, opts ...grpc.CallOption) (*ModifyOrganizationContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyOrganizationContactResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ModifyOrganizationContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) FetchOrganizationSettings(ctx context.Context, in *FetchOrganizationSettingsRequest, opts ...grpc.CallOption) (*FetchOrganizationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchOrganizationSettingsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_FetchOrganizationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ModifyOrganizationSettings(ctx context.Context, in *ModifyOrganizationSettingsRequest, opts ...grpc.CallOption) (*ModifyOrganizationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyOrganizationSettingsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ModifyOrganizationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations should embed UnimplementedOrganizationServiceServer
// for forward compatibility.
type OrganizationServiceServer interface {
	// Operation is called to describe an organization.
	// Operation is synchronous.
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	// Operation is called to describe many organizations based on org ids.
	// Operation is synchronous.
	DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error)
	// Operation is called to list organizations for user.
	// Operation is synchronous.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// DEPRECATED
	// Operation is called to create organization.
	// Operation is synchronous.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Operation is called to create organization.
	// Operation is synchronous.
	CreateWithQuotas(context.Context, *CreateWithQuotasRequest) (*CreateWithQuotasResponse, error)
	// Operation is called to update organization.
	// Operation is synchronous.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Operation is called to check if an organization is valid.
	// Operation is synchronous.
	IsValid(context.Context, *Organization) (*IsValidResponse, error)
	// Operation is called to check if user is a member of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error)
	// Operation is called to check if user is an owner of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	IsOwner(context.Context, *IsOwnerRequest) (*IsOwnerResponse, error)
	// Operation is called to change owner of the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	MakeOwner(context.Context, *MakeOwnerRequest) (*empty.Empty, error)
	// Operation is called to list members of the organziation.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	// Operation is called to add a github user to the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	// Operation is called to add a github users to the organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	AddMembers(context.Context, *AddMembersRequest) (*AddMembersResponse, error)
	// Operation is called to remove a member from an organization.
	// Operation is synchronous.
	// Deprecated - use Guard/RBAC instead
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// Operation is called to suspend processing of jobs belonging to this organization.
	// Operation is synchronous.
	Suspend(context.Context, *SuspendRequest) (*SuspendResponse, error)
	// Operation is called to suspend processing of jobs belonging to this organization.
	// Operation is synchronous.
	Unsuspend(context.Context, *UnsuspendRequest) (*UnsuspendResponse, error)
	// Operation is called to mark the organization as verified.
	// Operation is synchronous.
	Verify(context.Context, *VerifyRequest) (*Organization, error)
	// Operation is called to set organization as OpenSource
	// Operation is synchronous.
	SetOpenSource(context.Context, *SetOpenSourceRequest) (*SetOpenSourceResponse, error)
	// Operation is called to list organization suspensions.
	// Operation is synchronous.
	ListSuspensions(context.Context, *ListSuspensionsRequest) (*ListSuspensionsResponse, error)
	// Operation is called to set new quotas for organization.
	// Operation is synchronous.
	// Deprecated - use Features instead
	UpdateQuotas(context.Context, *UpdateQuotasRequest) (*UpdateQuotasResponse, error)
	// Operation is called to get values of a quotas for an organization.
	// Operation is synchronous.
	// Deprecated - use Features instead
	GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotaResponse, error)
	// Operation is called to destroy an organization.
	// If it fails, a GRPC error is raised.
	// Operation is synchronous.
	Destroy(context.Context, *DestroyRequest) (*empty.Empty, error)
	// Operation is called to get information about available repository integration types.
	// Operation is synchronous.
	RepositoryIntegrators(context.Context, *RepositoryIntegratorsRequest) (*RepositoryIntegratorsResponse, error)
	// Operation for fetching contact information regarding an organization.
	// Operation is synchronous.
	FetchOrganizationContacts(context.Context, *FetchOrganizationContactsRequest) (*FetchOrganizationContactsResponse, error)
	// Operation for adding/modifying organization contacts
	// Operation is synchronous.
	ModifyOrganizationContact(context.Context, *ModifyOrganizationContactRequest) (*ModifyOrganizationContactResponse, error)
	// Operation for fetching organization settings
	// Operation is synchronous.
	FetchOrganizationSettings(context.Context, *FetchOrganizationSettingsRequest) (*FetchOrganizationSettingsResponse, error)
	// Operation for adding/modifying organization settings
	// Operation is synchronous.
	ModifyOrganizationSettings(context.Context, *ModifyOrganizationSettingsRequest) (*ModifyOrganizationSettingsResponse, error)
}

// UnimplementedOrganizationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationServiceServer struct{}

func (UnimplementedOrganizationServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedOrganizationServiceServer) DescribeMany(context.Context, *DescribeManyRequest) (*DescribeManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMany not implemented")
}
func (UnimplementedOrganizationServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateWithQuotas(context.Context, *CreateWithQuotasRequest) (*CreateWithQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithQuotas not implemented")
}
func (UnimplementedOrganizationServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationServiceServer) IsValid(context.Context, *Organization) (*IsValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValid not implemented")
}
func (UnimplementedOrganizationServiceServer) IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMember not implemented")
}
func (UnimplementedOrganizationServiceServer) IsOwner(context.Context, *IsOwnerRequest) (*IsOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOwner not implemented")
}
func (UnimplementedOrganizationServiceServer) MakeOwner(context.Context, *MakeOwnerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeOwner not implemented")
}
func (UnimplementedOrganizationServiceServer) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedOrganizationServiceServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedOrganizationServiceServer) AddMembers(context.Context, *AddMembersRequest) (*AddMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedOrganizationServiceServer) Suspend(context.Context, *SuspendRequest) (*SuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedOrganizationServiceServer) Unsuspend(context.Context, *UnsuspendRequest) (*UnsuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsuspend not implemented")
}
func (UnimplementedOrganizationServiceServer) Verify(context.Context, *VerifyRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedOrganizationServiceServer) SetOpenSource(context.Context, *SetOpenSourceRequest) (*SetOpenSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOpenSource not implemented")
}
func (UnimplementedOrganizationServiceServer) ListSuspensions(context.Context, *ListSuspensionsRequest) (*ListSuspensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuspensions not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateQuotas(context.Context, *UpdateQuotasRequest) (*UpdateQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotas not implemented")
}
func (UnimplementedOrganizationServiceServer) GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotas not implemented")
}
func (UnimplementedOrganizationServiceServer) Destroy(context.Context, *DestroyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedOrganizationServiceServer) RepositoryIntegrators(context.Context, *RepositoryIntegratorsRequest) (*RepositoryIntegratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryIntegrators not implemented")
}
func (UnimplementedOrganizationServiceServer) FetchOrganizationContacts(context.Context, *FetchOrganizationContactsRequest) (*FetchOrganizationContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrganizationContacts not implemented")
}
func (UnimplementedOrganizationServiceServer) ModifyOrganizationContact(context.Context, *ModifyOrganizationContactRequest) (*ModifyOrganizationContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrganizationContact not implemented")
}
func (UnimplementedOrganizationServiceServer) FetchOrganizationSettings(context.Context, *FetchOrganizationSettingsRequest) (*FetchOrganizationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrganizationSettings not implemented")
}
func (UnimplementedOrganizationServiceServer) ModifyOrganizationSettings(context.Context, *ModifyOrganizationSettingsRequest) (*ModifyOrganizationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrganizationSettings not implemented")
}
func (UnimplementedOrganizationServiceServer) testEmbeddedByValue() {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DescribeMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DescribeMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DescribeMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DescribeMany(ctx, req.(*DescribeManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateWithQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateWithQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateWithQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateWithQuotas(ctx, req.(*CreateWithQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_IsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).IsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_IsValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).IsValid(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_IsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).IsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_IsMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).IsMember(ctx, req.(*IsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_IsOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).IsOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_IsOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).IsOwner(ctx, req.(*IsOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_MakeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).MakeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_MakeOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).MakeOwner(ctx, req.(*MakeOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Members_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_AddMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).AddMembers(ctx, req.(*AddMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Suspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Suspend(ctx, req.(*SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Unsuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Unsuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Unsuspend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Unsuspend(ctx, req.(*UnsuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_SetOpenSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOpenSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).SetOpenSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_SetOpenSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).SetOpenSource(ctx, req.(*SetOpenSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListSuspensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuspensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListSuspensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListSuspensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListSuspensions(ctx, req.(*ListSuspensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateQuotas(ctx, req.(*UpdateQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetQuotas(ctx, req.(*GetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_RepositoryIntegrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryIntegratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).RepositoryIntegrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_RepositoryIntegrators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).RepositoryIntegrators(ctx, req.(*RepositoryIntegratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_FetchOrganizationContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrganizationContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).FetchOrganizationContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_FetchOrganizationContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).FetchOrganizationContacts(ctx, req.(*FetchOrganizationContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ModifyOrganizationContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrganizationContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ModifyOrganizationContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ModifyOrganizationContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ModifyOrganizationContact(ctx, req.(*ModifyOrganizationContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_FetchOrganizationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrganizationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).FetchOrganizationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_FetchOrganizationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).FetchOrganizationSettings(ctx, req.(*FetchOrganizationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ModifyOrganizationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrganizationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ModifyOrganizationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ModifyOrganizationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ModifyOrganizationSettings(ctx, req.(*ModifyOrganizationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Organization.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _OrganizationService_Describe_Handler,
		},
		{
			MethodName: "DescribeMany",
			Handler:    _OrganizationService_DescribeMany_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrganizationService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrganizationService_Create_Handler,
		},
		{
			MethodName: "CreateWithQuotas",
			Handler:    _OrganizationService_CreateWithQuotas_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationService_Update_Handler,
		},
		{
			MethodName: "IsValid",
			Handler:    _OrganizationService_IsValid_Handler,
		},
		{
			MethodName: "IsMember",
			Handler:    _OrganizationService_IsMember_Handler,
		},
		{
			MethodName: "IsOwner",
			Handler:    _OrganizationService_IsOwner_Handler,
		},
		{
			MethodName: "MakeOwner",
			Handler:    _OrganizationService_MakeOwner_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _OrganizationService_Members_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _OrganizationService_AddMember_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _OrganizationService_AddMembers_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _OrganizationService_DeleteMember_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _OrganizationService_Suspend_Handler,
		},
		{
			MethodName: "Unsuspend",
			Handler:    _OrganizationService_Unsuspend_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _OrganizationService_Verify_Handler,
		},
		{
			MethodName: "SetOpenSource",
			Handler:    _OrganizationService_SetOpenSource_Handler,
		},
		{
			MethodName: "ListSuspensions",
			Handler:    _OrganizationService_ListSuspensions_Handler,
		},
		{
			MethodName: "UpdateQuotas",
			Handler:    _OrganizationService_UpdateQuotas_Handler,
		},
		{
			MethodName: "GetQuotas",
			Handler:    _OrganizationService_GetQuotas_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _OrganizationService_Destroy_Handler,
		},
		{
			MethodName: "RepositoryIntegrators",
			Handler:    _OrganizationService_RepositoryIntegrators_Handler,
		},
		{
			MethodName: "FetchOrganizationContacts",
			Handler:    _OrganizationService_FetchOrganizationContacts_Handler,
		},
		{
			MethodName: "ModifyOrganizationContact",
			Handler:    _OrganizationService_ModifyOrganizationContact_Handler,
		},
		{
			MethodName: "FetchOrganizationSettings",
			Handler:    _OrganizationService_FetchOrganizationSettings_Handler,
		},
		{
			MethodName: "ModifyOrganizationSettings",
			Handler:    _OrganizationService_ModifyOrganizationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization.proto",
}
