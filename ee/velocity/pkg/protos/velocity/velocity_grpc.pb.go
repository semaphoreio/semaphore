// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.3.0
// source: velocity.proto

package velocity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelineMetricsService_ListPipelineSummaries_FullMethodName          = "/InternalApi.Velocity.PipelineMetricsService/ListPipelineSummaries"
	PipelineMetricsService_ListJobSummaries_FullMethodName               = "/InternalApi.Velocity.PipelineMetricsService/ListJobSummaries"
	PipelineMetricsService_ListPipelinePerformanceMetrics_FullMethodName = "/InternalApi.Velocity.PipelineMetricsService/ListPipelinePerformanceMetrics"
	PipelineMetricsService_ListPipelineReliabilityMetrics_FullMethodName = "/InternalApi.Velocity.PipelineMetricsService/ListPipelineReliabilityMetrics"
	PipelineMetricsService_ListPipelineFrequencyMetrics_FullMethodName   = "/InternalApi.Velocity.PipelineMetricsService/ListPipelineFrequencyMetrics"
	PipelineMetricsService_DescribeProjectPerformance_FullMethodName     = "/InternalApi.Velocity.PipelineMetricsService/DescribeProjectPerformance"
	PipelineMetricsService_DescribeProjectSettings_FullMethodName        = "/InternalApi.Velocity.PipelineMetricsService/DescribeProjectSettings"
	PipelineMetricsService_UpdateProjectSettings_FullMethodName          = "/InternalApi.Velocity.PipelineMetricsService/UpdateProjectSettings"
	PipelineMetricsService_DescribeMetricsDashboard_FullMethodName       = "/InternalApi.Velocity.PipelineMetricsService/DescribeMetricsDashboard"
	PipelineMetricsService_ListMetricsDashboards_FullMethodName          = "/InternalApi.Velocity.PipelineMetricsService/ListMetricsDashboards"
	PipelineMetricsService_CreateMetricsDashboard_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/CreateMetricsDashboard"
	PipelineMetricsService_UpdateMetricsDashboard_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/UpdateMetricsDashboard"
	PipelineMetricsService_DeleteMetricsDashboard_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/DeleteMetricsDashboard"
	PipelineMetricsService_CreateDashboardItem_FullMethodName            = "/InternalApi.Velocity.PipelineMetricsService/CreateDashboardItem"
	PipelineMetricsService_UpdateDashboardItem_FullMethodName            = "/InternalApi.Velocity.PipelineMetricsService/UpdateDashboardItem"
	PipelineMetricsService_DeleteDashboardItem_FullMethodName            = "/InternalApi.Velocity.PipelineMetricsService/DeleteDashboardItem"
	PipelineMetricsService_DescribeDashboardItem_FullMethodName          = "/InternalApi.Velocity.PipelineMetricsService/DescribeDashboardItem"
	PipelineMetricsService_ChangeDashboardItemNotes_FullMethodName       = "/InternalApi.Velocity.PipelineMetricsService/ChangeDashboardItemNotes"
	PipelineMetricsService_FetchOrganizationHealth_FullMethodName        = "/InternalApi.Velocity.PipelineMetricsService/FetchOrganizationHealth"
	PipelineMetricsService_ListFlakyTestsFilters_FullMethodName          = "/InternalApi.Velocity.PipelineMetricsService/ListFlakyTestsFilters"
	PipelineMetricsService_CreateFlakyTestsFilter_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/CreateFlakyTestsFilter"
	PipelineMetricsService_RemoveFlakyTestsFilter_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/RemoveFlakyTestsFilter"
	PipelineMetricsService_UpdateFlakyTestsFilter_FullMethodName         = "/InternalApi.Velocity.PipelineMetricsService/UpdateFlakyTestsFilter"
	PipelineMetricsService_InitializeFlakyTestsFilters_FullMethodName    = "/InternalApi.Velocity.PipelineMetricsService/InitializeFlakyTestsFilters"
)

// PipelineMetricsServiceClient is the client API for PipelineMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineMetricsServiceClient interface {
	ListPipelineSummaries(ctx context.Context, in *ListPipelineSummariesRequest, opts ...grpc.CallOption) (*ListPipelineSummariesResponse, error)
	ListJobSummaries(ctx context.Context, in *ListJobSummariesRequest, opts ...grpc.CallOption) (*ListJobSummariesResponse, error)
	ListPipelinePerformanceMetrics(ctx context.Context, in *ListPipelinePerformanceMetricsRequest, opts ...grpc.CallOption) (*ListPipelinePerformanceMetricsResponse, error)
	ListPipelineReliabilityMetrics(ctx context.Context, in *ListPipelineReliabilityMetricsRequest, opts ...grpc.CallOption) (*ListPipelineReliabilityMetricsResponse, error)
	ListPipelineFrequencyMetrics(ctx context.Context, in *ListPipelineFrequencyMetricsRequest, opts ...grpc.CallOption) (*ListPipelineFrequencyMetricsResponse, error)
	DescribeProjectPerformance(ctx context.Context, in *DescribeProjectPerformanceRequest, opts ...grpc.CallOption) (*DescribeProjectPerformanceResponse, error)
	DescribeProjectSettings(ctx context.Context, in *DescribeProjectSettingsRequest, opts ...grpc.CallOption) (*DescribeProjectSettingsResponse, error)
	UpdateProjectSettings(ctx context.Context, in *UpdateProjectSettingsRequest, opts ...grpc.CallOption) (*UpdateProjectSettingsResponse, error)
	DescribeMetricsDashboard(ctx context.Context, in *DescribeMetricsDashboardRequest, opts ...grpc.CallOption) (*DescribeMetricsDashboardResponse, error)
	ListMetricsDashboards(ctx context.Context, in *ListMetricsDashboardsRequest, opts ...grpc.CallOption) (*ListMetricsDashboardsResponse, error)
	CreateMetricsDashboard(ctx context.Context, in *CreateMetricsDashboardRequest, opts ...grpc.CallOption) (*CreateMetricsDashboardResponse, error)
	UpdateMetricsDashboard(ctx context.Context, in *UpdateMetricsDashboardRequest, opts ...grpc.CallOption) (*UpdateMetricsDashboardResponse, error)
	DeleteMetricsDashboard(ctx context.Context, in *DeleteMetricsDashboardRequest, opts ...grpc.CallOption) (*DeleteMetricsDashboardResponse, error)
	CreateDashboardItem(ctx context.Context, in *CreateDashboardItemRequest, opts ...grpc.CallOption) (*CreateDashboardItemResponse, error)
	UpdateDashboardItem(ctx context.Context, in *UpdateDashboardItemRequest, opts ...grpc.CallOption) (*UpdateDashboardItemResponse, error)
	DeleteDashboardItem(ctx context.Context, in *DeleteDashboardItemRequest, opts ...grpc.CallOption) (*DeleteDashboardItemResponse, error)
	DescribeDashboardItem(ctx context.Context, in *DescribeDashboardItemRequest, opts ...grpc.CallOption) (*DescribeDashboardItemResponse, error)
	ChangeDashboardItemNotes(ctx context.Context, in *ChangeDashboardItemNotesRequest, opts ...grpc.CallOption) (*ChangeDashboardItemNotesResponse, error)
	FetchOrganizationHealth(ctx context.Context, in *OrganizationHealthRequest, opts ...grpc.CallOption) (*OrganizationHealthResponse, error)
	ListFlakyTestsFilters(ctx context.Context, in *ListFlakyTestsFiltersRequest, opts ...grpc.CallOption) (*ListFlakyTestsFiltersResponse, error)
	CreateFlakyTestsFilter(ctx context.Context, in *CreateFlakyTestsFilterRequest, opts ...grpc.CallOption) (*CreateFlakyTestsFilterResponse, error)
	RemoveFlakyTestsFilter(ctx context.Context, in *RemoveFlakyTestsFilterRequest, opts ...grpc.CallOption) (*RemoveFlakyTestsFilterResponse, error)
	UpdateFlakyTestsFilter(ctx context.Context, in *UpdateFlakyTestsFilterRequest, opts ...grpc.CallOption) (*UpdateFlakyTestsFilterResponse, error)
	InitializeFlakyTestsFilters(ctx context.Context, in *InitializeFlakyTestsFiltersRequest, opts ...grpc.CallOption) (*InitializeFlakyTestsFiltersResponse, error)
}

type pipelineMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineMetricsServiceClient(cc grpc.ClientConnInterface) PipelineMetricsServiceClient {
	return &pipelineMetricsServiceClient{cc}
}

func (c *pipelineMetricsServiceClient) ListPipelineSummaries(ctx context.Context, in *ListPipelineSummariesRequest, opts ...grpc.CallOption) (*ListPipelineSummariesResponse, error) {
	out := new(ListPipelineSummariesResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListPipelineSummaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListJobSummaries(ctx context.Context, in *ListJobSummariesRequest, opts ...grpc.CallOption) (*ListJobSummariesResponse, error) {
	out := new(ListJobSummariesResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListJobSummaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListPipelinePerformanceMetrics(ctx context.Context, in *ListPipelinePerformanceMetricsRequest, opts ...grpc.CallOption) (*ListPipelinePerformanceMetricsResponse, error) {
	out := new(ListPipelinePerformanceMetricsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListPipelinePerformanceMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListPipelineReliabilityMetrics(ctx context.Context, in *ListPipelineReliabilityMetricsRequest, opts ...grpc.CallOption) (*ListPipelineReliabilityMetricsResponse, error) {
	out := new(ListPipelineReliabilityMetricsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListPipelineReliabilityMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListPipelineFrequencyMetrics(ctx context.Context, in *ListPipelineFrequencyMetricsRequest, opts ...grpc.CallOption) (*ListPipelineFrequencyMetricsResponse, error) {
	out := new(ListPipelineFrequencyMetricsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListPipelineFrequencyMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DescribeProjectPerformance(ctx context.Context, in *DescribeProjectPerformanceRequest, opts ...grpc.CallOption) (*DescribeProjectPerformanceResponse, error) {
	out := new(DescribeProjectPerformanceResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DescribeProjectPerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DescribeProjectSettings(ctx context.Context, in *DescribeProjectSettingsRequest, opts ...grpc.CallOption) (*DescribeProjectSettingsResponse, error) {
	out := new(DescribeProjectSettingsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DescribeProjectSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) UpdateProjectSettings(ctx context.Context, in *UpdateProjectSettingsRequest, opts ...grpc.CallOption) (*UpdateProjectSettingsResponse, error) {
	out := new(UpdateProjectSettingsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_UpdateProjectSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DescribeMetricsDashboard(ctx context.Context, in *DescribeMetricsDashboardRequest, opts ...grpc.CallOption) (*DescribeMetricsDashboardResponse, error) {
	out := new(DescribeMetricsDashboardResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DescribeMetricsDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListMetricsDashboards(ctx context.Context, in *ListMetricsDashboardsRequest, opts ...grpc.CallOption) (*ListMetricsDashboardsResponse, error) {
	out := new(ListMetricsDashboardsResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListMetricsDashboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) CreateMetricsDashboard(ctx context.Context, in *CreateMetricsDashboardRequest, opts ...grpc.CallOption) (*CreateMetricsDashboardResponse, error) {
	out := new(CreateMetricsDashboardResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_CreateMetricsDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) UpdateMetricsDashboard(ctx context.Context, in *UpdateMetricsDashboardRequest, opts ...grpc.CallOption) (*UpdateMetricsDashboardResponse, error) {
	out := new(UpdateMetricsDashboardResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_UpdateMetricsDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DeleteMetricsDashboard(ctx context.Context, in *DeleteMetricsDashboardRequest, opts ...grpc.CallOption) (*DeleteMetricsDashboardResponse, error) {
	out := new(DeleteMetricsDashboardResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DeleteMetricsDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) CreateDashboardItem(ctx context.Context, in *CreateDashboardItemRequest, opts ...grpc.CallOption) (*CreateDashboardItemResponse, error) {
	out := new(CreateDashboardItemResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_CreateDashboardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) UpdateDashboardItem(ctx context.Context, in *UpdateDashboardItemRequest, opts ...grpc.CallOption) (*UpdateDashboardItemResponse, error) {
	out := new(UpdateDashboardItemResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_UpdateDashboardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DeleteDashboardItem(ctx context.Context, in *DeleteDashboardItemRequest, opts ...grpc.CallOption) (*DeleteDashboardItemResponse, error) {
	out := new(DeleteDashboardItemResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DeleteDashboardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) DescribeDashboardItem(ctx context.Context, in *DescribeDashboardItemRequest, opts ...grpc.CallOption) (*DescribeDashboardItemResponse, error) {
	out := new(DescribeDashboardItemResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_DescribeDashboardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ChangeDashboardItemNotes(ctx context.Context, in *ChangeDashboardItemNotesRequest, opts ...grpc.CallOption) (*ChangeDashboardItemNotesResponse, error) {
	out := new(ChangeDashboardItemNotesResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ChangeDashboardItemNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) FetchOrganizationHealth(ctx context.Context, in *OrganizationHealthRequest, opts ...grpc.CallOption) (*OrganizationHealthResponse, error) {
	out := new(OrganizationHealthResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_FetchOrganizationHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) ListFlakyTestsFilters(ctx context.Context, in *ListFlakyTestsFiltersRequest, opts ...grpc.CallOption) (*ListFlakyTestsFiltersResponse, error) {
	out := new(ListFlakyTestsFiltersResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_ListFlakyTestsFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) CreateFlakyTestsFilter(ctx context.Context, in *CreateFlakyTestsFilterRequest, opts ...grpc.CallOption) (*CreateFlakyTestsFilterResponse, error) {
	out := new(CreateFlakyTestsFilterResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_CreateFlakyTestsFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) RemoveFlakyTestsFilter(ctx context.Context, in *RemoveFlakyTestsFilterRequest, opts ...grpc.CallOption) (*RemoveFlakyTestsFilterResponse, error) {
	out := new(RemoveFlakyTestsFilterResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_RemoveFlakyTestsFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) UpdateFlakyTestsFilter(ctx context.Context, in *UpdateFlakyTestsFilterRequest, opts ...grpc.CallOption) (*UpdateFlakyTestsFilterResponse, error) {
	out := new(UpdateFlakyTestsFilterResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_UpdateFlakyTestsFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineMetricsServiceClient) InitializeFlakyTestsFilters(ctx context.Context, in *InitializeFlakyTestsFiltersRequest, opts ...grpc.CallOption) (*InitializeFlakyTestsFiltersResponse, error) {
	out := new(InitializeFlakyTestsFiltersResponse)
	err := c.cc.Invoke(ctx, PipelineMetricsService_InitializeFlakyTestsFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineMetricsServiceServer is the server API for PipelineMetricsService service.
// All implementations should embed UnimplementedPipelineMetricsServiceServer
// for forward compatibility
type PipelineMetricsServiceServer interface {
	ListPipelineSummaries(context.Context, *ListPipelineSummariesRequest) (*ListPipelineSummariesResponse, error)
	ListJobSummaries(context.Context, *ListJobSummariesRequest) (*ListJobSummariesResponse, error)
	ListPipelinePerformanceMetrics(context.Context, *ListPipelinePerformanceMetricsRequest) (*ListPipelinePerformanceMetricsResponse, error)
	ListPipelineReliabilityMetrics(context.Context, *ListPipelineReliabilityMetricsRequest) (*ListPipelineReliabilityMetricsResponse, error)
	ListPipelineFrequencyMetrics(context.Context, *ListPipelineFrequencyMetricsRequest) (*ListPipelineFrequencyMetricsResponse, error)
	DescribeProjectPerformance(context.Context, *DescribeProjectPerformanceRequest) (*DescribeProjectPerformanceResponse, error)
	DescribeProjectSettings(context.Context, *DescribeProjectSettingsRequest) (*DescribeProjectSettingsResponse, error)
	UpdateProjectSettings(context.Context, *UpdateProjectSettingsRequest) (*UpdateProjectSettingsResponse, error)
	DescribeMetricsDashboard(context.Context, *DescribeMetricsDashboardRequest) (*DescribeMetricsDashboardResponse, error)
	ListMetricsDashboards(context.Context, *ListMetricsDashboardsRequest) (*ListMetricsDashboardsResponse, error)
	CreateMetricsDashboard(context.Context, *CreateMetricsDashboardRequest) (*CreateMetricsDashboardResponse, error)
	UpdateMetricsDashboard(context.Context, *UpdateMetricsDashboardRequest) (*UpdateMetricsDashboardResponse, error)
	DeleteMetricsDashboard(context.Context, *DeleteMetricsDashboardRequest) (*DeleteMetricsDashboardResponse, error)
	CreateDashboardItem(context.Context, *CreateDashboardItemRequest) (*CreateDashboardItemResponse, error)
	UpdateDashboardItem(context.Context, *UpdateDashboardItemRequest) (*UpdateDashboardItemResponse, error)
	DeleteDashboardItem(context.Context, *DeleteDashboardItemRequest) (*DeleteDashboardItemResponse, error)
	DescribeDashboardItem(context.Context, *DescribeDashboardItemRequest) (*DescribeDashboardItemResponse, error)
	ChangeDashboardItemNotes(context.Context, *ChangeDashboardItemNotesRequest) (*ChangeDashboardItemNotesResponse, error)
	FetchOrganizationHealth(context.Context, *OrganizationHealthRequest) (*OrganizationHealthResponse, error)
	ListFlakyTestsFilters(context.Context, *ListFlakyTestsFiltersRequest) (*ListFlakyTestsFiltersResponse, error)
	CreateFlakyTestsFilter(context.Context, *CreateFlakyTestsFilterRequest) (*CreateFlakyTestsFilterResponse, error)
	RemoveFlakyTestsFilter(context.Context, *RemoveFlakyTestsFilterRequest) (*RemoveFlakyTestsFilterResponse, error)
	UpdateFlakyTestsFilter(context.Context, *UpdateFlakyTestsFilterRequest) (*UpdateFlakyTestsFilterResponse, error)
	InitializeFlakyTestsFilters(context.Context, *InitializeFlakyTestsFiltersRequest) (*InitializeFlakyTestsFiltersResponse, error)
}

// UnimplementedPipelineMetricsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelineMetricsServiceServer struct {
}

func (UnimplementedPipelineMetricsServiceServer) ListPipelineSummaries(context.Context, *ListPipelineSummariesRequest) (*ListPipelineSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineSummaries not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListJobSummaries(context.Context, *ListJobSummariesRequest) (*ListJobSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobSummaries not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListPipelinePerformanceMetrics(context.Context, *ListPipelinePerformanceMetricsRequest) (*ListPipelinePerformanceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelinePerformanceMetrics not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListPipelineReliabilityMetrics(context.Context, *ListPipelineReliabilityMetricsRequest) (*ListPipelineReliabilityMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineReliabilityMetrics not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListPipelineFrequencyMetrics(context.Context, *ListPipelineFrequencyMetricsRequest) (*ListPipelineFrequencyMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineFrequencyMetrics not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DescribeProjectPerformance(context.Context, *DescribeProjectPerformanceRequest) (*DescribeProjectPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProjectPerformance not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DescribeProjectSettings(context.Context, *DescribeProjectSettingsRequest) (*DescribeProjectSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProjectSettings not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) UpdateProjectSettings(context.Context, *UpdateProjectSettingsRequest) (*UpdateProjectSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectSettings not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DescribeMetricsDashboard(context.Context, *DescribeMetricsDashboardRequest) (*DescribeMetricsDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMetricsDashboard not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListMetricsDashboards(context.Context, *ListMetricsDashboardsRequest) (*ListMetricsDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricsDashboards not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) CreateMetricsDashboard(context.Context, *CreateMetricsDashboardRequest) (*CreateMetricsDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricsDashboard not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) UpdateMetricsDashboard(context.Context, *UpdateMetricsDashboardRequest) (*UpdateMetricsDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsDashboard not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DeleteMetricsDashboard(context.Context, *DeleteMetricsDashboardRequest) (*DeleteMetricsDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetricsDashboard not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) CreateDashboardItem(context.Context, *CreateDashboardItemRequest) (*CreateDashboardItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboardItem not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) UpdateDashboardItem(context.Context, *UpdateDashboardItemRequest) (*UpdateDashboardItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardItem not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DeleteDashboardItem(context.Context, *DeleteDashboardItemRequest) (*DeleteDashboardItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboardItem not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) DescribeDashboardItem(context.Context, *DescribeDashboardItemRequest) (*DescribeDashboardItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDashboardItem not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ChangeDashboardItemNotes(context.Context, *ChangeDashboardItemNotesRequest) (*ChangeDashboardItemNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDashboardItemNotes not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) FetchOrganizationHealth(context.Context, *OrganizationHealthRequest) (*OrganizationHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrganizationHealth not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) ListFlakyTestsFilters(context.Context, *ListFlakyTestsFiltersRequest) (*ListFlakyTestsFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlakyTestsFilters not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) CreateFlakyTestsFilter(context.Context, *CreateFlakyTestsFilterRequest) (*CreateFlakyTestsFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlakyTestsFilter not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) RemoveFlakyTestsFilter(context.Context, *RemoveFlakyTestsFilterRequest) (*RemoveFlakyTestsFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlakyTestsFilter not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) UpdateFlakyTestsFilter(context.Context, *UpdateFlakyTestsFilterRequest) (*UpdateFlakyTestsFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlakyTestsFilter not implemented")
}
func (UnimplementedPipelineMetricsServiceServer) InitializeFlakyTestsFilters(context.Context, *InitializeFlakyTestsFiltersRequest) (*InitializeFlakyTestsFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeFlakyTestsFilters not implemented")
}

// UnsafePipelineMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineMetricsServiceServer will
// result in compilation errors.
type UnsafePipelineMetricsServiceServer interface {
	mustEmbedUnimplementedPipelineMetricsServiceServer()
}

func RegisterPipelineMetricsServiceServer(s grpc.ServiceRegistrar, srv PipelineMetricsServiceServer) {
	s.RegisterService(&PipelineMetricsService_ServiceDesc, srv)
}

func _PipelineMetricsService_ListPipelineSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListPipelineSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListPipelineSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListPipelineSummaries(ctx, req.(*ListPipelineSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListJobSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListJobSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListJobSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListJobSummaries(ctx, req.(*ListJobSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListPipelinePerformanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinePerformanceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListPipelinePerformanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListPipelinePerformanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListPipelinePerformanceMetrics(ctx, req.(*ListPipelinePerformanceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListPipelineReliabilityMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineReliabilityMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListPipelineReliabilityMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListPipelineReliabilityMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListPipelineReliabilityMetrics(ctx, req.(*ListPipelineReliabilityMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListPipelineFrequencyMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineFrequencyMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListPipelineFrequencyMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListPipelineFrequencyMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListPipelineFrequencyMetrics(ctx, req.(*ListPipelineFrequencyMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DescribeProjectPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProjectPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DescribeProjectPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DescribeProjectPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DescribeProjectPerformance(ctx, req.(*DescribeProjectPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DescribeProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProjectSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DescribeProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DescribeProjectSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DescribeProjectSettings(ctx, req.(*DescribeProjectSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_UpdateProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).UpdateProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_UpdateProjectSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).UpdateProjectSettings(ctx, req.(*UpdateProjectSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DescribeMetricsDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMetricsDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DescribeMetricsDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DescribeMetricsDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DescribeMetricsDashboard(ctx, req.(*DescribeMetricsDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListMetricsDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsDashboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListMetricsDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListMetricsDashboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListMetricsDashboards(ctx, req.(*ListMetricsDashboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_CreateMetricsDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetricsDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).CreateMetricsDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_CreateMetricsDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).CreateMetricsDashboard(ctx, req.(*CreateMetricsDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_UpdateMetricsDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).UpdateMetricsDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_UpdateMetricsDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).UpdateMetricsDashboard(ctx, req.(*UpdateMetricsDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DeleteMetricsDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetricsDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DeleteMetricsDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DeleteMetricsDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DeleteMetricsDashboard(ctx, req.(*DeleteMetricsDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_CreateDashboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).CreateDashboardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_CreateDashboardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).CreateDashboardItem(ctx, req.(*CreateDashboardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_UpdateDashboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).UpdateDashboardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_UpdateDashboardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).UpdateDashboardItem(ctx, req.(*UpdateDashboardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DeleteDashboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DeleteDashboardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DeleteDashboardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DeleteDashboardItem(ctx, req.(*DeleteDashboardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_DescribeDashboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDashboardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).DescribeDashboardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_DescribeDashboardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).DescribeDashboardItem(ctx, req.(*DescribeDashboardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ChangeDashboardItemNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDashboardItemNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ChangeDashboardItemNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ChangeDashboardItemNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ChangeDashboardItemNotes(ctx, req.(*ChangeDashboardItemNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_FetchOrganizationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).FetchOrganizationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_FetchOrganizationHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).FetchOrganizationHealth(ctx, req.(*OrganizationHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_ListFlakyTestsFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlakyTestsFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).ListFlakyTestsFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_ListFlakyTestsFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).ListFlakyTestsFilters(ctx, req.(*ListFlakyTestsFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_CreateFlakyTestsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlakyTestsFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).CreateFlakyTestsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_CreateFlakyTestsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).CreateFlakyTestsFilter(ctx, req.(*CreateFlakyTestsFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_RemoveFlakyTestsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFlakyTestsFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).RemoveFlakyTestsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_RemoveFlakyTestsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).RemoveFlakyTestsFilter(ctx, req.(*RemoveFlakyTestsFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_UpdateFlakyTestsFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlakyTestsFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).UpdateFlakyTestsFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_UpdateFlakyTestsFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).UpdateFlakyTestsFilter(ctx, req.(*UpdateFlakyTestsFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineMetricsService_InitializeFlakyTestsFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeFlakyTestsFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineMetricsServiceServer).InitializeFlakyTestsFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineMetricsService_InitializeFlakyTestsFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineMetricsServiceServer).InitializeFlakyTestsFilters(ctx, req.(*InitializeFlakyTestsFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineMetricsService_ServiceDesc is the grpc.ServiceDesc for PipelineMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Velocity.PipelineMetricsService",
	HandlerType: (*PipelineMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPipelineSummaries",
			Handler:    _PipelineMetricsService_ListPipelineSummaries_Handler,
		},
		{
			MethodName: "ListJobSummaries",
			Handler:    _PipelineMetricsService_ListJobSummaries_Handler,
		},
		{
			MethodName: "ListPipelinePerformanceMetrics",
			Handler:    _PipelineMetricsService_ListPipelinePerformanceMetrics_Handler,
		},
		{
			MethodName: "ListPipelineReliabilityMetrics",
			Handler:    _PipelineMetricsService_ListPipelineReliabilityMetrics_Handler,
		},
		{
			MethodName: "ListPipelineFrequencyMetrics",
			Handler:    _PipelineMetricsService_ListPipelineFrequencyMetrics_Handler,
		},
		{
			MethodName: "DescribeProjectPerformance",
			Handler:    _PipelineMetricsService_DescribeProjectPerformance_Handler,
		},
		{
			MethodName: "DescribeProjectSettings",
			Handler:    _PipelineMetricsService_DescribeProjectSettings_Handler,
		},
		{
			MethodName: "UpdateProjectSettings",
			Handler:    _PipelineMetricsService_UpdateProjectSettings_Handler,
		},
		{
			MethodName: "DescribeMetricsDashboard",
			Handler:    _PipelineMetricsService_DescribeMetricsDashboard_Handler,
		},
		{
			MethodName: "ListMetricsDashboards",
			Handler:    _PipelineMetricsService_ListMetricsDashboards_Handler,
		},
		{
			MethodName: "CreateMetricsDashboard",
			Handler:    _PipelineMetricsService_CreateMetricsDashboard_Handler,
		},
		{
			MethodName: "UpdateMetricsDashboard",
			Handler:    _PipelineMetricsService_UpdateMetricsDashboard_Handler,
		},
		{
			MethodName: "DeleteMetricsDashboard",
			Handler:    _PipelineMetricsService_DeleteMetricsDashboard_Handler,
		},
		{
			MethodName: "CreateDashboardItem",
			Handler:    _PipelineMetricsService_CreateDashboardItem_Handler,
		},
		{
			MethodName: "UpdateDashboardItem",
			Handler:    _PipelineMetricsService_UpdateDashboardItem_Handler,
		},
		{
			MethodName: "DeleteDashboardItem",
			Handler:    _PipelineMetricsService_DeleteDashboardItem_Handler,
		},
		{
			MethodName: "DescribeDashboardItem",
			Handler:    _PipelineMetricsService_DescribeDashboardItem_Handler,
		},
		{
			MethodName: "ChangeDashboardItemNotes",
			Handler:    _PipelineMetricsService_ChangeDashboardItemNotes_Handler,
		},
		{
			MethodName: "FetchOrganizationHealth",
			Handler:    _PipelineMetricsService_FetchOrganizationHealth_Handler,
		},
		{
			MethodName: "ListFlakyTestsFilters",
			Handler:    _PipelineMetricsService_ListFlakyTestsFilters_Handler,
		},
		{
			MethodName: "CreateFlakyTestsFilter",
			Handler:    _PipelineMetricsService_CreateFlakyTestsFilter_Handler,
		},
		{
			MethodName: "RemoveFlakyTestsFilter",
			Handler:    _PipelineMetricsService_RemoveFlakyTestsFilter_Handler,
		},
		{
			MethodName: "UpdateFlakyTestsFilter",
			Handler:    _PipelineMetricsService_UpdateFlakyTestsFilter_Handler,
		},
		{
			MethodName: "InitializeFlakyTestsFilters",
			Handler:    _PipelineMetricsService_InitializeFlakyTestsFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "velocity.proto",
}
