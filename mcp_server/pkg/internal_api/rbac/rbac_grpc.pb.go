// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: rbac.proto

package rbac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RBAC_ListUserPermissions_FullMethodName     = "/InternalApi.RBAC.RBAC/ListUserPermissions"
	RBAC_ListExistingPermissions_FullMethodName = "/InternalApi.RBAC.RBAC/ListExistingPermissions"
	RBAC_AssignRole_FullMethodName              = "/InternalApi.RBAC.RBAC/AssignRole"
	RBAC_RetractRole_FullMethodName             = "/InternalApi.RBAC.RBAC/RetractRole"
	RBAC_SubjectsHaveRoles_FullMethodName       = "/InternalApi.RBAC.RBAC/SubjectsHaveRoles"
	RBAC_ListRoles_FullMethodName               = "/InternalApi.RBAC.RBAC/ListRoles"
	RBAC_DescribeRole_FullMethodName            = "/InternalApi.RBAC.RBAC/DescribeRole"
	RBAC_ModifyRole_FullMethodName              = "/InternalApi.RBAC.RBAC/ModifyRole"
	RBAC_DestroyRole_FullMethodName             = "/InternalApi.RBAC.RBAC/DestroyRole"
	RBAC_ListMembers_FullMethodName             = "/InternalApi.RBAC.RBAC/ListMembers"
	RBAC_CountMembers_FullMethodName            = "/InternalApi.RBAC.RBAC/CountMembers"
	RBAC_ListAccessibleOrgs_FullMethodName      = "/InternalApi.RBAC.RBAC/ListAccessibleOrgs"
	RBAC_ListAccessibleProjects_FullMethodName  = "/InternalApi.RBAC.RBAC/ListAccessibleProjects"
	RBAC_RefreshCollaborators_FullMethodName    = "/InternalApi.RBAC.RBAC/RefreshCollaborators"
)

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Role and permissions management service for semaphoreci
type RBACClient interface {
	// Endpoint for checking user permissions
	// Operation is synchronous and idempotent.
	ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error)
	// Endpoint for listing all existing rbac permissions
	// Operation is synchronous and idempotent.
	ListExistingPermissions(ctx context.Context, in *ListExistingPermissionsRequest, opts ...grpc.CallOption) (*ListExistingPermissionsResponse, error)
	// Endpoint for assigning a Role to a Subject (User or Group).
	// Operation is synchronous and idempotent.
	AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error)
	// Endpoint for retracting a Role assigned to a Subject (User or Group).
	// This endpoint should be used only for retracting roles that were assigned manually.
	// Operation is synchronous and idempotent.
	RetractRole(ctx context.Context, in *RetractRoleRequest, opts ...grpc.CallOption) (*RetractRoleResponse, error)
	// Endpoint for checking whether Subject(s) have specific Roles assigned
	// to them.
	// Operation is synchronous and idempotent.
	SubjectsHaveRoles(ctx context.Context, in *SubjectsHaveRolesRequest, opts ...grpc.CallOption) (*SubjectsHaveRolesResponse, error)
	// Endpoint for fetching roles.
	// It can be userd to fetch public or custom roles belonging to a specific organization.
	// It can be also used to fetch only org_level roles or project_level roles,
	// depending on data sent in ListRolesRequest
	// Operation is synchronous and idempotent.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// Endpoint for describing one specific Role
	// Operation is synchronous and idempotent.
	DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error)
	// Endpoint for modifying a Role
	// Operation is synchronous and idempotent.
	ModifyRole(ctx context.Context, in *ModifyRoleRequest, opts ...grpc.CallOption) (*ModifyRoleResponse, error)
	// Endpoint for deleting a Role
	// Operation is synchronous and idempotent.
	DestroyRole(ctx context.Context, in *DestroyRoleRequest, opts ...grpc.CallOption) (*DestroyRoleResponse, error)
	// Endpoint for fetching all organization or project members (Users who have any
	// role within the given org/project)
	// Operation is synchronous and idempotent.
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// Endpoint for counting all organization members (Users who have any
	// role within the given org)
	// Operation is synchronous and idempotent.
	CountMembers(ctx context.Context, in *CountMembersRequest, opts ...grpc.CallOption) (*CountMembersResponse, error)
	// Endpoint for fetching ids of all organization a given user has access to.
	// User is assumed to have access to an organization if they have any role assigned
	// to them within that organization.
	// Operation is synchronous and idempotent.
	ListAccessibleOrgs(ctx context.Context, in *ListAccessibleOrgsRequest, opts ...grpc.CallOption) (*ListAccessibleOrgsResponse, error)
	// Endpoint for fetching ids of all projects a given user has access to within
	// given organization.
	// to them within that organization.
	// Operation is synchronous and idempotent.
	ListAccessibleProjects(ctx context.Context, in *ListAccessibleProjectsRequest, opts ...grpc.CallOption) (*ListAccessibleProjectsResponse, error)
	// Queues refreshing the resources (Collaborators and Projects) from a given Organization.
	// The list of collaborators is refreshed based on the Projects that are added to the Organization.
	// The operation is asynchronous.
	RefreshCollaborators(ctx context.Context, in *RefreshCollaboratorsRequest, opts ...grpc.CallOption) (*RefreshCollaboratorsResponse, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermissionsResponse)
	err := c.cc.Invoke(ctx, RBAC_ListUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListExistingPermissions(ctx context.Context, in *ListExistingPermissionsRequest, opts ...grpc.CallOption) (*ListExistingPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExistingPermissionsResponse)
	err := c.cc.Invoke(ctx, RBAC_ListExistingPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRoleResponse)
	err := c.cc.Invoke(ctx, RBAC_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) RetractRole(ctx context.Context, in *RetractRoleRequest, opts ...grpc.CallOption) (*RetractRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetractRoleResponse)
	err := c.cc.Invoke(ctx, RBAC_RetractRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) SubjectsHaveRoles(ctx context.Context, in *SubjectsHaveRolesRequest, opts ...grpc.CallOption) (*SubjectsHaveRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubjectsHaveRolesResponse)
	err := c.cc.Invoke(ctx, RBAC_SubjectsHaveRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, RBAC_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRoleResponse)
	err := c.cc.Invoke(ctx, RBAC_DescribeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ModifyRole(ctx context.Context, in *ModifyRoleRequest, opts ...grpc.CallOption) (*ModifyRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyRoleResponse)
	err := c.cc.Invoke(ctx, RBAC_ModifyRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DestroyRole(ctx context.Context, in *DestroyRoleRequest, opts ...grpc.CallOption) (*DestroyRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyRoleResponse)
	err := c.cc.Invoke(ctx, RBAC_DestroyRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, RBAC_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CountMembers(ctx context.Context, in *CountMembersRequest, opts ...grpc.CallOption) (*CountMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountMembersResponse)
	err := c.cc.Invoke(ctx, RBAC_CountMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListAccessibleOrgs(ctx context.Context, in *ListAccessibleOrgsRequest, opts ...grpc.CallOption) (*ListAccessibleOrgsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessibleOrgsResponse)
	err := c.cc.Invoke(ctx, RBAC_ListAccessibleOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) ListAccessibleProjects(ctx context.Context, in *ListAccessibleProjectsRequest, opts ...grpc.CallOption) (*ListAccessibleProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessibleProjectsResponse)
	err := c.cc.Invoke(ctx, RBAC_ListAccessibleProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) RefreshCollaborators(ctx context.Context, in *RefreshCollaboratorsRequest, opts ...grpc.CallOption) (*RefreshCollaboratorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshCollaboratorsResponse)
	err := c.cc.Invoke(ctx, RBAC_RefreshCollaborators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
// All implementations should embed UnimplementedRBACServer
// for forward compatibility.
//
// Role and permissions management service for semaphoreci
type RBACServer interface {
	// Endpoint for checking user permissions
	// Operation is synchronous and idempotent.
	ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error)
	// Endpoint for listing all existing rbac permissions
	// Operation is synchronous and idempotent.
	ListExistingPermissions(context.Context, *ListExistingPermissionsRequest) (*ListExistingPermissionsResponse, error)
	// Endpoint for assigning a Role to a Subject (User or Group).
	// Operation is synchronous and idempotent.
	AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error)
	// Endpoint for retracting a Role assigned to a Subject (User or Group).
	// This endpoint should be used only for retracting roles that were assigned manually.
	// Operation is synchronous and idempotent.
	RetractRole(context.Context, *RetractRoleRequest) (*RetractRoleResponse, error)
	// Endpoint for checking whether Subject(s) have specific Roles assigned
	// to them.
	// Operation is synchronous and idempotent.
	SubjectsHaveRoles(context.Context, *SubjectsHaveRolesRequest) (*SubjectsHaveRolesResponse, error)
	// Endpoint for fetching roles.
	// It can be userd to fetch public or custom roles belonging to a specific organization.
	// It can be also used to fetch only org_level roles or project_level roles,
	// depending on data sent in ListRolesRequest
	// Operation is synchronous and idempotent.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// Endpoint for describing one specific Role
	// Operation is synchronous and idempotent.
	DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error)
	// Endpoint for modifying a Role
	// Operation is synchronous and idempotent.
	ModifyRole(context.Context, *ModifyRoleRequest) (*ModifyRoleResponse, error)
	// Endpoint for deleting a Role
	// Operation is synchronous and idempotent.
	DestroyRole(context.Context, *DestroyRoleRequest) (*DestroyRoleResponse, error)
	// Endpoint for fetching all organization or project members (Users who have any
	// role within the given org/project)
	// Operation is synchronous and idempotent.
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// Endpoint for counting all organization members (Users who have any
	// role within the given org)
	// Operation is synchronous and idempotent.
	CountMembers(context.Context, *CountMembersRequest) (*CountMembersResponse, error)
	// Endpoint for fetching ids of all organization a given user has access to.
	// User is assumed to have access to an organization if they have any role assigned
	// to them within that organization.
	// Operation is synchronous and idempotent.
	ListAccessibleOrgs(context.Context, *ListAccessibleOrgsRequest) (*ListAccessibleOrgsResponse, error)
	// Endpoint for fetching ids of all projects a given user has access to within
	// given organization.
	// to them within that organization.
	// Operation is synchronous and idempotent.
	ListAccessibleProjects(context.Context, *ListAccessibleProjectsRequest) (*ListAccessibleProjectsResponse, error)
	// Queues refreshing the resources (Collaborators and Projects) from a given Organization.
	// The list of collaborators is refreshed based on the Projects that are added to the Organization.
	// The operation is asynchronous.
	RefreshCollaborators(context.Context, *RefreshCollaboratorsRequest) (*RefreshCollaboratorsResponse, error)
}

// UnimplementedRBACServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRBACServer struct{}

func (UnimplementedRBACServer) ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPermissions not implemented")
}
func (UnimplementedRBACServer) ListExistingPermissions(context.Context, *ListExistingPermissionsRequest) (*ListExistingPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingPermissions not implemented")
}
func (UnimplementedRBACServer) AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedRBACServer) RetractRole(context.Context, *RetractRoleRequest) (*RetractRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetractRole not implemented")
}
func (UnimplementedRBACServer) SubjectsHaveRoles(context.Context, *SubjectsHaveRolesRequest) (*SubjectsHaveRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsHaveRoles not implemented")
}
func (UnimplementedRBACServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRBACServer) DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRole not implemented")
}
func (UnimplementedRBACServer) ModifyRole(context.Context, *ModifyRoleRequest) (*ModifyRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRole not implemented")
}
func (UnimplementedRBACServer) DestroyRole(context.Context, *DestroyRoleRequest) (*DestroyRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRole not implemented")
}
func (UnimplementedRBACServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedRBACServer) CountMembers(context.Context, *CountMembersRequest) (*CountMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembers not implemented")
}
func (UnimplementedRBACServer) ListAccessibleOrgs(context.Context, *ListAccessibleOrgsRequest) (*ListAccessibleOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessibleOrgs not implemented")
}
func (UnimplementedRBACServer) ListAccessibleProjects(context.Context, *ListAccessibleProjectsRequest) (*ListAccessibleProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessibleProjects not implemented")
}
func (UnimplementedRBACServer) RefreshCollaborators(context.Context, *RefreshCollaboratorsRequest) (*RefreshCollaboratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshCollaborators not implemented")
}
func (UnimplementedRBACServer) testEmbeddedByValue() {}

// UnsafeRBACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServer will
// result in compilation errors.
type UnsafeRBACServer interface {
	mustEmbedUnimplementedRBACServer()
}

func RegisterRBACServer(s grpc.ServiceRegistrar, srv RBACServer) {
	// If the following call pancis, it indicates UnimplementedRBACServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RBAC_ServiceDesc, srv)
}

func _RBAC_ListUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListUserPermissions(ctx, req.(*ListUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListExistingPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExistingPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListExistingPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListExistingPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListExistingPermissions(ctx, req.(*ListExistingPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).AssignRole(ctx, req.(*AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_RetractRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetractRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).RetractRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_RetractRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).RetractRole(ctx, req.(*RetractRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_SubjectsHaveRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectsHaveRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).SubjectsHaveRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_SubjectsHaveRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).SubjectsHaveRoles(ctx, req.(*SubjectsHaveRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DescribeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DescribeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_DescribeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DescribeRole(ctx, req.(*DescribeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ModifyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ModifyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ModifyRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ModifyRole(ctx, req.(*ModifyRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DestroyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DestroyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_DestroyRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DestroyRole(ctx, req.(*DestroyRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CountMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CountMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_CountMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CountMembers(ctx, req.(*CountMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListAccessibleOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessibleOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListAccessibleOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListAccessibleOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListAccessibleOrgs(ctx, req.(*ListAccessibleOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_ListAccessibleProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessibleProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListAccessibleProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_ListAccessibleProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListAccessibleProjects(ctx, req.(*ListAccessibleProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_RefreshCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).RefreshCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBAC_RefreshCollaborators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).RefreshCollaborators(ctx, req.(*RefreshCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBAC_ServiceDesc is the grpc.ServiceDesc for RBAC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBAC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.RBAC.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserPermissions",
			Handler:    _RBAC_ListUserPermissions_Handler,
		},
		{
			MethodName: "ListExistingPermissions",
			Handler:    _RBAC_ListExistingPermissions_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _RBAC_AssignRole_Handler,
		},
		{
			MethodName: "RetractRole",
			Handler:    _RBAC_RetractRole_Handler,
		},
		{
			MethodName: "SubjectsHaveRoles",
			Handler:    _RBAC_SubjectsHaveRoles_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RBAC_ListRoles_Handler,
		},
		{
			MethodName: "DescribeRole",
			Handler:    _RBAC_DescribeRole_Handler,
		},
		{
			MethodName: "ModifyRole",
			Handler:    _RBAC_ModifyRole_Handler,
		},
		{
			MethodName: "DestroyRole",
			Handler:    _RBAC_DestroyRole_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _RBAC_ListMembers_Handler,
		},
		{
			MethodName: "CountMembers",
			Handler:    _RBAC_CountMembers_Handler,
		},
		{
			MethodName: "ListAccessibleOrgs",
			Handler:    _RBAC_ListAccessibleOrgs_Handler,
		},
		{
			MethodName: "ListAccessibleProjects",
			Handler:    _RBAC_ListAccessibleProjects_Handler,
		},
		{
			MethodName: "RefreshCollaborators",
			Handler:    _RBAC_RefreshCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac.proto",
}
