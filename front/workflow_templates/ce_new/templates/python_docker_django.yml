version: v1.0
name: "🐍 Django CI Pipeline (Docker)"

agent:
  machine:
    type: {{ machine_type }}
    os_image: {{ os_image }}  # Empty for Docker compose style pipeline

  containers:
  - name: main
    image: 'registry.semaphoreci.com/python:3.8-node-browsers'
    user: root # Explicitly run as root
  - name: mysql
    image: 'registry.semaphoreci.com/mysql:8.0'
    env_vars:
      - name: MYSQL_ROOT_PASSWORD
        value: root

fail_fast:
  stop:
    when: branch != 'master' # Stop execution early for non-master branches

auto_cancel:
  running:
    when: branch != 'master' # Auto-cancel running pipelines on non-master branches
  queued:
    when: branch = 'master' # Auto-cancel queued pipelines for master branch

global_job_config:
  prologue:
    commands:
      - checkout # Fetch the latest code from the repository
      - pip install -r requirements.txt --cache-dir .pip_cache # Install project dependencies
      - cache restore # Restore cached dependencies

blocks:
  - name: "🛠️ Install Dependencies"
    dependencies: [] # No dependencies; runs at the start
    task:
      jobs:
        - name: "📦 Install Python Dependencies"
          commands:
            # Try multiple strategies to overcome apt-get lock issues
            - sudo rm -f /var/lib/apt/lists/lock
            - sudo rm -f /var/cache/apt/archives/lock
            - sudo rm -f /var/lib/dpkg/lock*
            - sudo apt-get clean
            - sudo apt-get update -y
            - sudo apt-get install -y python3-dev
            - sudo apt-get install -y default-libmysqlclient-dev
            - pip download --cache-dir .pip_cache -r requirements.txt
            - pip install pylint pylint-django # Install Pylint and Django plugin
            - cache store

  - name: "🔍 Run Code Analysis"
    dependencies: 
      - "🛠️ Install Dependencies" # Ensure dependencies are installed
    task:
      jobs:
        - name: "🛡️ Pylint Analysis"
          commands:
            - pylint $(git ls-files | grep -v 'migrations' | grep -v 'settings.py' | grep -v 'manage.py' | grep -E '.py$') -E --load-plugins=pylint_django

  - name: "🧪 Run Unit Tests"
    dependencies:
      - "🛠️ Install Dependencies" # Ensure dependencies are installed
    task:
      jobs:
        - name: "🔎 Test Models"
          commands:
            - python manage.py test tasks.tests.test_models

        - name: "🔎 Test Views"
          commands:
            - python manage.py test tasks.tests.test_views

  - name: "🌐 Run Browser Tests"
    dependencies:
      - "🧪 Run Unit Tests" # Ensure unit tests pass first
    task:
      env_vars:
        - name: DB_NAME
          value: pydjango # Database name for testing
      jobs:
        - name: "🎭 Browser Tests"
          commands:
            - mysql --host=mysql -uroot -proot -e "create database $DB_NAME"
            - 'nohup python manage.py runserver 0.0.0.0:8000 &'
            - python manage.py test tasks.tests.test_browser

  - name: "🔐 Run Security Tests"
    dependencies: [] # Runs independently in parallel
    task:
      jobs:
        - name: "✅ Deployment Checklist"
          commands:
            - python manage.py check --deploy --fail-level ERROR