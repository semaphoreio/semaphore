// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.28.0
// source: rbac.proto

package rbac

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubjectType int32

const (
	SubjectType_USER  SubjectType = 0
	SubjectType_GROUP SubjectType = 1
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "USER",
		1: "GROUP",
	}
	SubjectType_value = map[string]int32{
		"USER":  0,
		"GROUP": 1,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[0].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[0]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

type Scope int32

const (
	Scope_SCOPE_UNSPECIFIED Scope = 0
	Scope_SCOPE_ORG         Scope = 1
	Scope_SCOPE_PROJECT     Scope = 2
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "SCOPE_ORG",
		2: "SCOPE_PROJECT",
	}
	Scope_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"SCOPE_ORG":         1,
		"SCOPE_PROJECT":     2,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[1].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[1]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

type RoleBindingSource int32

const (
	RoleBindingSource_ROLE_BINDING_SOURCE_UNSPECIFIED             RoleBindingSource = 0
	RoleBindingSource_ROLE_BINDING_SOURCE_MANUALLY                RoleBindingSource = 1
	RoleBindingSource_ROLE_BINDING_SOURCE_GITHUB                  RoleBindingSource = 2
	RoleBindingSource_ROLE_BINDING_SOURCE_BITBUCKET               RoleBindingSource = 3
	RoleBindingSource_ROLE_BINDING_SOURCE_GITLAB                  RoleBindingSource = 4
	RoleBindingSource_ROLE_BINDING_SOURCE_SCIM                    RoleBindingSource = 5
	RoleBindingSource_ROLE_BINDING_SOURCE_INHERITED_FROM_ORG_ROLE RoleBindingSource = 6
)

// Enum value maps for RoleBindingSource.
var (
	RoleBindingSource_name = map[int32]string{
		0: "ROLE_BINDING_SOURCE_UNSPECIFIED",
		1: "ROLE_BINDING_SOURCE_MANUALLY",
		2: "ROLE_BINDING_SOURCE_GITHUB",
		3: "ROLE_BINDING_SOURCE_BITBUCKET",
		4: "ROLE_BINDING_SOURCE_GITLAB",
		5: "ROLE_BINDING_SOURCE_SCIM",
		6: "ROLE_BINDING_SOURCE_INHERITED_FROM_ORG_ROLE",
	}
	RoleBindingSource_value = map[string]int32{
		"ROLE_BINDING_SOURCE_UNSPECIFIED":             0,
		"ROLE_BINDING_SOURCE_MANUALLY":                1,
		"ROLE_BINDING_SOURCE_GITHUB":                  2,
		"ROLE_BINDING_SOURCE_BITBUCKET":               3,
		"ROLE_BINDING_SOURCE_GITLAB":                  4,
		"ROLE_BINDING_SOURCE_SCIM":                    5,
		"ROLE_BINDING_SOURCE_INHERITED_FROM_ORG_ROLE": 6,
	}
)

func (x RoleBindingSource) Enum() *RoleBindingSource {
	p := new(RoleBindingSource)
	*p = x
	return p
}

func (x RoleBindingSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleBindingSource) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[2].Descriptor()
}

func (RoleBindingSource) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[2]
}

func (x RoleBindingSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleBindingSource.Descriptor instead.
func (RoleBindingSource) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2}
}

// Request for listing all permissions user has within an organization or project
//
// Arguments:
// user_id              = [required] User for whom you are checking permissions
// org_id               = [required] Org for which permissions apply
// project_id           = [optional] Project for which permissions apply,
//
//	if they are project_scoped
type ListUserPermissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserPermissionsRequest) Reset() {
	*x = ListUserPermissionsRequest{}
	mi := &file_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPermissionsRequest) ProtoMessage() {}

func (x *ListUserPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *ListUserPermissionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserPermissionsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUserPermissionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Response for listing user's permissions
//
// First 3 fields are copies from the request
// permissions  = list of permissions user has within the org/project
//
// Status INVALID_ARGUMENT will be raised if some of the parameters in the
// request are missing or arent valid uuids.
type ListUserPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Permissions   []string               `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserPermissionsResponse) Reset() {
	*x = ListUserPermissionsResponse{}
	mi := &file_rbac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPermissionsResponse) ProtoMessage() {}

func (x *ListUserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListUserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *ListUserPermissionsResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserPermissionsResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUserPermissionsResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListUserPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Request for listing existing permissions
//
// Arguments:
// scope 	= [optional] Defines which permissions should be listed. If the scope
//
//	is unspecified, both organization and project permissions are listed.
type ListExistingPermissionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         Scope                  `protobuf:"varint,1,opt,name=scope,proto3,enum=InternalApi.RBAC.Scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingPermissionsRequest) Reset() {
	*x = ListExistingPermissionsRequest{}
	mi := &file_rbac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingPermissionsRequest) ProtoMessage() {}

func (x *ListExistingPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListExistingPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *ListExistingPermissionsRequest) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

type ListExistingPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permission          `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingPermissionsResponse) Reset() {
	*x = ListExistingPermissionsResponse{}
	mi := &file_rbac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingPermissionsResponse) ProtoMessage() {}

func (x *ListExistingPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListExistingPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *ListExistingPermissionsResponse) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Request for assigning a role to a subject.
// Once assigned, the role will be markeed as `manually_assigned`
//
// Arguments:
// RoleAssignment message which encapsulates:
//   - role_id    = [required] Id of the role that is to be assigned to a subject
//   - subject    = [required] To whom you want to assign the role.
//     Can be a Group or a User
//   - org_id     = [required] Id of the organization within which this role
//     assignment applies. (User A is an Admin of the org B)
//   - project_id = [optional] Id of the project within which this role assignment
//     applies. (User A is a Contributor to the project B). This field
//     should be omitted if an organization-level role is being assigned.
//     Vice-versa, if a project-level role is being assigned, this field is required.
//
// - requester_id = [required] Id of the user who is initiating role assignment
//
// Precondition:
//   - All given entities (role, subject, org, and project) must already exist
//     in the system.
//   - Role must be public (org_id for that role is nil_uuid) or belong to the
//     org that is passed in the 'org_id' parameter.
//   - If a project-level role is being assigned, project_id must be given, and that
//     project must belong to the organization passed in the 'org_id' parameter.
//   - Requester must have valid permissions to assign the role.
//
// Postcondition:
// - If the request is valid, SubjectRoleBinding is created.
//
// Idempotency:
//   - If the same role is assigned multiple times to the same subject (within the
//     context of same org/project), new SubjectRoleBinding will overwrite the old one.
//     Nothing will change except the time of role assignment.
type AssignRoleRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoleAssignment *RoleAssignment        `protobuf:"bytes,1,opt,name=role_assignment,json=roleAssignment,proto3" json:"role_assignment,omitempty"`
	RequesterId    string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AssignRoleRequest) Reset() {
	*x = AssignRoleRequest{}
	mi := &file_rbac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRoleRequest) ProtoMessage() {}

func (x *AssignRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRoleRequest.ProtoReflect.Descriptor instead.
func (*AssignRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *AssignRoleRequest) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		return x.RoleAssignment
	}
	return nil
}

func (x *AssignRoleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

// Response to AssignRole endpoint
//
// Status OK will be raised if assignment was successful
// Status INVALID_ARGUMENT will be raise if some of the parameters in the
// request are missing or arent valid format
// Status FAILED_PRECONDITION will be raised if preconditions listed above
// AssignRoleRequest arent met
type AssignRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRoleResponse) Reset() {
	*x = AssignRoleResponse{}
	mi := &file_rbac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRoleResponse) ProtoMessage() {}

func (x *AssignRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRoleResponse.ProtoReflect.Descriptor instead.
func (*AssignRoleResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{5}
}

// Request for retracting an assigned role from a given subject (user or group)
// This endpoint serves for retracting roles that have been manually assigned (
// through the AssignRole endpoint). If the user has a role assigned through SCIM
// or Git sync, it can not be removed using this endpoint.
//
// Arguments:
// RoleAssignment message which encapsulates:
//   - role_id    = [optional] Although the RoleAssignment message contains role_id field,
//     it is redundant for this endpoint, since there can only be one role
//     manually assigned to a user. And, since this endpoint is used to retract
//     manually assigned roles, we know which role to retract without the id
//     being passed.
//   - subject    = [required] Subject from whom the role is retracted
//     Can be a Group or a User
//   - org_id     = [required] Id of the organization.
//   - project_id = [optional] Id of the project from which role assignment is being
//     retracted. Needed only if role has project_scope.
//
// - requester_id = [required] Id of the user who is initiating role retraction
type RetractRoleRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoleAssignment *RoleAssignment        `protobuf:"bytes,1,opt,name=role_assignment,json=roleAssignment,proto3" json:"role_assignment,omitempty"`
	RequesterId    string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RetractRoleRequest) Reset() {
	*x = RetractRoleRequest{}
	mi := &file_rbac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetractRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetractRoleRequest) ProtoMessage() {}

func (x *RetractRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetractRoleRequest.ProtoReflect.Descriptor instead.
func (*RetractRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *RetractRoleRequest) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		return x.RoleAssignment
	}
	return nil
}

func (x *RetractRoleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

// Response from RetractRole endpoint
//
// Grpc Status OK will be raised whether role was retracted or that role assignment
// didnt exist at all in the first place.
// Status INVALID_ARGUMENT will be raised if some of the parameters in the
// request are missing or arent valid format.
type RetractRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetractRoleResponse) Reset() {
	*x = RetractRoleResponse{}
	mi := &file_rbac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetractRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetractRoleResponse) ProtoMessage() {}

func (x *RetractRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetractRoleResponse.ProtoReflect.Descriptor instead.
func (*RetractRoleResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7}
}

// Request for checking if a subject (or list of subjects) have certain role assignments
//
// Arguments:
// List of RoleAssignments. Same rules apply as specified for AssignRoleRequest
//
// Preconditions: /
//
// Postconditions: /
//
// This request does not alter any data.
type SubjectsHaveRolesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RoleAssignments []*RoleAssignment      `protobuf:"bytes,1,rep,name=role_assignments,json=roleAssignments,proto3" json:"role_assignments,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubjectsHaveRolesRequest) Reset() {
	*x = SubjectsHaveRolesRequest{}
	mi := &file_rbac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectsHaveRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectsHaveRolesRequest) ProtoMessage() {}

func (x *SubjectsHaveRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectsHaveRolesRequest.ProtoReflect.Descriptor instead.
func (*SubjectsHaveRolesRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *SubjectsHaveRolesRequest) GetRoleAssignments() []*RoleAssignment {
	if x != nil {
		return x.RoleAssignments
	}
	return nil
}

// Response to the 'SubjectsHaveRole' endpoint
//
// Each RoleAssignment object in the 'SubjectsHaveRequest' is paired with boolean
// indicating whether that RoleAssignment exists or not.
type SubjectsHaveRolesResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	HasRoles      []*SubjectsHaveRolesResponse_HasRole `protobuf:"bytes,1,rep,name=has_roles,json=hasRoles,proto3" json:"has_roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectsHaveRolesResponse) Reset() {
	*x = SubjectsHaveRolesResponse{}
	mi := &file_rbac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectsHaveRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectsHaveRolesResponse) ProtoMessage() {}

func (x *SubjectsHaveRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectsHaveRolesResponse.ProtoReflect.Descriptor instead.
func (*SubjectsHaveRolesResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *SubjectsHaveRolesResponse) GetHasRoles() []*SubjectsHaveRolesResponse_HasRole {
	if x != nil {
		return x.HasRoles
	}
	return nil
}

// Request for listing roles
//
// Arguments:
// org_id   = [optional] Fetching roles available to specified organization (
//
//	including both default and custom roles).
//	If this is omitted, default roles (roles that dont belong to any
//	specific org) are raised.
//
// scope = [optional] Fetching only roles that apply to this scope (Only
//
//	organization-level roles or only project_level roles). If this is
//	omitted, all the roles are raised, regardless of their scope.
//
// Precondition:
// - Arguments need to be valid version 4 uuids.
//
// Postcondition: /
//
// This request does not alter any data.
type ListRolesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Scope         Scope                  `protobuf:"varint,2,opt,name=scope,proto3,enum=InternalApi.RBAC.Scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesRequest) Reset() {
	*x = ListRolesRequest{}
	mi := &file_rbac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest) ProtoMessage() {}

func (x *ListRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest.ProtoReflect.Descriptor instead.
func (*ListRolesRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *ListRolesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListRolesRequest) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

type ListRolesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roles         []*Role                `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesResponse) Reset() {
	*x = ListRolesResponse{}
	mi := &file_rbac_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesResponse) ProtoMessage() {}

func (x *ListRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesResponse.ProtoReflect.Descriptor instead.
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{11}
}

func (x *ListRolesResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Request for describing a roles
//
// Arguments:
// org_id     = [required] Organization ID
// role_id    = [required] Role ID
//
// Precondition:
// - Arguments need to be valid version 4 uuids.
//
// Postcondition: /
//
// This request does not alter any data.
type DescribeRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RoleId        string                 `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRoleRequest) Reset() {
	*x = DescribeRoleRequest{}
	mi := &file_rbac_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRoleRequest) ProtoMessage() {}

func (x *DescribeRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRoleRequest.ProtoReflect.Descriptor instead.
func (*DescribeRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeRoleRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DescribeRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type DescribeRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRoleResponse) Reset() {
	*x = DescribeRoleResponse{}
	mi := &file_rbac_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRoleResponse) ProtoMessage() {}

func (x *DescribeRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRoleResponse.ProtoReflect.Descriptor instead.
func (*DescribeRoleResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// Request for modifying a role
//
// Arguments:
// role         = [required] Role object that is being modified
// requester_id = [required] Id of the user who is initiating role modification
//
// Preconditions:
// - If role does not exist, a new role will be created.
// - Requester must have valid permissions to modify the role.
//
// Postconditions:
// - If the request is valid, the role is modified.
type ModifyRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	RequesterId   string                 `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyRoleRequest) Reset() {
	*x = ModifyRoleRequest{}
	mi := &file_rbac_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRoleRequest) ProtoMessage() {}

func (x *ModifyRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRoleRequest.ProtoReflect.Descriptor instead.
func (*ModifyRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyRoleRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ModifyRoleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type ModifyRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyRoleResponse) Reset() {
	*x = ModifyRoleResponse{}
	mi := &file_rbac_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRoleResponse) ProtoMessage() {}

func (x *ModifyRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRoleResponse.ProtoReflect.Descriptor instead.
func (*ModifyRoleResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *ModifyRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// Request for deleting a role
//
// Arguments:
// org_id       = [required] Organization ID
// role_id      = [required] Role ID
// requester_id = [required] Id of the user who is initiating role removal
//
// Preconditions:
//   - If role does not exist, nothing will happen.
//   - If role is assigned to any entity, removing will fail.
//     FAILED_PRECONDITION error will be raised and transmitted to the client.
//
// Postconditions:
// - If the request is valid, the role is removed.
type DestroyRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RoleId        string                 `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RequesterId   string                 `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyRoleRequest) Reset() {
	*x = DestroyRoleRequest{}
	mi := &file_rbac_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRoleRequest) ProtoMessage() {}

func (x *DestroyRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRoleRequest.ProtoReflect.Descriptor instead.
func (*DestroyRoleRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *DestroyRoleRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DestroyRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *DestroyRoleRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type DestroyRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyRoleResponse) Reset() {
	*x = DestroyRoleResponse{}
	mi := &file_rbac_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRoleResponse) ProtoMessage() {}

func (x *DestroyRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRoleResponse.ProtoReflect.Descriptor instead.
func (*DestroyRoleResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{17}
}

func (x *DestroyRoleResponse) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

// This message is user for fetching both org members and project members
//
// NOTE: Here "members" refer to users who have any role witihin given organization
// or project, not sepcifically role named "member"
//
// Arguments:
// org_id       = [required] Id of organization whos members you want to fetch. If
//
//	you are fetching project members, then this is the org who owns that
//	project.
//
// project_id   = [optional] Id of project whos members you are fetching. Not needed
//
//	if you are fetching organizational members.
//
// member_name_contains
//
//	= [optional] Used for name-based filtering. If this parameter is
//	omitted, the filter won't be applied.
//
// member_has_role
//
//	             = [optional] Used for role-based filtering. If we want to fetch all the
//			members who have the Admin role, Admin role id should be passed via this
//			parameter. If this parameter is omitted, the filter won't be applied.
//
// page         = [optional] This endpoint returns a paginated list of members.
//
//	If this parameter is omitted, the default page number (1) and page
//	size (20) are assumed.
//
// Preconditions:
// - Arguments need to be valid version 4 uuids.
// - If org or project with given id's dont exist, empty list will be returned
//
// / Postcondition: /
//
// This request does not alter any data.
type ListMembersRequest struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	OrgId              string                   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId          string                   `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	MemberNameContains string                   `protobuf:"bytes,3,opt,name=member_name_contains,json=memberNameContains,proto3" json:"member_name_contains,omitempty"`
	Page               *ListMembersRequest_Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	MemberHasRole      string                   `protobuf:"bytes,5,opt,name=member_has_role,json=memberHasRole,proto3" json:"member_has_role,omitempty"`
	MemberType         SubjectType              `protobuf:"varint,6,opt,name=member_type,json=memberType,proto3,enum=InternalApi.RBAC.SubjectType" json:"member_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListMembersRequest) Reset() {
	*x = ListMembersRequest{}
	mi := &file_rbac_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMembersRequest) ProtoMessage() {}

func (x *ListMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMembersRequest.ProtoReflect.Descriptor instead.
func (*ListMembersRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *ListMembersRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListMembersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListMembersRequest) GetMemberNameContains() string {
	if x != nil {
		return x.MemberNameContains
	}
	return ""
}

func (x *ListMembersRequest) GetPage() *ListMembersRequest_Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMembersRequest) GetMemberHasRole() string {
	if x != nil {
		return x.MemberHasRole
	}
	return ""
}

func (x *ListMembersRequest) GetMemberType() SubjectType {
	if x != nil {
		return x.MemberType
	}
	return SubjectType_USER
}

// Response message for fetching org and project members
//
// Containes list of Semaphore users with roles those users have witihn the given
// organization or project, as well as when/how the roles were assigned to them.
//
// total_pages      = Since this endpoint returns paginated data, it also provides
//
//	the number of total pages for the same filter and pagination
//	parameters.
type ListMembersResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Members       []*ListMembersResponse_Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	TotalPages    int32                         `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMembersResponse) Reset() {
	*x = ListMembersResponse{}
	mi := &file_rbac_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMembersResponse) ProtoMessage() {}

func (x *ListMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMembersResponse.ProtoReflect.Descriptor instead.
func (*ListMembersResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{19}
}

func (x *ListMembersResponse) GetMembers() []*ListMembersResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ListMembersResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// Request for counting all organization members (Users who have any
// role within the given org)
// Arguments:
// org_id       = [required] Id of organization whos members you want to count.
//
// Preconditions:
// - Arguments need to be valid version 4 uuids.
// - Status NOT_FOUND will be raised if org with given id doesn't exist
//
// Postcondition: /
//
// This request does not alter any data.
type CountMembersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountMembersRequest) Reset() {
	*x = CountMembersRequest{}
	mi := &file_rbac_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountMembersRequest) ProtoMessage() {}

func (x *CountMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountMembersRequest.ProtoReflect.Descriptor instead.
func (*CountMembersRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *CountMembersRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for counting all organization members (Users who have any
// role within the given org).
//
// Contains the count of all users with roles those users have within the given
// organization.
//
// members = Number of members in the given organization.
type CountMembersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Members       int32                  `protobuf:"varint,1,opt,name=members,proto3" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountMembersResponse) Reset() {
	*x = CountMembersResponse{}
	mi := &file_rbac_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountMembersResponse) ProtoMessage() {}

func (x *CountMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountMembersResponse.ProtoReflect.Descriptor instead.
func (*CountMembersResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{21}
}

func (x *CountMembersResponse) GetMembers() int32 {
	if x != nil {
		return x.Members
	}
	return 0
}

type SubjectRoleBinding struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Role           *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Source         RoleBindingSource      `protobuf:"varint,2,opt,name=source,proto3,enum=InternalApi.RBAC.RoleBindingSource" json:"source,omitempty"`
	RoleAssignedAt *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=role_assigned_at,json=roleAssignedAt,proto3" json:"role_assigned_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubjectRoleBinding) Reset() {
	*x = SubjectRoleBinding{}
	mi := &file_rbac_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectRoleBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectRoleBinding) ProtoMessage() {}

func (x *SubjectRoleBinding) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectRoleBinding.ProtoReflect.Descriptor instead.
func (*SubjectRoleBinding) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *SubjectRoleBinding) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SubjectRoleBinding) GetSource() RoleBindingSource {
	if x != nil {
		return x.Source
	}
	return RoleBindingSource_ROLE_BINDING_SOURCE_UNSPECIFIED
}

func (x *SubjectRoleBinding) GetRoleAssignedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RoleAssignedAt
	}
	return nil
}

type ListAccessibleOrgsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessibleOrgsRequest) Reset() {
	*x = ListAccessibleOrgsRequest{}
	mi := &file_rbac_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessibleOrgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessibleOrgsRequest) ProtoMessage() {}

func (x *ListAccessibleOrgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessibleOrgsRequest.ProtoReflect.Descriptor instead.
func (*ListAccessibleOrgsRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{23}
}

func (x *ListAccessibleOrgsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListAccessibleOrgsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgIds        []string               `protobuf:"bytes,1,rep,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessibleOrgsResponse) Reset() {
	*x = ListAccessibleOrgsResponse{}
	mi := &file_rbac_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessibleOrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessibleOrgsResponse) ProtoMessage() {}

func (x *ListAccessibleOrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessibleOrgsResponse.ProtoReflect.Descriptor instead.
func (*ListAccessibleOrgsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *ListAccessibleOrgsResponse) GetOrgIds() []string {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

type ListAccessibleProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessibleProjectsRequest) Reset() {
	*x = ListAccessibleProjectsRequest{}
	mi := &file_rbac_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessibleProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessibleProjectsRequest) ProtoMessage() {}

func (x *ListAccessibleProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessibleProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListAccessibleProjectsRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *ListAccessibleProjectsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListAccessibleProjectsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListAccessibleProjectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectIds    []string               `protobuf:"bytes,1,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccessibleProjectsResponse) Reset() {
	*x = ListAccessibleProjectsResponse{}
	mi := &file_rbac_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccessibleProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessibleProjectsResponse) ProtoMessage() {}

func (x *ListAccessibleProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessibleProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListAccessibleProjectsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *ListAccessibleProjectsResponse) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type RoleAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Subject       *Subject               `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	OrgId         string                 `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleAssignment) Reset() {
	*x = RoleAssignment{}
	mi := &file_rbac_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignment) ProtoMessage() {}

func (x *RoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignment.ProtoReflect.Descriptor instead.
func (*RoleAssignment) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *RoleAssignment) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *RoleAssignment) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *RoleAssignment) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *RoleAssignment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type Subject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubjectType   SubjectType            `protobuf:"varint,1,opt,name=subject_type,json=subjectType,proto3,enum=InternalApi.RBAC.SubjectType" json:"subject_type,omitempty"`
	SubjectId     string                 `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subject) Reset() {
	*x = Subject{}
	mi := &file_rbac_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *Subject) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_USER
}

func (x *Subject) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *Subject) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Refresh call request
//
// Arguments:
// - org_id = [required] Id of the organization that needs to be refreshed
type RefreshCollaboratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshCollaboratorsRequest) Reset() {
	*x = RefreshCollaboratorsRequest{}
	mi := &file_rbac_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshCollaboratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshCollaboratorsRequest) ProtoMessage() {}

func (x *RefreshCollaboratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshCollaboratorsRequest.ProtoReflect.Descriptor instead.
func (*RefreshCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{29}
}

func (x *RefreshCollaboratorsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Refresh call response
type RefreshCollaboratorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshCollaboratorsResponse) Reset() {
	*x = RefreshCollaboratorsResponse{}
	mi := &file_rbac_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshCollaboratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshCollaboratorsResponse) ProtoMessage() {}

func (x *RefreshCollaboratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshCollaboratorsResponse.ProtoReflect.Descriptor instead.
func (*RefreshCollaboratorsResponse) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{30}
}

// scope            = Defines if this is an organization or project-level role
// rbac_permissions = List of permissions DIRECTLY assigned to the role
// inherited_role   = If this role inherits some other roles, they will be listed here
// maps_to          = This field applies only to organization-level roles. If
//
//	the organizatio role grants a project-level role for all
//	of the projects within the organization, that role will be listed in this field.
//
// readonly         = If this is set to true, the role is immutable and cannot be modified
type Role struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrgId       string                 `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Scope       Scope                  `protobuf:"varint,4,opt,name=scope,proto3,enum=InternalApi.RBAC.Scope" json:"scope,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// permissions field is deprecated
	Permissions     []string      `protobuf:"bytes,6,rep,name=permissions,proto3" json:"permissions,omitempty"`
	RbacPermissions []*Permission `protobuf:"bytes,7,rep,name=rbac_permissions,json=rbacPermissions,proto3" json:"rbac_permissions,omitempty"`
	InheritedRole   *Role         `protobuf:"bytes,8,opt,name=inherited_role,json=inheritedRole,proto3" json:"inherited_role,omitempty"`
	MapsTo          *Role         `protobuf:"bytes,9,opt,name=maps_to,json=mapsTo,proto3" json:"maps_to,omitempty"`
	Readonly        bool          `protobuf:"varint,10,opt,name=readonly,proto3" json:"readonly,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_rbac_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{31}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Role) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (x *Role) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Role) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Role) GetRbacPermissions() []*Permission {
	if x != nil {
		return x.RbacPermissions
	}
	return nil
}

func (x *Role) GetInheritedRole() *Role {
	if x != nil {
		return x.InheritedRole
	}
	return nil
}

func (x *Role) GetMapsTo() *Role {
	if x != nil {
		return x.MapsTo
	}
	return nil
}

func (x *Role) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type Permission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Scope         Scope                  `protobuf:"varint,4,opt,name=scope,proto3,enum=InternalApi.RBAC.Scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_rbac_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{32}
}

func (x *Permission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Permission) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

type SubjectsHaveRolesResponse_HasRole struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoleAssignment *RoleAssignment        `protobuf:"bytes,1,opt,name=role_assignment,json=roleAssignment,proto3" json:"role_assignment,omitempty"`
	HasRole        bool                   `protobuf:"varint,2,opt,name=has_role,json=hasRole,proto3" json:"has_role,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubjectsHaveRolesResponse_HasRole) Reset() {
	*x = SubjectsHaveRolesResponse_HasRole{}
	mi := &file_rbac_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectsHaveRolesResponse_HasRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectsHaveRolesResponse_HasRole) ProtoMessage() {}

func (x *SubjectsHaveRolesResponse_HasRole) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectsHaveRolesResponse_HasRole.ProtoReflect.Descriptor instead.
func (*SubjectsHaveRolesResponse_HasRole) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SubjectsHaveRolesResponse_HasRole) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		return x.RoleAssignment
	}
	return nil
}

func (x *SubjectsHaveRolesResponse_HasRole) GetHasRole() bool {
	if x != nil {
		return x.HasRole
	}
	return false
}

type ListMembersRequest_Page struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        int32                  `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMembersRequest_Page) Reset() {
	*x = ListMembersRequest_Page{}
	mi := &file_rbac_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMembersRequest_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMembersRequest_Page) ProtoMessage() {}

func (x *ListMembersRequest_Page) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMembersRequest_Page.ProtoReflect.Descriptor instead.
func (*ListMembersRequest_Page) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListMembersRequest_Page) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListMembersRequest_Page) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMembersResponse_Member struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Subject             *Subject               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectRoleBindings []*SubjectRoleBinding  `protobuf:"bytes,3,rep,name=subject_role_bindings,json=subjectRoleBindings,proto3" json:"subject_role_bindings,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListMembersResponse_Member) Reset() {
	*x = ListMembersResponse_Member{}
	mi := &file_rbac_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMembersResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMembersResponse_Member) ProtoMessage() {}

func (x *ListMembersResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMembersResponse_Member.ProtoReflect.Descriptor instead.
func (*ListMembersResponse_Member) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ListMembersResponse_Member) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ListMembersResponse_Member) GetSubjectRoleBindings() []*SubjectRoleBinding {
	if x != nil {
		return x.SubjectRoleBindings
	}
	return nil
}

var File_rbac_proto protoreflect.FileDescriptor

var file_rbac_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41,
	0x43, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x61,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52,
	0x42, 0x41, 0x43, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x48, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xde, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x61, 0x76,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x61, 0x76,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x1a, 0x6f, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0x58, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42,
	0x41, 0x43, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x45,
	0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x11, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x67, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3c,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x98, 0x02, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x97, 0x01,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a,
	0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2c, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x34, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f,
	0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x94,
	0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x04,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41,
	0x43, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x62, 0x61, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x62, 0x61, 0x63,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61,
	0x70, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x73, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2a, 0x22, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x2a,
	0x40, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0x8c, 0x02, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x4d, 0x10, 0x05, 0x12,
	0x2f, 0x0a, 0x2b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x06,
	0x32, 0xa7, 0x0b, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52,
	0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41,
	0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52,
	0x42, 0x41, 0x43, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x61,
	0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x48, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48,
	0x61, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42,
	0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52,
	0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x52, 0x42, 0x41, 0x43, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x42, 0x41, 0x43, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbac_proto_rawDescOnce sync.Once
	file_rbac_proto_rawDescData = file_rbac_proto_rawDesc
)

func file_rbac_proto_rawDescGZIP() []byte {
	file_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_proto_rawDescData)
	})
	return file_rbac_proto_rawDescData
}

var file_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_rbac_proto_goTypes = []any{
	(SubjectType)(0),                          // 0: InternalApi.RBAC.SubjectType
	(Scope)(0),                                // 1: InternalApi.RBAC.Scope
	(RoleBindingSource)(0),                    // 2: InternalApi.RBAC.RoleBindingSource
	(*ListUserPermissionsRequest)(nil),        // 3: InternalApi.RBAC.ListUserPermissionsRequest
	(*ListUserPermissionsResponse)(nil),       // 4: InternalApi.RBAC.ListUserPermissionsResponse
	(*ListExistingPermissionsRequest)(nil),    // 5: InternalApi.RBAC.ListExistingPermissionsRequest
	(*ListExistingPermissionsResponse)(nil),   // 6: InternalApi.RBAC.ListExistingPermissionsResponse
	(*AssignRoleRequest)(nil),                 // 7: InternalApi.RBAC.AssignRoleRequest
	(*AssignRoleResponse)(nil),                // 8: InternalApi.RBAC.AssignRoleResponse
	(*RetractRoleRequest)(nil),                // 9: InternalApi.RBAC.RetractRoleRequest
	(*RetractRoleResponse)(nil),               // 10: InternalApi.RBAC.RetractRoleResponse
	(*SubjectsHaveRolesRequest)(nil),          // 11: InternalApi.RBAC.SubjectsHaveRolesRequest
	(*SubjectsHaveRolesResponse)(nil),         // 12: InternalApi.RBAC.SubjectsHaveRolesResponse
	(*ListRolesRequest)(nil),                  // 13: InternalApi.RBAC.ListRolesRequest
	(*ListRolesResponse)(nil),                 // 14: InternalApi.RBAC.ListRolesResponse
	(*DescribeRoleRequest)(nil),               // 15: InternalApi.RBAC.DescribeRoleRequest
	(*DescribeRoleResponse)(nil),              // 16: InternalApi.RBAC.DescribeRoleResponse
	(*ModifyRoleRequest)(nil),                 // 17: InternalApi.RBAC.ModifyRoleRequest
	(*ModifyRoleResponse)(nil),                // 18: InternalApi.RBAC.ModifyRoleResponse
	(*DestroyRoleRequest)(nil),                // 19: InternalApi.RBAC.DestroyRoleRequest
	(*DestroyRoleResponse)(nil),               // 20: InternalApi.RBAC.DestroyRoleResponse
	(*ListMembersRequest)(nil),                // 21: InternalApi.RBAC.ListMembersRequest
	(*ListMembersResponse)(nil),               // 22: InternalApi.RBAC.ListMembersResponse
	(*CountMembersRequest)(nil),               // 23: InternalApi.RBAC.CountMembersRequest
	(*CountMembersResponse)(nil),              // 24: InternalApi.RBAC.CountMembersResponse
	(*SubjectRoleBinding)(nil),                // 25: InternalApi.RBAC.SubjectRoleBinding
	(*ListAccessibleOrgsRequest)(nil),         // 26: InternalApi.RBAC.ListAccessibleOrgsRequest
	(*ListAccessibleOrgsResponse)(nil),        // 27: InternalApi.RBAC.ListAccessibleOrgsResponse
	(*ListAccessibleProjectsRequest)(nil),     // 28: InternalApi.RBAC.ListAccessibleProjectsRequest
	(*ListAccessibleProjectsResponse)(nil),    // 29: InternalApi.RBAC.ListAccessibleProjectsResponse
	(*RoleAssignment)(nil),                    // 30: InternalApi.RBAC.RoleAssignment
	(*Subject)(nil),                           // 31: InternalApi.RBAC.Subject
	(*RefreshCollaboratorsRequest)(nil),       // 32: InternalApi.RBAC.RefreshCollaboratorsRequest
	(*RefreshCollaboratorsResponse)(nil),      // 33: InternalApi.RBAC.RefreshCollaboratorsResponse
	(*Role)(nil),                              // 34: InternalApi.RBAC.Role
	(*Permission)(nil),                        // 35: InternalApi.RBAC.Permission
	(*SubjectsHaveRolesResponse_HasRole)(nil), // 36: InternalApi.RBAC.SubjectsHaveRolesResponse.HasRole
	(*ListMembersRequest_Page)(nil),           // 37: InternalApi.RBAC.ListMembersRequest.Page
	(*ListMembersResponse_Member)(nil),        // 38: InternalApi.RBAC.ListMembersResponse.Member
	(*timestamp.Timestamp)(nil),               // 39: google.protobuf.Timestamp
}
var file_rbac_proto_depIdxs = []int32{
	1,  // 0: InternalApi.RBAC.ListExistingPermissionsRequest.scope:type_name -> InternalApi.RBAC.Scope
	35, // 1: InternalApi.RBAC.ListExistingPermissionsResponse.permissions:type_name -> InternalApi.RBAC.Permission
	30, // 2: InternalApi.RBAC.AssignRoleRequest.role_assignment:type_name -> InternalApi.RBAC.RoleAssignment
	30, // 3: InternalApi.RBAC.RetractRoleRequest.role_assignment:type_name -> InternalApi.RBAC.RoleAssignment
	30, // 4: InternalApi.RBAC.SubjectsHaveRolesRequest.role_assignments:type_name -> InternalApi.RBAC.RoleAssignment
	36, // 5: InternalApi.RBAC.SubjectsHaveRolesResponse.has_roles:type_name -> InternalApi.RBAC.SubjectsHaveRolesResponse.HasRole
	1,  // 6: InternalApi.RBAC.ListRolesRequest.scope:type_name -> InternalApi.RBAC.Scope
	34, // 7: InternalApi.RBAC.ListRolesResponse.roles:type_name -> InternalApi.RBAC.Role
	34, // 8: InternalApi.RBAC.DescribeRoleResponse.role:type_name -> InternalApi.RBAC.Role
	34, // 9: InternalApi.RBAC.ModifyRoleRequest.role:type_name -> InternalApi.RBAC.Role
	34, // 10: InternalApi.RBAC.ModifyRoleResponse.role:type_name -> InternalApi.RBAC.Role
	37, // 11: InternalApi.RBAC.ListMembersRequest.page:type_name -> InternalApi.RBAC.ListMembersRequest.Page
	0,  // 12: InternalApi.RBAC.ListMembersRequest.member_type:type_name -> InternalApi.RBAC.SubjectType
	38, // 13: InternalApi.RBAC.ListMembersResponse.members:type_name -> InternalApi.RBAC.ListMembersResponse.Member
	34, // 14: InternalApi.RBAC.SubjectRoleBinding.role:type_name -> InternalApi.RBAC.Role
	2,  // 15: InternalApi.RBAC.SubjectRoleBinding.source:type_name -> InternalApi.RBAC.RoleBindingSource
	39, // 16: InternalApi.RBAC.SubjectRoleBinding.role_assigned_at:type_name -> google.protobuf.Timestamp
	31, // 17: InternalApi.RBAC.RoleAssignment.subject:type_name -> InternalApi.RBAC.Subject
	0,  // 18: InternalApi.RBAC.Subject.subject_type:type_name -> InternalApi.RBAC.SubjectType
	1,  // 19: InternalApi.RBAC.Role.scope:type_name -> InternalApi.RBAC.Scope
	35, // 20: InternalApi.RBAC.Role.rbac_permissions:type_name -> InternalApi.RBAC.Permission
	34, // 21: InternalApi.RBAC.Role.inherited_role:type_name -> InternalApi.RBAC.Role
	34, // 22: InternalApi.RBAC.Role.maps_to:type_name -> InternalApi.RBAC.Role
	1,  // 23: InternalApi.RBAC.Permission.scope:type_name -> InternalApi.RBAC.Scope
	30, // 24: InternalApi.RBAC.SubjectsHaveRolesResponse.HasRole.role_assignment:type_name -> InternalApi.RBAC.RoleAssignment
	31, // 25: InternalApi.RBAC.ListMembersResponse.Member.subject:type_name -> InternalApi.RBAC.Subject
	25, // 26: InternalApi.RBAC.ListMembersResponse.Member.subject_role_bindings:type_name -> InternalApi.RBAC.SubjectRoleBinding
	3,  // 27: InternalApi.RBAC.RBAC.ListUserPermissions:input_type -> InternalApi.RBAC.ListUserPermissionsRequest
	5,  // 28: InternalApi.RBAC.RBAC.ListExistingPermissions:input_type -> InternalApi.RBAC.ListExistingPermissionsRequest
	7,  // 29: InternalApi.RBAC.RBAC.AssignRole:input_type -> InternalApi.RBAC.AssignRoleRequest
	9,  // 30: InternalApi.RBAC.RBAC.RetractRole:input_type -> InternalApi.RBAC.RetractRoleRequest
	11, // 31: InternalApi.RBAC.RBAC.SubjectsHaveRoles:input_type -> InternalApi.RBAC.SubjectsHaveRolesRequest
	13, // 32: InternalApi.RBAC.RBAC.ListRoles:input_type -> InternalApi.RBAC.ListRolesRequest
	15, // 33: InternalApi.RBAC.RBAC.DescribeRole:input_type -> InternalApi.RBAC.DescribeRoleRequest
	17, // 34: InternalApi.RBAC.RBAC.ModifyRole:input_type -> InternalApi.RBAC.ModifyRoleRequest
	19, // 35: InternalApi.RBAC.RBAC.DestroyRole:input_type -> InternalApi.RBAC.DestroyRoleRequest
	21, // 36: InternalApi.RBAC.RBAC.ListMembers:input_type -> InternalApi.RBAC.ListMembersRequest
	23, // 37: InternalApi.RBAC.RBAC.CountMembers:input_type -> InternalApi.RBAC.CountMembersRequest
	26, // 38: InternalApi.RBAC.RBAC.ListAccessibleOrgs:input_type -> InternalApi.RBAC.ListAccessibleOrgsRequest
	28, // 39: InternalApi.RBAC.RBAC.ListAccessibleProjects:input_type -> InternalApi.RBAC.ListAccessibleProjectsRequest
	32, // 40: InternalApi.RBAC.RBAC.RefreshCollaborators:input_type -> InternalApi.RBAC.RefreshCollaboratorsRequest
	4,  // 41: InternalApi.RBAC.RBAC.ListUserPermissions:output_type -> InternalApi.RBAC.ListUserPermissionsResponse
	6,  // 42: InternalApi.RBAC.RBAC.ListExistingPermissions:output_type -> InternalApi.RBAC.ListExistingPermissionsResponse
	8,  // 43: InternalApi.RBAC.RBAC.AssignRole:output_type -> InternalApi.RBAC.AssignRoleResponse
	10, // 44: InternalApi.RBAC.RBAC.RetractRole:output_type -> InternalApi.RBAC.RetractRoleResponse
	12, // 45: InternalApi.RBAC.RBAC.SubjectsHaveRoles:output_type -> InternalApi.RBAC.SubjectsHaveRolesResponse
	14, // 46: InternalApi.RBAC.RBAC.ListRoles:output_type -> InternalApi.RBAC.ListRolesResponse
	16, // 47: InternalApi.RBAC.RBAC.DescribeRole:output_type -> InternalApi.RBAC.DescribeRoleResponse
	18, // 48: InternalApi.RBAC.RBAC.ModifyRole:output_type -> InternalApi.RBAC.ModifyRoleResponse
	20, // 49: InternalApi.RBAC.RBAC.DestroyRole:output_type -> InternalApi.RBAC.DestroyRoleResponse
	22, // 50: InternalApi.RBAC.RBAC.ListMembers:output_type -> InternalApi.RBAC.ListMembersResponse
	24, // 51: InternalApi.RBAC.RBAC.CountMembers:output_type -> InternalApi.RBAC.CountMembersResponse
	27, // 52: InternalApi.RBAC.RBAC.ListAccessibleOrgs:output_type -> InternalApi.RBAC.ListAccessibleOrgsResponse
	29, // 53: InternalApi.RBAC.RBAC.ListAccessibleProjects:output_type -> InternalApi.RBAC.ListAccessibleProjectsResponse
	33, // 54: InternalApi.RBAC.RBAC.RefreshCollaborators:output_type -> InternalApi.RBAC.RefreshCollaboratorsResponse
	41, // [41:55] is the sub-list for method output_type
	27, // [27:41] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_rbac_proto_init() }
func file_rbac_proto_init() {
	if File_rbac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_proto_depIdxs,
		EnumInfos:         file_rbac_proto_enumTypes,
		MessageInfos:      file_rbac_proto_msgTypes,
	}.Build()
	File_rbac_proto = out.File
	file_rbac_proto_rawDesc = nil
	file_rbac_proto_goTypes = nil
	file_rbac_proto_depIdxs = nil
}
