// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.4
// source: loghub.proto

package loghub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Loghub_GetLogEvents_FullMethodName = "/InternalApi.Loghub.Loghub/GetLogEvents"
)

// LoghubClient is the client API for Loghub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoghubClient interface {
	GetLogEvents(ctx context.Context, in *GetLogEventsRequest, opts ...grpc.CallOption) (*GetLogEventsResponse, error)
}

type loghubClient struct {
	cc grpc.ClientConnInterface
}

func NewLoghubClient(cc grpc.ClientConnInterface) LoghubClient {
	return &loghubClient{cc}
}

func (c *loghubClient) GetLogEvents(ctx context.Context, in *GetLogEventsRequest, opts ...grpc.CallOption) (*GetLogEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogEventsResponse)
	err := c.cc.Invoke(ctx, Loghub_GetLogEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoghubServer is the server API for Loghub service.
// All implementations should embed UnimplementedLoghubServer
// for forward compatibility
type LoghubServer interface {
	GetLogEvents(context.Context, *GetLogEventsRequest) (*GetLogEventsResponse, error)
}

// UnimplementedLoghubServer should be embedded to have forward compatible implementations.
type UnimplementedLoghubServer struct {
}

func (UnimplementedLoghubServer) GetLogEvents(context.Context, *GetLogEventsRequest) (*GetLogEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEvents not implemented")
}

// UnsafeLoghubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoghubServer will
// result in compilation errors.
type UnsafeLoghubServer interface {
	mustEmbedUnimplementedLoghubServer()
}

func RegisterLoghubServer(s grpc.ServiceRegistrar, srv LoghubServer) {
	s.RegisterService(&Loghub_ServiceDesc, srv)
}

func _Loghub_GetLogEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoghubServer).GetLogEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loghub_GetLogEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoghubServer).GetLogEvents(ctx, req.(*GetLogEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loghub_ServiceDesc is the grpc.ServiceDesc for Loghub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loghub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Loghub.Loghub",
	HandlerType: (*LoghubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogEvents",
			Handler:    _Loghub_GetLogEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loghub.proto",
}
