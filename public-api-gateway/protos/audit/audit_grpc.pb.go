// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.3.0
// source: audit.proto

package audit

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuditService_List_FullMethodName           = "/InternalApi.Audit.AuditService/List"
	AuditService_PaginatedList_FullMethodName  = "/InternalApi.Audit.AuditService/PaginatedList"
	AuditService_TestStream_FullMethodName     = "/InternalApi.Audit.AuditService/TestStream"
	AuditService_CreateStream_FullMethodName   = "/InternalApi.Audit.AuditService/CreateStream"
	AuditService_DescribeStream_FullMethodName = "/InternalApi.Audit.AuditService/DescribeStream"
	AuditService_UpdateStream_FullMethodName   = "/InternalApi.Audit.AuditService/UpdateStream"
	AuditService_DestroyStream_FullMethodName  = "/InternalApi.Audit.AuditService/DestroyStream"
	AuditService_SetStreamState_FullMethodName = "/InternalApi.Audit.AuditService/SetStreamState"
	AuditService_ListStreamLogs_FullMethodName = "/InternalApi.Audit.AuditService/ListStreamLogs"
)

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	PaginatedList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*PaginatedListResponse, error)
	// CRUD for config of Audit log exporting
	TestStream(ctx context.Context, in *TestStreamRequest, opts ...grpc.CallOption) (*TestStreamResponse, error)
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	DescribeStream(ctx context.Context, in *DescribeStreamRequest, opts ...grpc.CallOption) (*DescribeStreamResponse, error)
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamResponse, error)
	DestroyStream(ctx context.Context, in *DestroyStreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// PAUSE/RESUME for any type of Audit log exporting
	SetStreamState(ctx context.Context, in *SetStreamStateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListStreamLogs(ctx context.Context, in *ListStreamLogsRequest, opts ...grpc.CallOption) (*ListStreamLogsResponse, error)
}

type auditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceClient(cc grpc.ClientConnInterface) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AuditService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) PaginatedList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*PaginatedListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginatedListResponse)
	err := c.cc.Invoke(ctx, AuditService_PaginatedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) TestStream(ctx context.Context, in *TestStreamRequest, opts ...grpc.CallOption) (*TestStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestStreamResponse)
	err := c.cc.Invoke(ctx, AuditService_TestStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, AuditService_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DescribeStream(ctx context.Context, in *DescribeStreamRequest, opts ...grpc.CallOption) (*DescribeStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeStreamResponse)
	err := c.cc.Invoke(ctx, AuditService_DescribeStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamResponse)
	err := c.cc.Invoke(ctx, AuditService_UpdateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) DestroyStream(ctx context.Context, in *DestroyStreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AuditService_DestroyStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) SetStreamState(ctx context.Context, in *SetStreamStateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AuditService_SetStreamState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) ListStreamLogs(ctx context.Context, in *ListStreamLogsRequest, opts ...grpc.CallOption) (*ListStreamLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamLogsResponse)
	err := c.cc.Invoke(ctx, AuditService_ListStreamLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
// All implementations should embed UnimplementedAuditServiceServer
// for forward compatibility.
type AuditServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	PaginatedList(context.Context, *PaginatedListRequest) (*PaginatedListResponse, error)
	// CRUD for config of Audit log exporting
	TestStream(context.Context, *TestStreamRequest) (*TestStreamResponse, error)
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	DescribeStream(context.Context, *DescribeStreamRequest) (*DescribeStreamResponse, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamResponse, error)
	DestroyStream(context.Context, *DestroyStreamRequest) (*empty.Empty, error)
	// PAUSE/RESUME for any type of Audit log exporting
	SetStreamState(context.Context, *SetStreamStateRequest) (*empty.Empty, error)
	ListStreamLogs(context.Context, *ListStreamLogsRequest) (*ListStreamLogsResponse, error)
}

// UnimplementedAuditServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuditServiceServer struct{}

func (UnimplementedAuditServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAuditServiceServer) PaginatedList(context.Context, *PaginatedListRequest) (*PaginatedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginatedList not implemented")
}
func (UnimplementedAuditServiceServer) TestStream(context.Context, *TestStreamRequest) (*TestStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedAuditServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedAuditServiceServer) DescribeStream(context.Context, *DescribeStreamRequest) (*DescribeStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStream not implemented")
}
func (UnimplementedAuditServiceServer) UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedAuditServiceServer) DestroyStream(context.Context, *DestroyStreamRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyStream not implemented")
}
func (UnimplementedAuditServiceServer) SetStreamState(context.Context, *SetStreamStateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamState not implemented")
}
func (UnimplementedAuditServiceServer) ListStreamLogs(context.Context, *ListStreamLogsRequest) (*ListStreamLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamLogs not implemented")
}
func (UnimplementedAuditServiceServer) testEmbeddedByValue() {}

// UnsafeAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServiceServer will
// result in compilation errors.
type UnsafeAuditServiceServer interface {
	mustEmbedUnimplementedAuditServiceServer()
}

func RegisterAuditServiceServer(s grpc.ServiceRegistrar, srv AuditServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuditService_ServiceDesc, srv)
}

func _AuditService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_PaginatedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).PaginatedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_PaginatedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).PaginatedList(ctx, req.(*PaginatedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_TestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).TestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_TestStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).TestStream(ctx, req.(*TestStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DescribeStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DescribeStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_DescribeStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DescribeStream(ctx, req.(*DescribeStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_UpdateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_DestroyStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DestroyStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_DestroyStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DestroyStream(ctx, req.(*DestroyStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_SetStreamState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).SetStreamState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_SetStreamState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).SetStreamState(ctx, req.(*SetStreamStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_ListStreamLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListStreamLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditService_ListStreamLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListStreamLogs(ctx, req.(*ListStreamLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditService_ServiceDesc is the grpc.ServiceDesc for AuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Audit.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AuditService_List_Handler,
		},
		{
			MethodName: "PaginatedList",
			Handler:    _AuditService_PaginatedList_Handler,
		},
		{
			MethodName: "TestStream",
			Handler:    _AuditService_TestStream_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _AuditService_CreateStream_Handler,
		},
		{
			MethodName: "DescribeStream",
			Handler:    _AuditService_DescribeStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _AuditService_UpdateStream_Handler,
		},
		{
			MethodName: "DestroyStream",
			Handler:    _AuditService_DestroyStream_Handler,
		},
		{
			MethodName: "SetStreamState",
			Handler:    _AuditService_SetStreamState_Handler,
		},
		{
			MethodName: "ListStreamLogs",
			Handler:    _AuditService_ListStreamLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audit.proto",
}
