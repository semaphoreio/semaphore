// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: velocity.proto

package velocity

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metric enum is used to specify the options available for custom dashboard items
type Metric int32

const (
	Metric_METRIC_UNSPECIFIED Metric = 0
	Metric_METRIC_PERFORMANCE Metric = 1
	Metric_METRIC_FREQUENCY   Metric = 2
	Metric_METRIC_RELIABILITY Metric = 3
)

// Enum value maps for Metric.
var (
	Metric_name = map[int32]string{
		0: "METRIC_UNSPECIFIED",
		1: "METRIC_PERFORMANCE",
		2: "METRIC_FREQUENCY",
		3: "METRIC_RELIABILITY",
	}
	Metric_value = map[string]int32{
		"METRIC_UNSPECIFIED": 0,
		"METRIC_PERFORMANCE": 1,
		"METRIC_FREQUENCY":   2,
		"METRIC_RELIABILITY": 3,
	}
)

func (x Metric) Enum() *Metric {
	p := new(Metric)
	*p = x
	return p
}

func (x Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_velocity_proto_enumTypes[0].Descriptor()
}

func (Metric) Type() protoreflect.EnumType {
	return &file_velocity_proto_enumTypes[0]
}

func (x Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metric.Descriptor instead.
func (Metric) EnumDescriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{0}
}

// MetricAggregation enum is used to specify the way metrics should be aggregated
//
// RANGE - Aggregate the metrics over a range of time.
// DAILY - Aggregate the metrics over a daily time period.
type MetricAggregation int32

const (
	MetricAggregation_RANGE MetricAggregation = 0
	MetricAggregation_DAILY MetricAggregation = 1
)

// Enum value maps for MetricAggregation.
var (
	MetricAggregation_name = map[int32]string{
		0: "RANGE",
		1: "DAILY",
	}
	MetricAggregation_value = map[string]int32{
		"RANGE": 0,
		"DAILY": 1,
	}
)

func (x MetricAggregation) Enum() *MetricAggregation {
	p := new(MetricAggregation)
	*p = x
	return p
}

func (x MetricAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_velocity_proto_enumTypes[1].Descriptor()
}

func (MetricAggregation) Type() protoreflect.EnumType {
	return &file_velocity_proto_enumTypes[1]
}

func (x MetricAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricAggregation.Descriptor instead.
func (MetricAggregation) EnumDescriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{1}
}

// InitializeFlakyTestsFiltersRequest call request
type InitializeFlakyTestsFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *InitializeFlakyTestsFiltersRequest) Reset() {
	*x = InitializeFlakyTestsFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeFlakyTestsFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeFlakyTestsFiltersRequest) ProtoMessage() {}

func (x *InitializeFlakyTestsFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeFlakyTestsFiltersRequest.ProtoReflect.Descriptor instead.
func (*InitializeFlakyTestsFiltersRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{0}
}

func (x *InitializeFlakyTestsFiltersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InitializeFlakyTestsFiltersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// InitializeFlakyTestsFiltersResponse call response
type InitializeFlakyTestsFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*FlakyTestsFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *InitializeFlakyTestsFiltersResponse) Reset() {
	*x = InitializeFlakyTestsFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeFlakyTestsFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeFlakyTestsFiltersResponse) ProtoMessage() {}

func (x *InitializeFlakyTestsFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeFlakyTestsFiltersResponse.ProtoReflect.Descriptor instead.
func (*InitializeFlakyTestsFiltersResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeFlakyTestsFiltersResponse) GetFilters() []*FlakyTestsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// ListFlakyTestsFiltersRequest call request
type ListFlakyTestsFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListFlakyTestsFiltersRequest) Reset() {
	*x = ListFlakyTestsFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyTestsFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyTestsFiltersRequest) ProtoMessage() {}

func (x *ListFlakyTestsFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyTestsFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListFlakyTestsFiltersRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{2}
}

func (x *ListFlakyTestsFiltersRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListFlakyTestsFiltersRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type ListFlakyTestsFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*FlakyTestsFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListFlakyTestsFiltersResponse) Reset() {
	*x = ListFlakyTestsFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlakyTestsFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlakyTestsFiltersResponse) ProtoMessage() {}

func (x *ListFlakyTestsFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlakyTestsFiltersResponse.ProtoReflect.Descriptor instead.
func (*ListFlakyTestsFiltersResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{3}
}

func (x *ListFlakyTestsFiltersResponse) GetFilters() []*FlakyTestsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// CreateFlakyTestsFilterRequest call request
type CreateFlakyTestsFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value          string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CreateFlakyTestsFilterRequest) Reset() {
	*x = CreateFlakyTestsFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlakyTestsFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlakyTestsFilterRequest) ProtoMessage() {}

func (x *CreateFlakyTestsFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlakyTestsFilterRequest.ProtoReflect.Descriptor instead.
func (*CreateFlakyTestsFilterRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFlakyTestsFilterRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateFlakyTestsFilterRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateFlakyTestsFilterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlakyTestsFilterRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CreateFlakyTestsFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FlakyTestsFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CreateFlakyTestsFilterResponse) Reset() {
	*x = CreateFlakyTestsFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlakyTestsFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlakyTestsFilterResponse) ProtoMessage() {}

func (x *CreateFlakyTestsFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlakyTestsFilterResponse.ProtoReflect.Descriptor instead.
func (*CreateFlakyTestsFilterResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFlakyTestsFilterResponse) GetFilter() *FlakyTestsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// FlakyTestsFilter represents a flaky tests filter
//
// - id                  = [required] UUID of the flaky tests filter
// - project_id          = [required] UUID of the project
// - organization_id     = [required] UUID of the organization
// - inserted_at         = [required] Timestamp of when the flaky tests filter was created
// - updated_at          = [required] Timestamp of when the flaky tests filter was last updated
// - name                = [required] Name of the flaky tests filter
// - value               = [required] Value of the flaky tests filter
type FlakyTestsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string               `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InsertedAt     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=inserted_at,json=insertedAt,proto3" json:"inserted_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name           string               `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Value          string               `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlakyTestsFilter) Reset() {
	*x = FlakyTestsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyTestsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyTestsFilter) ProtoMessage() {}

func (x *FlakyTestsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyTestsFilter.ProtoReflect.Descriptor instead.
func (*FlakyTestsFilter) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{6}
}

func (x *FlakyTestsFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlakyTestsFilter) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FlakyTestsFilter) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *FlakyTestsFilter) GetInsertedAt() *timestamp.Timestamp {
	if x != nil {
		return x.InsertedAt
	}
	return nil
}

func (x *FlakyTestsFilter) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FlakyTestsFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlakyTestsFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// RemoveFlakyTestsFilterRequest call request
type RemoveFlakyTestsFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveFlakyTestsFilterRequest) Reset() {
	*x = RemoveFlakyTestsFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFlakyTestsFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFlakyTestsFilterRequest) ProtoMessage() {}

func (x *RemoveFlakyTestsFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFlakyTestsFilterRequest.ProtoReflect.Descriptor instead.
func (*RemoveFlakyTestsFilterRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveFlakyTestsFilterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveFlakyTestsFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFlakyTestsFilterResponse) Reset() {
	*x = RemoveFlakyTestsFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFlakyTestsFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFlakyTestsFilterResponse) ProtoMessage() {}

func (x *RemoveFlakyTestsFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFlakyTestsFilterResponse.ProtoReflect.Descriptor instead.
func (*RemoveFlakyTestsFilterResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{8}
}

// UpdateFlakyTestsFilterRequest call request
type UpdateFlakyTestsFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateFlakyTestsFilterRequest) Reset() {
	*x = UpdateFlakyTestsFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlakyTestsFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlakyTestsFilterRequest) ProtoMessage() {}

func (x *UpdateFlakyTestsFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlakyTestsFilterRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlakyTestsFilterRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFlakyTestsFilterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlakyTestsFilterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFlakyTestsFilterRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateFlakyTestsFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FlakyTestsFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *UpdateFlakyTestsFilterResponse) Reset() {
	*x = UpdateFlakyTestsFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlakyTestsFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlakyTestsFilterResponse) ProtoMessage() {}

func (x *UpdateFlakyTestsFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlakyTestsFilterResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlakyTestsFilterResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFlakyTestsFilterResponse) GetFilter() *FlakyTestsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

//	OrganizationHealthRequest call request
//
// - project_ids     = [required] list of project ids.
// - org_id          = [required] org id of user requesting health
// - from_date       = [required] start date for which we calculate metrics
// - to_date         = [required] end date for which we calculate metrics
type OrganizationHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIds []string             `protobuf:"bytes,1,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	OrgId      string               `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	FromDate   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *OrganizationHealthRequest) Reset() {
	*x = OrganizationHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationHealthRequest) ProtoMessage() {}

func (x *OrganizationHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationHealthRequest.ProtoReflect.Descriptor instead.
func (*OrganizationHealthRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{11}
}

func (x *OrganizationHealthRequest) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *OrganizationHealthRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OrganizationHealthRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *OrganizationHealthRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

// OrganizationHealthResponse
//
// - health_metrics      = project health metrics data for the requested organization
type OrganizationHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthMetrics []*ProjectHealthMetrics `protobuf:"bytes,1,rep,name=health_metrics,json=healthMetrics,proto3" json:"health_metrics,omitempty"`
}

func (x *OrganizationHealthResponse) Reset() {
	*x = OrganizationHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationHealthResponse) ProtoMessage() {}

func (x *OrganizationHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationHealthResponse.ProtoReflect.Descriptor instead.
func (*OrganizationHealthResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{12}
}

func (x *OrganizationHealthResponse) GetHealthMetrics() []*ProjectHealthMetrics {
	if x != nil {
		return x.HealthMetrics
	}
	return nil
}

// ProjectHealthMetrics
//
// - project_id                     = [required] id of the project
// - project_name                   = [required] name of the project
// - mean_time_to_recovery_seconds  = [to be implemented] how long in average it takes to recover from a failed pipeline run
// - last_successful_run_at         = [required] when was the last successful pipeline run
// - default_branch                 = [required] reliability, frequency and performance stats for default branch
// - all_branches                   = [required] reliability, frequency and performance stats for all branches (default inclusive)
// - parallelism                    = [to be implemented] number of parallelism for the project
// - deployments                    = [to be implemented] number of deployments per project
type ProjectHealthMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                 string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName               string               `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	MeanTimeToRecoverySeconds int32                `protobuf:"varint,3,opt,name=mean_time_to_recovery_seconds,json=meanTimeToRecoverySeconds,proto3" json:"mean_time_to_recovery_seconds,omitempty"`
	LastSuccessfulRunAt       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_successful_run_at,json=lastSuccessfulRunAt,proto3" json:"last_successful_run_at,omitempty"`
	DefaultBranch             *Stats               `protobuf:"bytes,5,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	AllBranches               *Stats               `protobuf:"bytes,6,opt,name=all_branches,json=allBranches,proto3" json:"all_branches,omitempty"`
	Parallelism               int32                `protobuf:"varint,7,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	Deployments               int32                `protobuf:"varint,8,opt,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *ProjectHealthMetrics) Reset() {
	*x = ProjectHealthMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectHealthMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectHealthMetrics) ProtoMessage() {}

func (x *ProjectHealthMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectHealthMetrics.ProtoReflect.Descriptor instead.
func (*ProjectHealthMetrics) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{13}
}

func (x *ProjectHealthMetrics) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectHealthMetrics) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectHealthMetrics) GetMeanTimeToRecoverySeconds() int32 {
	if x != nil {
		return x.MeanTimeToRecoverySeconds
	}
	return 0
}

func (x *ProjectHealthMetrics) GetLastSuccessfulRunAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastSuccessfulRunAt
	}
	return nil
}

func (x *ProjectHealthMetrics) GetDefaultBranch() *Stats {
	if x != nil {
		return x.DefaultBranch
	}
	return nil
}

func (x *ProjectHealthMetrics) GetAllBranches() *Stats {
	if x != nil {
		return x.AllBranches
	}
	return nil
}

func (x *ProjectHealthMetrics) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *ProjectHealthMetrics) GetDeployments() int32 {
	if x != nil {
		return x.Deployments
	}
	return 0
}

// - all_count                      = [required] total number of builds
// - passed_count                   = [required] number of passed builds
// - failed_count                   = [required] number of failed builds
// - avg_seconds                    = [required] avg duration of pipeline runs in seconds
// - avg_seconds_successful         = [required] avg duration of pipeline runs in seconds for green runs/successful
// - queue_time_seconds             = [required] how long the jobs are waiting on average
// - queue_time_seconds_successful  = [required] how long the jobs are waiting on average for green runs
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllCount                   int32 `protobuf:"varint,1,opt,name=all_count,json=allCount,proto3" json:"all_count,omitempty"`
	PassedCount                int32 `protobuf:"varint,2,opt,name=passed_count,json=passedCount,proto3" json:"passed_count,omitempty"`
	FailedCount                int32 `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	AvgSeconds                 int32 `protobuf:"varint,4,opt,name=avg_seconds,json=avgSeconds,proto3" json:"avg_seconds,omitempty"`
	AvgSecondsSuccessful       int32 `protobuf:"varint,5,opt,name=avg_seconds_successful,json=avgSecondsSuccessful,proto3" json:"avg_seconds_successful,omitempty"`
	QueueTimeSeconds           int32 `protobuf:"varint,6,opt,name=queue_time_seconds,json=queueTimeSeconds,proto3" json:"queue_time_seconds,omitempty"`
	QueueTimeSecondsSuccessful int32 `protobuf:"varint,7,opt,name=queue_time_seconds_successful,json=queueTimeSecondsSuccessful,proto3" json:"queue_time_seconds_successful,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{14}
}

func (x *Stats) GetAllCount() int32 {
	if x != nil {
		return x.AllCount
	}
	return 0
}

func (x *Stats) GetPassedCount() int32 {
	if x != nil {
		return x.PassedCount
	}
	return 0
}

func (x *Stats) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *Stats) GetAvgSeconds() int32 {
	if x != nil {
		return x.AvgSeconds
	}
	return 0
}

func (x *Stats) GetAvgSecondsSuccessful() int32 {
	if x != nil {
		return x.AvgSecondsSuccessful
	}
	return 0
}

func (x *Stats) GetQueueTimeSeconds() int32 {
	if x != nil {
		return x.QueueTimeSeconds
	}
	return 0
}

func (x *Stats) GetQueueTimeSecondsSuccessful() int32 {
	if x != nil {
		return x.QueueTimeSecondsSuccessful
	}
	return 0
}

// DescribeDashboardItemRequest call request
//
// - id      = [required] UUID of the dashboard item
type DescribeDashboardItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DescribeDashboardItemRequest) Reset() {
	*x = DescribeDashboardItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDashboardItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDashboardItemRequest) ProtoMessage() {}

func (x *DescribeDashboardItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDashboardItemRequest.ProtoReflect.Descriptor instead.
func (*DescribeDashboardItemRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeDashboardItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DescribeDashboardItemResponse call response
//
// - item    = [required] Dashboard item to be returned
type DescribeDashboardItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *DashboardItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *DescribeDashboardItemResponse) Reset() {
	*x = DescribeDashboardItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDashboardItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDashboardItemResponse) ProtoMessage() {}

func (x *DescribeDashboardItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDashboardItemResponse.ProtoReflect.Descriptor instead.
func (*DescribeDashboardItemResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{16}
}

func (x *DescribeDashboardItemResponse) GetItem() *DashboardItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// DeleteDashboardItemRequest call request
//
// - id      = [required] UUID of the dashboard item
type DeleteDashboardItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDashboardItemRequest) Reset() {
	*x = DeleteDashboardItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDashboardItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDashboardItemRequest) ProtoMessage() {}

func (x *DeleteDashboardItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDashboardItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteDashboardItemRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteDashboardItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteDashboardItemResponse call response
type DeleteDashboardItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDashboardItemResponse) Reset() {
	*x = DeleteDashboardItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDashboardItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDashboardItemResponse) ProtoMessage() {}

func (x *DeleteDashboardItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDashboardItemResponse.ProtoReflect.Descriptor instead.
func (*DeleteDashboardItemResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{18}
}

// DeleteMetricsDashboardRequest call request
//
// - id      = [required] UUID of the dashboard
type DeleteMetricsDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMetricsDashboardRequest) Reset() {
	*x = DeleteMetricsDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricsDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricsDashboardRequest) ProtoMessage() {}

func (x *DeleteMetricsDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricsDashboardRequest.ProtoReflect.Descriptor instead.
func (*DeleteMetricsDashboardRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteMetricsDashboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteMetricsDashboardResponse call response
type DeleteMetricsDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMetricsDashboardResponse) Reset() {
	*x = DeleteMetricsDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricsDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricsDashboardResponse) ProtoMessage() {}

func (x *DeleteMetricsDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricsDashboardResponse.ProtoReflect.Descriptor instead.
func (*DeleteMetricsDashboardResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{20}
}

// ListMetricsDashboardsRequest call request
//
// - project_id          = [required] UUID of the project
type ListMetricsDashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ListMetricsDashboardsRequest) Reset() {
	*x = ListMetricsDashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsDashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsDashboardsRequest) ProtoMessage() {}

func (x *ListMetricsDashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsDashboardsRequest.ProtoReflect.Descriptor instead.
func (*ListMetricsDashboardsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{21}
}

func (x *ListMetricsDashboardsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// ListMetricsDashboardsResponse call response
//
// - dashboards          = [required] List of dashboards
type ListMetricsDashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboards []*MetricsDashboard `protobuf:"bytes,1,rep,name=dashboards,proto3" json:"dashboards,omitempty"`
}

func (x *ListMetricsDashboardsResponse) Reset() {
	*x = ListMetricsDashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricsDashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsDashboardsResponse) ProtoMessage() {}

func (x *ListMetricsDashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsDashboardsResponse.ProtoReflect.Descriptor instead.
func (*ListMetricsDashboardsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{22}
}

func (x *ListMetricsDashboardsResponse) GetDashboards() []*MetricsDashboard {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

// DescribeMetricsDashboardRequest call request
//
// - id        = [required] UUID of the dashboard
type DescribeMetricsDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DescribeMetricsDashboardRequest) Reset() {
	*x = DescribeMetricsDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMetricsDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMetricsDashboardRequest) ProtoMessage() {}

func (x *DescribeMetricsDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMetricsDashboardRequest.ProtoReflect.Descriptor instead.
func (*DescribeMetricsDashboardRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{23}
}

func (x *DescribeMetricsDashboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DescribeMetricsDashboardResponse call response
//
// - dashboard                   = [required] Dashboard
type DescribeMetricsDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboard *MetricsDashboard `protobuf:"bytes,1,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *DescribeMetricsDashboardResponse) Reset() {
	*x = DescribeMetricsDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMetricsDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMetricsDashboardResponse) ProtoMessage() {}

func (x *DescribeMetricsDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMetricsDashboardResponse.ProtoReflect.Descriptor instead.
func (*DescribeMetricsDashboardResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{24}
}

func (x *DescribeMetricsDashboardResponse) GetDashboard() *MetricsDashboard {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

// MetricsDashboard represents a dashboard
//
// - id                  = [required] UUID of the dashboard
// - name                = [required] Name of the dashboard
// - project_id          = [required] UUID of the project
// - organization_id     = [required] UUID of the organization
// - inserted_at         = [required] Timestamp of when the dashboard was created
// - updated_at          = [required] Timestamp of when the dashboard was last updated
// - items               = [required] List of dashboard items
type MetricsDashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId      string               `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string               `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	InsertedAt     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=inserted_at,json=insertedAt,proto3" json:"inserted_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Items          []*DashboardItem     `protobuf:"bytes,7,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MetricsDashboard) Reset() {
	*x = MetricsDashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsDashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsDashboard) ProtoMessage() {}

func (x *MetricsDashboard) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsDashboard.ProtoReflect.Descriptor instead.
func (*MetricsDashboard) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{25}
}

func (x *MetricsDashboard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsDashboard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsDashboard) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MetricsDashboard) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *MetricsDashboard) GetInsertedAt() *timestamp.Timestamp {
	if x != nil {
		return x.InsertedAt
	}
	return nil
}

func (x *MetricsDashboard) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MetricsDashboard) GetItems() []*DashboardItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// DashboardItem represents a dashboard item
//
// - id                      = [required] UUID of the dashboard item
// - name                    = [required] Name of the dashboard item
// - metrics_dashboard_id    = [required] UUID of the dashboard
// - branch_name             = [required] Name of the branch
// - pipeline_file_name      = [required] Name of the pipeline file
// - inserted_at             = [required] Timestamp of when the dashboard item was created
// - updated_at              = [required] Timestamp of when the dashboard item was last updated
// - settings                = [required] Settings of the dashboard item
// - notes                   = [required] Notes of the dashboard item
type DashboardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MetricsDashboardId string                 `protobuf:"bytes,3,opt,name=metrics_dashboard_id,json=metricsDashboardId,proto3" json:"metrics_dashboard_id,omitempty"`
	BranchName         string                 `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	PipelineFileName   string                 `protobuf:"bytes,5,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	InsertedAt         *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=inserted_at,json=insertedAt,proto3" json:"inserted_at,omitempty"`
	UpdatedAt          *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Settings           *DashboardItemSettings `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	Notes              string                 `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *DashboardItem) Reset() {
	*x = DashboardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardItem) ProtoMessage() {}

func (x *DashboardItem) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardItem.ProtoReflect.Descriptor instead.
func (*DashboardItem) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{26}
}

func (x *DashboardItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DashboardItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DashboardItem) GetMetricsDashboardId() string {
	if x != nil {
		return x.MetricsDashboardId
	}
	return ""
}

func (x *DashboardItem) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *DashboardItem) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *DashboardItem) GetInsertedAt() *timestamp.Timestamp {
	if x != nil {
		return x.InsertedAt
	}
	return nil
}

func (x *DashboardItem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DashboardItem) GetSettings() *DashboardItemSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DashboardItem) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// DashboardItemSettings represents the settings of a dashboard item
type DashboardItemSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=InternalApi.Velocity.Metric" json:"metric,omitempty"`
	Goal   string `protobuf:"bytes,2,opt,name=goal,proto3" json:"goal,omitempty"`
}

func (x *DashboardItemSettings) Reset() {
	*x = DashboardItemSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardItemSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardItemSettings) ProtoMessage() {}

func (x *DashboardItemSettings) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardItemSettings.ProtoReflect.Descriptor instead.
func (*DashboardItemSettings) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{27}
}

func (x *DashboardItemSettings) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_METRIC_UNSPECIFIED
}

func (x *DashboardItemSettings) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

// CreateDashboardItemRequest call request
//
// - name                = [required] Name of the dashboard
// - project_id          = [required] UUID of the project
// - organization_id     = [required] UUID of the organization
type CreateMetricsDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *CreateMetricsDashboardRequest) Reset() {
	*x = CreateMetricsDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMetricsDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMetricsDashboardRequest) ProtoMessage() {}

func (x *CreateMetricsDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMetricsDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreateMetricsDashboardRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{28}
}

func (x *CreateMetricsDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMetricsDashboardRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateMetricsDashboardRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// CreateDashboardItemResponse call response
//
// - dashboard          = [required] Dashboard
type CreateMetricsDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboard *MetricsDashboard `protobuf:"bytes,1,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *CreateMetricsDashboardResponse) Reset() {
	*x = CreateMetricsDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMetricsDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMetricsDashboardResponse) ProtoMessage() {}

func (x *CreateMetricsDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMetricsDashboardResponse.ProtoReflect.Descriptor instead.
func (*CreateMetricsDashboardResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{29}
}

func (x *CreateMetricsDashboardResponse) GetDashboard() *MetricsDashboard {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

// UpdateDashboardItemRequest call request
//
// - id  = [required] UUID of the dashboard
// - name               = [required] Name of the dashboard item
type UpdateMetricsDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateMetricsDashboardRequest) Reset() {
	*x = UpdateMetricsDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetricsDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsDashboardRequest) ProtoMessage() {}

func (x *UpdateMetricsDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsDashboardRequest.ProtoReflect.Descriptor instead.
func (*UpdateMetricsDashboardRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateMetricsDashboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMetricsDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// UpdateDashboardItemResponse call response
type UpdateMetricsDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMetricsDashboardResponse) Reset() {
	*x = UpdateMetricsDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetricsDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsDashboardResponse) ProtoMessage() {}

func (x *UpdateMetricsDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsDashboardResponse.ProtoReflect.Descriptor instead.
func (*UpdateMetricsDashboardResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{31}
}

// CreateDashboardItemRequest represents a dashboard item
//
// - name                    = [required] Name of the dashboard item
// - metrics_dashboard_id    = [required] UUID of the dashboard
// - branch_name             = [required] Name of the branch
// - pipeline_file_name      = [required] Name of the pipeline file
// - inserted_at             = [required] Timestamp of when the dashboard item was created
// - updated_at              = [required] Timestamp of when the dashboard item was last updated
// - settings                = [required] Settings of the dashboard item
// - notes                   = [required] Notes of the dashboard item
type CreateDashboardItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricsDashboardId string                 `protobuf:"bytes,2,opt,name=metrics_dashboard_id,json=metricsDashboardId,proto3" json:"metrics_dashboard_id,omitempty"`
	BranchName         string                 `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	PipelineFileName   string                 `protobuf:"bytes,4,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	Settings           *DashboardItemSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	Notes              string                 `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *CreateDashboardItemRequest) Reset() {
	*x = CreateDashboardItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardItemRequest) ProtoMessage() {}

func (x *CreateDashboardItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardItemRequest.ProtoReflect.Descriptor instead.
func (*CreateDashboardItemRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{32}
}

func (x *CreateDashboardItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDashboardItemRequest) GetMetricsDashboardId() string {
	if x != nil {
		return x.MetricsDashboardId
	}
	return ""
}

func (x *CreateDashboardItemRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateDashboardItemRequest) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *CreateDashboardItemRequest) GetSettings() *DashboardItemSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateDashboardItemRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// CreateDashboardItemResponse call response
//
// - item          = [required] Dashboard item
type CreateDashboardItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *DashboardItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateDashboardItemResponse) Reset() {
	*x = CreateDashboardItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardItemResponse) ProtoMessage() {}

func (x *CreateDashboardItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardItemResponse.ProtoReflect.Descriptor instead.
func (*CreateDashboardItemResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{33}
}

func (x *CreateDashboardItemResponse) GetItem() *DashboardItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// UpdateDashboardItemRequest call request
//
// - id                      = [required] UUID of the dashboard item
// - name                    = [required] Name of the dashboard item
type UpdateDashboardItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateDashboardItemRequest) Reset() {
	*x = UpdateDashboardItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardItemRequest) ProtoMessage() {}

func (x *UpdateDashboardItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardItemRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateDashboardItemRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDashboardItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// UpdateDashboardItemResponse call response
type UpdateDashboardItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDashboardItemResponse) Reset() {
	*x = UpdateDashboardItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDashboardItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardItemResponse) ProtoMessage() {}

func (x *UpdateDashboardItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardItemResponse.ProtoReflect.Descriptor instead.
func (*UpdateDashboardItemResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{35}
}

// ChangeDashboardItemNotesRequest call request
//
// - id                      = [required] UUID of the dashboard item
// - notes                   = [required] Updated notes for dashboard item
type ChangeDashboardItemNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ChangeDashboardItemNotesRequest) Reset() {
	*x = ChangeDashboardItemNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDashboardItemNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDashboardItemNotesRequest) ProtoMessage() {}

func (x *ChangeDashboardItemNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDashboardItemNotesRequest.ProtoReflect.Descriptor instead.
func (*ChangeDashboardItemNotesRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{36}
}

func (x *ChangeDashboardItemNotesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChangeDashboardItemNotesRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// ChangeDashboardItemNotesResponse call response
type ChangeDashboardItemNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeDashboardItemNotesResponse) Reset() {
	*x = ChangeDashboardItemNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDashboardItemNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDashboardItemNotesResponse) ProtoMessage() {}

func (x *ChangeDashboardItemNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDashboardItemNotesResponse.ProtoReflect.Descriptor instead.
func (*ChangeDashboardItemNotesResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{37}
}

// ListPipelinePerformanceMetrics call request
//
// - project_id          = [required] UUID of the project
// - pipeline_file_name  = [required] name of the pipeline file
// - branch_name         = [optional] name of the branch - empty value means all branches
// - from_date           = [optional] start date(inclusive) for the metrics (default: now - 30 days)
// - to_date             = [optional] end date(inclusive) for the metrics (default: now)
type ListPipelinePerformanceMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineFileName string               `protobuf:"bytes,2,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	BranchName       string               `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Aggregate        MetricAggregation    `protobuf:"varint,4,opt,name=aggregate,proto3,enum=InternalApi.Velocity.MetricAggregation" json:"aggregate,omitempty"`
	FromDate         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *ListPipelinePerformanceMetricsRequest) Reset() {
	*x = ListPipelinePerformanceMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinePerformanceMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinePerformanceMetricsRequest) ProtoMessage() {}

func (x *ListPipelinePerformanceMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinePerformanceMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinePerformanceMetricsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{38}
}

func (x *ListPipelinePerformanceMetricsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListPipelinePerformanceMetricsRequest) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *ListPipelinePerformanceMetricsRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListPipelinePerformanceMetricsRequest) GetAggregate() MetricAggregation {
	if x != nil {
		return x.Aggregate
	}
	return MetricAggregation_RANGE
}

func (x *ListPipelinePerformanceMetricsRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ListPipelinePerformanceMetricsRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

// ListPipelinePerformanceMetricsResponse call response.
//
// - all_metrics         = [required] ListPipeline of all pipeline metrics
// - passed_metrics      = [required] ListPipeline of only passed pipeline metrics
// - failed_metrics      = [required] ListPipeline of only failed pipeline metrics
type ListPipelinePerformanceMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllMetrics    []*PerformanceMetric `protobuf:"bytes,1,rep,name=all_metrics,json=allMetrics,proto3" json:"all_metrics,omitempty"`
	PassedMetrics []*PerformanceMetric `protobuf:"bytes,2,rep,name=passed_metrics,json=passedMetrics,proto3" json:"passed_metrics,omitempty"`
	FailedMetrics []*PerformanceMetric `protobuf:"bytes,3,rep,name=failed_metrics,json=failedMetrics,proto3" json:"failed_metrics,omitempty"`
}

func (x *ListPipelinePerformanceMetricsResponse) Reset() {
	*x = ListPipelinePerformanceMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinePerformanceMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinePerformanceMetricsResponse) ProtoMessage() {}

func (x *ListPipelinePerformanceMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinePerformanceMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinePerformanceMetricsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{39}
}

func (x *ListPipelinePerformanceMetricsResponse) GetAllMetrics() []*PerformanceMetric {
	if x != nil {
		return x.AllMetrics
	}
	return nil
}

func (x *ListPipelinePerformanceMetricsResponse) GetPassedMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PassedMetrics
	}
	return nil
}

func (x *ListPipelinePerformanceMetricsResponse) GetFailedMetrics() []*PerformanceMetric {
	if x != nil {
		return x.FailedMetrics
	}
	return nil
}

// PerformanceMetric provides information about the performance metrics for a pipelines for a given time period.
//
// - from_date       = [required] start date for which the metrics are collected
// - to_date         = [required] end date for which the metrics are collected
// - count           = [required] number of metrics collected
// - mean_seconds    = [required] mean duration of the metrics in seconds
// - min_seconds     = [required] minimum duration of the metrics in seconds
// - max_seconds     = [required] maximum duration of the metrics in seconds
// - std_dev_seconds = [required] standard deviation of the metrics in seconds
// - median_seconds  = [required] median duration of the metrics in seconds
// - p95_seconds     = [required] 95th percentile duration of the metrics in seconds
type PerformanceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate      *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Count         int32                `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	MeanSeconds   int32                `protobuf:"varint,4,opt,name=mean_seconds,json=meanSeconds,proto3" json:"mean_seconds,omitempty"`
	MedianSeconds int32                `protobuf:"varint,5,opt,name=median_seconds,json=medianSeconds,proto3" json:"median_seconds,omitempty"`
	MinSeconds    int32                `protobuf:"varint,6,opt,name=min_seconds,json=minSeconds,proto3" json:"min_seconds,omitempty"`
	MaxSeconds    int32                `protobuf:"varint,7,opt,name=max_seconds,json=maxSeconds,proto3" json:"max_seconds,omitempty"`
	StdDevSeconds int32                `protobuf:"varint,8,opt,name=std_dev_seconds,json=stdDevSeconds,proto3" json:"std_dev_seconds,omitempty"`
	P95Seconds    int32                `protobuf:"varint,9,opt,name=p95_seconds,json=p95Seconds,proto3" json:"p95_seconds,omitempty"`
}

func (x *PerformanceMetric) Reset() {
	*x = PerformanceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetric) ProtoMessage() {}

func (x *PerformanceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetric.ProtoReflect.Descriptor instead.
func (*PerformanceMetric) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{40}
}

func (x *PerformanceMetric) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *PerformanceMetric) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *PerformanceMetric) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PerformanceMetric) GetMeanSeconds() int32 {
	if x != nil {
		return x.MeanSeconds
	}
	return 0
}

func (x *PerformanceMetric) GetMedianSeconds() int32 {
	if x != nil {
		return x.MedianSeconds
	}
	return 0
}

func (x *PerformanceMetric) GetMinSeconds() int32 {
	if x != nil {
		return x.MinSeconds
	}
	return 0
}

func (x *PerformanceMetric) GetMaxSeconds() int32 {
	if x != nil {
		return x.MaxSeconds
	}
	return 0
}

func (x *PerformanceMetric) GetStdDevSeconds() int32 {
	if x != nil {
		return x.StdDevSeconds
	}
	return 0
}

func (x *PerformanceMetric) GetP95Seconds() int32 {
	if x != nil {
		return x.P95Seconds
	}
	return 0
}

// ListPipelineReliabilityMetricsRequest call request
//
// - project_id          = [required] UUID of the project
// - pipeline_file_name  = [required] name of the pipeline file
// - branch_name         = [optional] name of the branch - empty value means all branches
// - from_date           = [optional] start date(inclusive) for the metrics (default: now - 30 days)
// - to_date             = [optional] end date(inclusive) for the metrics (default: now)
type ListPipelineReliabilityMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineFileName string               `protobuf:"bytes,2,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	BranchName       string               `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Aggregate        MetricAggregation    `protobuf:"varint,4,opt,name=aggregate,proto3,enum=InternalApi.Velocity.MetricAggregation" json:"aggregate,omitempty"`
	FromDate         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *ListPipelineReliabilityMetricsRequest) Reset() {
	*x = ListPipelineReliabilityMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReliabilityMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReliabilityMetricsRequest) ProtoMessage() {}

func (x *ListPipelineReliabilityMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReliabilityMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineReliabilityMetricsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{41}
}

func (x *ListPipelineReliabilityMetricsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListPipelineReliabilityMetricsRequest) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *ListPipelineReliabilityMetricsRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListPipelineReliabilityMetricsRequest) GetAggregate() MetricAggregation {
	if x != nil {
		return x.Aggregate
	}
	return MetricAggregation_RANGE
}

func (x *ListPipelineReliabilityMetricsRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ListPipelineReliabilityMetricsRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

// ListPipelineReliabilityMetrics call response.
//
// - metrics         = [required] ListPipeline of project reliability metrics
type ListPipelineReliabilityMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*ReliabilityMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ListPipelineReliabilityMetricsResponse) Reset() {
	*x = ListPipelineReliabilityMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReliabilityMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReliabilityMetricsResponse) ProtoMessage() {}

func (x *ListPipelineReliabilityMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReliabilityMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineReliabilityMetricsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{42}
}

func (x *ListPipelineReliabilityMetricsResponse) GetMetrics() []*ReliabilityMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// ReliabilityMetric provides information about the number of pipeline builds by state for given range
// Used to calculate ratio of passed to total builds.
//
// - from_date       = [required] start date for which the metrics are collected
// - to_date         = [required] start date for which the metrics are collected
// - all_count       = [required] total number of builds
// - passed_count    = [required] number of passed builds
// - failed_count    = [required] number of failed builds
type ReliabilityMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate    *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	AllCount    int32                `protobuf:"varint,3,opt,name=all_count,json=allCount,proto3" json:"all_count,omitempty"`
	PassedCount int32                `protobuf:"varint,4,opt,name=passed_count,json=passedCount,proto3" json:"passed_count,omitempty"`
	FailedCount int32                `protobuf:"varint,5,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
}

func (x *ReliabilityMetric) Reset() {
	*x = ReliabilityMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliabilityMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliabilityMetric) ProtoMessage() {}

func (x *ReliabilityMetric) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliabilityMetric.ProtoReflect.Descriptor instead.
func (*ReliabilityMetric) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{43}
}

func (x *ReliabilityMetric) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ReliabilityMetric) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *ReliabilityMetric) GetAllCount() int32 {
	if x != nil {
		return x.AllCount
	}
	return 0
}

func (x *ReliabilityMetric) GetPassedCount() int32 {
	if x != nil {
		return x.PassedCount
	}
	return 0
}

func (x *ReliabilityMetric) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

// ListPipelineFrequencyMetricsRequest call request
//
// - project_id          = [required] UUID of the project
// - pipeline_file_name  = [required] name of the pipeline file
// - branch_name         = [optional] name of the branch - empty value means all branches
// - from_date           = [optional] start date(inclusive) for the metrics (default: now - 30 days)
// - to_date             = [optional] end date(inclusive) for the metrics (default: now)
type ListPipelineFrequencyMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineFileName string               `protobuf:"bytes,2,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	BranchName       string               `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Aggregate        MetricAggregation    `protobuf:"varint,4,opt,name=aggregate,proto3,enum=InternalApi.Velocity.MetricAggregation" json:"aggregate,omitempty"`
	FromDate         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *ListPipelineFrequencyMetricsRequest) Reset() {
	*x = ListPipelineFrequencyMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineFrequencyMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineFrequencyMetricsRequest) ProtoMessage() {}

func (x *ListPipelineFrequencyMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineFrequencyMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineFrequencyMetricsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{44}
}

func (x *ListPipelineFrequencyMetricsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListPipelineFrequencyMetricsRequest) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *ListPipelineFrequencyMetricsRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListPipelineFrequencyMetricsRequest) GetAggregate() MetricAggregation {
	if x != nil {
		return x.Aggregate
	}
	return MetricAggregation_RANGE
}

func (x *ListPipelineFrequencyMetricsRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ListPipelineFrequencyMetricsRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

// ListPipelineReliabilityMetrics call response.
//
// - metrics         = [required] ListPipeline of project frequency metrics
type ListPipelineFrequencyMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*FrequencyMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ListPipelineFrequencyMetricsResponse) Reset() {
	*x = ListPipelineFrequencyMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineFrequencyMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineFrequencyMetricsResponse) ProtoMessage() {}

func (x *ListPipelineFrequencyMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineFrequencyMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineFrequencyMetricsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{45}
}

func (x *ListPipelineFrequencyMetricsResponse) GetMetrics() []*FrequencyMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// FrequencyMetric provides information about the total number of pipeline builds for given range
//
// - from_date       = [required] start date for which the metrics are collected
// - to_date         = [required] start date for which the metrics are collected
// - all_count       = [required] total number of builds
type FrequencyMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	AllCount int32                `protobuf:"varint,3,opt,name=all_count,json=allCount,proto3" json:"all_count,omitempty"`
}

func (x *FrequencyMetric) Reset() {
	*x = FrequencyMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyMetric) ProtoMessage() {}

func (x *FrequencyMetric) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyMetric.ProtoReflect.Descriptor instead.
func (*FrequencyMetric) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{46}
}

func (x *FrequencyMetric) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *FrequencyMetric) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *FrequencyMetric) GetAllCount() int32 {
	if x != nil {
		return x.AllCount
	}
	return 0
}

// DescribeProjectPerformance call request
//
// - project_id          = [required] UUID of the project
// - pipeline_file_name  = [required] name of the pipeline file
// - branch_name         = [optional] name of the branch - empty value means all branches
// - from_date           = [required] start date for which the metrics are collected
// - to_date             = [required] start date for which the metrics are collected
type DescribeProjectPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineFileName string               `protobuf:"bytes,2,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	BranchName       string               `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	FromDate         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *DescribeProjectPerformanceRequest) Reset() {
	*x = DescribeProjectPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProjectPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProjectPerformanceRequest) ProtoMessage() {}

func (x *DescribeProjectPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProjectPerformanceRequest.ProtoReflect.Descriptor instead.
func (*DescribeProjectPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{47}
}

func (x *DescribeProjectPerformanceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DescribeProjectPerformanceRequest) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *DescribeProjectPerformanceRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *DescribeProjectPerformanceRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *DescribeProjectPerformanceRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

// DescribeProjectPerformance call response
//
// - mean_time_to_recovery_seconds  = [required] how long in average it takes to recover from a failed pipeline run
// - last_successful_run_at         = [required] when was the last successful pipeline run
// - from_date                      = [required] start date for which the metrics are collected
// - to_date                        = [required] start date for which the metrics are collected
type DescribeProjectPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeanTimeToRecoverySeconds int32                `protobuf:"varint,1,opt,name=mean_time_to_recovery_seconds,json=meanTimeToRecoverySeconds,proto3" json:"mean_time_to_recovery_seconds,omitempty"`
	LastSuccessfulRunAt       *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_successful_run_at,json=lastSuccessfulRunAt,proto3" json:"last_successful_run_at,omitempty"`
	FromDate                  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate                    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *DescribeProjectPerformanceResponse) Reset() {
	*x = DescribeProjectPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProjectPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProjectPerformanceResponse) ProtoMessage() {}

func (x *DescribeProjectPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProjectPerformanceResponse.ProtoReflect.Descriptor instead.
func (*DescribeProjectPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{48}
}

func (x *DescribeProjectPerformanceResponse) GetMeanTimeToRecoverySeconds() int32 {
	if x != nil {
		return x.MeanTimeToRecoverySeconds
	}
	return 0
}

func (x *DescribeProjectPerformanceResponse) GetLastSuccessfulRunAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastSuccessfulRunAt
	}
	return nil
}

func (x *DescribeProjectPerformanceResponse) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *DescribeProjectPerformanceResponse) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

type DescribeProjectSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *DescribeProjectSettingsRequest) Reset() {
	*x = DescribeProjectSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProjectSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProjectSettingsRequest) ProtoMessage() {}

func (x *DescribeProjectSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProjectSettingsRequest.ProtoReflect.Descriptor instead.
func (*DescribeProjectSettingsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{49}
}

func (x *DescribeProjectSettingsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DescribeProjectSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DescribeProjectSettingsResponse) Reset() {
	*x = DescribeProjectSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProjectSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProjectSettingsResponse) ProtoMessage() {}

func (x *DescribeProjectSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProjectSettingsResponse.ProtoReflect.Descriptor instead.
func (*DescribeProjectSettingsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{50}
}

func (x *DescribeProjectSettingsResponse) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateProjectSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string    `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Settings  *Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateProjectSettingsRequest) Reset() {
	*x = UpdateProjectSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectSettingsRequest) ProtoMessage() {}

func (x *UpdateProjectSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectSettingsRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateProjectSettingsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectSettingsRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateProjectSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateProjectSettingsResponse) Reset() {
	*x = UpdateProjectSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectSettingsResponse) ProtoMessage() {}

func (x *UpdateProjectSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectSettingsResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateProjectSettingsResponse) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdBranchName       string `protobuf:"bytes,1,opt,name=cd_branch_name,json=cdBranchName,proto3" json:"cd_branch_name,omitempty"`
	CdPipelineFileName string `protobuf:"bytes,2,opt,name=cd_pipeline_file_name,json=cdPipelineFileName,proto3" json:"cd_pipeline_file_name,omitempty"`
	CiBranchName       string `protobuf:"bytes,3,opt,name=ci_branch_name,json=ciBranchName,proto3" json:"ci_branch_name,omitempty"`
	CiPipelineFileName string `protobuf:"bytes,4,opt,name=ci_pipeline_file_name,json=ciPipelineFileName,proto3" json:"ci_pipeline_file_name,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{53}
}

func (x *Settings) GetCdBranchName() string {
	if x != nil {
		return x.CdBranchName
	}
	return ""
}

func (x *Settings) GetCdPipelineFileName() string {
	if x != nil {
		return x.CdPipelineFileName
	}
	return ""
}

func (x *Settings) GetCiBranchName() string {
	if x != nil {
		return x.CiBranchName
	}
	return ""
}

func (x *Settings) GetCiPipelineFileName() string {
	if x != nil {
		return x.CiPipelineFileName
	}
	return ""
}

// ListPipelineSummaries call request
// Results will only include pipelines that have a summary. Client will have to check if the ids in request match the results in response.
//
// - pipeline_ids         = [required] ListPipeline UUID's of the pipelines for which to get summaries.
type ListPipelineSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineIds []string `protobuf:"bytes,1,rep,name=pipeline_ids,json=pipelineIds,proto3" json:"pipeline_ids,omitempty"`
}

func (x *ListPipelineSummariesRequest) Reset() {
	*x = ListPipelineSummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineSummariesRequest) ProtoMessage() {}

func (x *ListPipelineSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineSummariesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineSummariesRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{54}
}

func (x *ListPipelineSummariesRequest) GetPipelineIds() []string {
	if x != nil {
		return x.PipelineIds
	}
	return nil
}

// ListPipelineSummaries call response
//
// - pipeline_summaries         = [required] ListPipeline of pipeline summaries
type ListPipelineSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineSummaries []*PipelineSummary `protobuf:"bytes,1,rep,name=pipeline_summaries,json=pipelineSummaries,proto3" json:"pipeline_summaries,omitempty"`
}

func (x *ListPipelineSummariesResponse) Reset() {
	*x = ListPipelineSummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineSummariesResponse) ProtoMessage() {}

func (x *ListPipelineSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineSummariesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineSummariesResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{55}
}

func (x *ListPipelineSummariesResponse) GetPipelineSummaries() []*PipelineSummary {
	if x != nil {
		return x.PipelineSummaries
	}
	return nil
}

// ListJobSummaries call request
// Results will only include jobs that have a summary. Client will have to check if the ids in request match the results in response.
//
// - job_ids         = [required] ListPipeline UUID's of the jobs for which to get summaries.
type ListJobSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIds []string `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
}

func (x *ListJobSummariesRequest) Reset() {
	*x = ListJobSummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobSummariesRequest) ProtoMessage() {}

func (x *ListJobSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobSummariesRequest.ProtoReflect.Descriptor instead.
func (*ListJobSummariesRequest) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{56}
}

func (x *ListJobSummariesRequest) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

// ListJobSummaries call response
//
// - job_summaries         = [required] ListPipeline of job summaries
type ListJobSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobSummaries []*JobSummary `protobuf:"bytes,1,rep,name=job_summaries,json=jobSummaries,proto3" json:"job_summaries,omitempty"`
}

func (x *ListJobSummariesResponse) Reset() {
	*x = ListJobSummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobSummariesResponse) ProtoMessage() {}

func (x *ListJobSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobSummariesResponse.ProtoReflect.Descriptor instead.
func (*ListJobSummariesResponse) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{57}
}

func (x *ListJobSummariesResponse) GetJobSummaries() []*JobSummary {
	if x != nil {
		return x.JobSummaries
	}
	return nil
}

// PipelineSummary represents a summary for a pipeline
//
// - pipeline_id          = [required] UUID of the pipeline
// - summary              = [required] summary of the pipeline
type PipelineSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string   `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Summary    *Summary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *PipelineSummary) Reset() {
	*x = PipelineSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSummary) ProtoMessage() {}

func (x *PipelineSummary) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSummary.ProtoReflect.Descriptor instead.
func (*PipelineSummary) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{58}
}

func (x *PipelineSummary) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineSummary) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// JobSummary represents a summary for a job
//
// - job_id               = [required] UUID of the job
// - pipeline_id          = [required] UUID of the pipeline that job belongs to
// - summary              = [required] summary of the job
type JobSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId      string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	PipelineId string   `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Summary    *Summary `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *JobSummary) Reset() {
	*x = JobSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummary) ProtoMessage() {}

func (x *JobSummary) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummary.ProtoReflect.Descriptor instead.
func (*JobSummary) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{59}
}

func (x *JobSummary) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSummary) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *JobSummary) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Summary represents a generic test summary
//
// - total               = [required] total number of tests
// - passed              = [required] number of tests that passed
// - skipped             = [required] number of tests that were skipped
// - error               = [required] number of tests that errored
// - failed              = [required] number of tests that failed
// - disabled            = [required] number of tests that were disabled
// - duration            = [required] total duration of the tests in nanoseconds
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Passed   int32 `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"`
	Skipped  int32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Error    int32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
	Failed   int32 `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
	Disabled int32 `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Duration int64 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{60}
}

func (x *Summary) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Summary) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *Summary) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *Summary) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Summary) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *Summary) GetDisabled() int32 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

func (x *Summary) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Cloud AMQP event. Published on: velocity_pipeline_summary exchange
//
// - pipeline_id = [required] id of the pipeline for which the summary is generated
// - timestamp   = [required] timestamp when the event happened
type PipelineSummaryAvailableEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string               `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PipelineSummaryAvailableEvent) Reset() {
	*x = PipelineSummaryAvailableEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineSummaryAvailableEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineSummaryAvailableEvent) ProtoMessage() {}

func (x *PipelineSummaryAvailableEvent) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineSummaryAvailableEvent.ProtoReflect.Descriptor instead.
func (*PipelineSummaryAvailableEvent) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{61}
}

func (x *PipelineSummaryAvailableEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineSummaryAvailableEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Cloud AMQP event. Published on: velocity_job_summary exchange
//
// - job_id      = [required] id of the job for which the summary is generated
// - timestamp   = [required] timestamp when the event happened
type JobSummaryAvailableEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string               `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *JobSummaryAvailableEvent) Reset() {
	*x = JobSummaryAvailableEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummaryAvailableEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummaryAvailableEvent) ProtoMessage() {}

func (x *JobSummaryAvailableEvent) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummaryAvailableEvent.ProtoReflect.Descriptor instead.
func (*JobSummaryAvailableEvent) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{62}
}

func (x *JobSummaryAvailableEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSummaryAvailableEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Cloud AMQP event. Published on: velocity_emitter_exchange
//
// - project_id            = [required] id of the project for which the summary is calculated
// - organization_id       = [required] id of the organization for which the summary is calculated
// - pipeline_file_name    = [required] name of the pipeline file for which the summary is calculated
// - branch_name           = [required] name of the branch for which the summary is calculated - empty value means all branches
// - metric_day            = [required] day for which the summary is calculated
// - timestamp             = [required] timestamp when the event happened
// - project_name          = [required] name of the project for which the summary is calculated
type CollectPipelineMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId   string               `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PipelineFileName string               `protobuf:"bytes,3,opt,name=pipeline_file_name,json=pipelineFileName,proto3" json:"pipeline_file_name,omitempty"`
	BranchName       string               `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	MetricDay        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=metric_day,json=metricDay,proto3" json:"metric_day,omitempty"`
	Timestamp        *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProjectName      string               `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *CollectPipelineMetricsEvent) Reset() {
	*x = CollectPipelineMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPipelineMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPipelineMetricsEvent) ProtoMessage() {}

func (x *CollectPipelineMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPipelineMetricsEvent.ProtoReflect.Descriptor instead.
func (*CollectPipelineMetricsEvent) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{63}
}

func (x *CollectPipelineMetricsEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CollectPipelineMetricsEvent) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CollectPipelineMetricsEvent) GetPipelineFileName() string {
	if x != nil {
		return x.PipelineFileName
	}
	return ""
}

func (x *CollectPipelineMetricsEvent) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CollectPipelineMetricsEvent) GetMetricDay() *timestamp.Timestamp {
	if x != nil {
		return x.MetricDay
	}
	return nil
}

func (x *CollectPipelineMetricsEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CollectPipelineMetricsEvent) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

// Cloud AMQP event. Published on: velocity_superjerry_exchange
//
// - organization_id       = [required] id of the organization for which the report should be collected
// - project_id            = [required] id of the project for which the report should be collected
// - pipeline_id           = [required] id of the pipeline for which the report should be collected
// - job_id                = [required] id of the job for which the report should be collected
type CollectSuperjerryJobReportEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineId     string `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	JobId          string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CollectSuperjerryJobReportEvent) Reset() {
	*x = CollectSuperjerryJobReportEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_velocity_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectSuperjerryJobReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSuperjerryJobReportEvent) ProtoMessage() {}

func (x *CollectSuperjerryJobReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_velocity_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSuperjerryJobReportEvent.ProtoReflect.Descriptor instead.
func (*CollectSuperjerryJobReportEvent) Descriptor() ([]byte, []int) {
	return file_velocity_proto_rawDescGZIP(), []int{64}
}

func (x *CollectSuperjerryJobReportEvent) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CollectSuperjerryJobReportEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CollectSuperjerryJobReportEvent) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *CollectSuperjerryJobReportEvent) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

var File_velocity_proto protoreflect.FileDescriptor

var file_velocity_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x22, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x23, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x66,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x8c, 0x02, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f,
	0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x20, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x59, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc1,
	0x01, 0x0a, 0x19, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x1d, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x75, 0x6e, 0x41,
	0x74, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x76, 0x67,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x76, 0x67, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x2e,
	0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58,
	0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x47, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x61, 0x0a, 0x15, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x09, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x43, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90,
	0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x40, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x1f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x11, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x39, 0x35, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x39,
	0x35, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x25, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74,
	0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x9c, 0x01,
	0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x01, 0x0a,
	0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa5,
	0x02, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x65,
	0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x5b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbc,
	0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x69,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x69, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x75, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x6b,
	0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x7d, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x1d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x6b, 0x0a, 0x18, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcc, 0x02,
	0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x65, 0x72,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x2a, 0x66, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x10, 0x01, 0x32, 0xcc, 0x19, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x95, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x39, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x35, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x33, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x1b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x6b,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46,
	0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_velocity_proto_rawDescOnce sync.Once
	file_velocity_proto_rawDescData = file_velocity_proto_rawDesc
)

func file_velocity_proto_rawDescGZIP() []byte {
	file_velocity_proto_rawDescOnce.Do(func() {
		file_velocity_proto_rawDescData = protoimpl.X.CompressGZIP(file_velocity_proto_rawDescData)
	})
	return file_velocity_proto_rawDescData
}

var file_velocity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_velocity_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_velocity_proto_goTypes = []interface{}{
	(Metric)(0),            // 0: InternalApi.Velocity.Metric
	(MetricAggregation)(0), // 1: InternalApi.Velocity.MetricAggregation
	(*InitializeFlakyTestsFiltersRequest)(nil),     // 2: InternalApi.Velocity.InitializeFlakyTestsFiltersRequest
	(*InitializeFlakyTestsFiltersResponse)(nil),    // 3: InternalApi.Velocity.InitializeFlakyTestsFiltersResponse
	(*ListFlakyTestsFiltersRequest)(nil),           // 4: InternalApi.Velocity.ListFlakyTestsFiltersRequest
	(*ListFlakyTestsFiltersResponse)(nil),          // 5: InternalApi.Velocity.ListFlakyTestsFiltersResponse
	(*CreateFlakyTestsFilterRequest)(nil),          // 6: InternalApi.Velocity.CreateFlakyTestsFilterRequest
	(*CreateFlakyTestsFilterResponse)(nil),         // 7: InternalApi.Velocity.CreateFlakyTestsFilterResponse
	(*FlakyTestsFilter)(nil),                       // 8: InternalApi.Velocity.FlakyTestsFilter
	(*RemoveFlakyTestsFilterRequest)(nil),          // 9: InternalApi.Velocity.RemoveFlakyTestsFilterRequest
	(*RemoveFlakyTestsFilterResponse)(nil),         // 10: InternalApi.Velocity.RemoveFlakyTestsFilterResponse
	(*UpdateFlakyTestsFilterRequest)(nil),          // 11: InternalApi.Velocity.UpdateFlakyTestsFilterRequest
	(*UpdateFlakyTestsFilterResponse)(nil),         // 12: InternalApi.Velocity.UpdateFlakyTestsFilterResponse
	(*OrganizationHealthRequest)(nil),              // 13: InternalApi.Velocity.OrganizationHealthRequest
	(*OrganizationHealthResponse)(nil),             // 14: InternalApi.Velocity.OrganizationHealthResponse
	(*ProjectHealthMetrics)(nil),                   // 15: InternalApi.Velocity.ProjectHealthMetrics
	(*Stats)(nil),                                  // 16: InternalApi.Velocity.Stats
	(*DescribeDashboardItemRequest)(nil),           // 17: InternalApi.Velocity.DescribeDashboardItemRequest
	(*DescribeDashboardItemResponse)(nil),          // 18: InternalApi.Velocity.DescribeDashboardItemResponse
	(*DeleteDashboardItemRequest)(nil),             // 19: InternalApi.Velocity.DeleteDashboardItemRequest
	(*DeleteDashboardItemResponse)(nil),            // 20: InternalApi.Velocity.DeleteDashboardItemResponse
	(*DeleteMetricsDashboardRequest)(nil),          // 21: InternalApi.Velocity.DeleteMetricsDashboardRequest
	(*DeleteMetricsDashboardResponse)(nil),         // 22: InternalApi.Velocity.DeleteMetricsDashboardResponse
	(*ListMetricsDashboardsRequest)(nil),           // 23: InternalApi.Velocity.ListMetricsDashboardsRequest
	(*ListMetricsDashboardsResponse)(nil),          // 24: InternalApi.Velocity.ListMetricsDashboardsResponse
	(*DescribeMetricsDashboardRequest)(nil),        // 25: InternalApi.Velocity.DescribeMetricsDashboardRequest
	(*DescribeMetricsDashboardResponse)(nil),       // 26: InternalApi.Velocity.DescribeMetricsDashboardResponse
	(*MetricsDashboard)(nil),                       // 27: InternalApi.Velocity.MetricsDashboard
	(*DashboardItem)(nil),                          // 28: InternalApi.Velocity.DashboardItem
	(*DashboardItemSettings)(nil),                  // 29: InternalApi.Velocity.DashboardItemSettings
	(*CreateMetricsDashboardRequest)(nil),          // 30: InternalApi.Velocity.CreateMetricsDashboardRequest
	(*CreateMetricsDashboardResponse)(nil),         // 31: InternalApi.Velocity.CreateMetricsDashboardResponse
	(*UpdateMetricsDashboardRequest)(nil),          // 32: InternalApi.Velocity.UpdateMetricsDashboardRequest
	(*UpdateMetricsDashboardResponse)(nil),         // 33: InternalApi.Velocity.UpdateMetricsDashboardResponse
	(*CreateDashboardItemRequest)(nil),             // 34: InternalApi.Velocity.CreateDashboardItemRequest
	(*CreateDashboardItemResponse)(nil),            // 35: InternalApi.Velocity.CreateDashboardItemResponse
	(*UpdateDashboardItemRequest)(nil),             // 36: InternalApi.Velocity.UpdateDashboardItemRequest
	(*UpdateDashboardItemResponse)(nil),            // 37: InternalApi.Velocity.UpdateDashboardItemResponse
	(*ChangeDashboardItemNotesRequest)(nil),        // 38: InternalApi.Velocity.ChangeDashboardItemNotesRequest
	(*ChangeDashboardItemNotesResponse)(nil),       // 39: InternalApi.Velocity.ChangeDashboardItemNotesResponse
	(*ListPipelinePerformanceMetricsRequest)(nil),  // 40: InternalApi.Velocity.ListPipelinePerformanceMetricsRequest
	(*ListPipelinePerformanceMetricsResponse)(nil), // 41: InternalApi.Velocity.ListPipelinePerformanceMetricsResponse
	(*PerformanceMetric)(nil),                      // 42: InternalApi.Velocity.PerformanceMetric
	(*ListPipelineReliabilityMetricsRequest)(nil),  // 43: InternalApi.Velocity.ListPipelineReliabilityMetricsRequest
	(*ListPipelineReliabilityMetricsResponse)(nil), // 44: InternalApi.Velocity.ListPipelineReliabilityMetricsResponse
	(*ReliabilityMetric)(nil),                      // 45: InternalApi.Velocity.ReliabilityMetric
	(*ListPipelineFrequencyMetricsRequest)(nil),    // 46: InternalApi.Velocity.ListPipelineFrequencyMetricsRequest
	(*ListPipelineFrequencyMetricsResponse)(nil),   // 47: InternalApi.Velocity.ListPipelineFrequencyMetricsResponse
	(*FrequencyMetric)(nil),                        // 48: InternalApi.Velocity.FrequencyMetric
	(*DescribeProjectPerformanceRequest)(nil),      // 49: InternalApi.Velocity.DescribeProjectPerformanceRequest
	(*DescribeProjectPerformanceResponse)(nil),     // 50: InternalApi.Velocity.DescribeProjectPerformanceResponse
	(*DescribeProjectSettingsRequest)(nil),         // 51: InternalApi.Velocity.DescribeProjectSettingsRequest
	(*DescribeProjectSettingsResponse)(nil),        // 52: InternalApi.Velocity.DescribeProjectSettingsResponse
	(*UpdateProjectSettingsRequest)(nil),           // 53: InternalApi.Velocity.UpdateProjectSettingsRequest
	(*UpdateProjectSettingsResponse)(nil),          // 54: InternalApi.Velocity.UpdateProjectSettingsResponse
	(*Settings)(nil),                               // 55: InternalApi.Velocity.Settings
	(*ListPipelineSummariesRequest)(nil),           // 56: InternalApi.Velocity.ListPipelineSummariesRequest
	(*ListPipelineSummariesResponse)(nil),          // 57: InternalApi.Velocity.ListPipelineSummariesResponse
	(*ListJobSummariesRequest)(nil),                // 58: InternalApi.Velocity.ListJobSummariesRequest
	(*ListJobSummariesResponse)(nil),               // 59: InternalApi.Velocity.ListJobSummariesResponse
	(*PipelineSummary)(nil),                        // 60: InternalApi.Velocity.PipelineSummary
	(*JobSummary)(nil),                             // 61: InternalApi.Velocity.JobSummary
	(*Summary)(nil),                                // 62: InternalApi.Velocity.Summary
	(*PipelineSummaryAvailableEvent)(nil),          // 63: InternalApi.Velocity.PipelineSummaryAvailableEvent
	(*JobSummaryAvailableEvent)(nil),               // 64: InternalApi.Velocity.JobSummaryAvailableEvent
	(*CollectPipelineMetricsEvent)(nil),            // 65: InternalApi.Velocity.CollectPipelineMetricsEvent
	(*CollectSuperjerryJobReportEvent)(nil),        // 66: InternalApi.Velocity.CollectSuperjerryJobReportEvent
	(*timestamp.Timestamp)(nil),                    // 67: google.protobuf.Timestamp
}
var file_velocity_proto_depIdxs = []int32{
	8,  // 0: InternalApi.Velocity.InitializeFlakyTestsFiltersResponse.filters:type_name -> InternalApi.Velocity.FlakyTestsFilter
	8,  // 1: InternalApi.Velocity.ListFlakyTestsFiltersResponse.filters:type_name -> InternalApi.Velocity.FlakyTestsFilter
	8,  // 2: InternalApi.Velocity.CreateFlakyTestsFilterResponse.filter:type_name -> InternalApi.Velocity.FlakyTestsFilter
	67, // 3: InternalApi.Velocity.FlakyTestsFilter.inserted_at:type_name -> google.protobuf.Timestamp
	67, // 4: InternalApi.Velocity.FlakyTestsFilter.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 5: InternalApi.Velocity.UpdateFlakyTestsFilterResponse.filter:type_name -> InternalApi.Velocity.FlakyTestsFilter
	67, // 6: InternalApi.Velocity.OrganizationHealthRequest.from_date:type_name -> google.protobuf.Timestamp
	67, // 7: InternalApi.Velocity.OrganizationHealthRequest.to_date:type_name -> google.protobuf.Timestamp
	15, // 8: InternalApi.Velocity.OrganizationHealthResponse.health_metrics:type_name -> InternalApi.Velocity.ProjectHealthMetrics
	67, // 9: InternalApi.Velocity.ProjectHealthMetrics.last_successful_run_at:type_name -> google.protobuf.Timestamp
	16, // 10: InternalApi.Velocity.ProjectHealthMetrics.default_branch:type_name -> InternalApi.Velocity.Stats
	16, // 11: InternalApi.Velocity.ProjectHealthMetrics.all_branches:type_name -> InternalApi.Velocity.Stats
	28, // 12: InternalApi.Velocity.DescribeDashboardItemResponse.item:type_name -> InternalApi.Velocity.DashboardItem
	27, // 13: InternalApi.Velocity.ListMetricsDashboardsResponse.dashboards:type_name -> InternalApi.Velocity.MetricsDashboard
	27, // 14: InternalApi.Velocity.DescribeMetricsDashboardResponse.dashboard:type_name -> InternalApi.Velocity.MetricsDashboard
	67, // 15: InternalApi.Velocity.MetricsDashboard.inserted_at:type_name -> google.protobuf.Timestamp
	67, // 16: InternalApi.Velocity.MetricsDashboard.updated_at:type_name -> google.protobuf.Timestamp
	28, // 17: InternalApi.Velocity.MetricsDashboard.items:type_name -> InternalApi.Velocity.DashboardItem
	67, // 18: InternalApi.Velocity.DashboardItem.inserted_at:type_name -> google.protobuf.Timestamp
	67, // 19: InternalApi.Velocity.DashboardItem.updated_at:type_name -> google.protobuf.Timestamp
	29, // 20: InternalApi.Velocity.DashboardItem.settings:type_name -> InternalApi.Velocity.DashboardItemSettings
	0,  // 21: InternalApi.Velocity.DashboardItemSettings.metric:type_name -> InternalApi.Velocity.Metric
	27, // 22: InternalApi.Velocity.CreateMetricsDashboardResponse.dashboard:type_name -> InternalApi.Velocity.MetricsDashboard
	29, // 23: InternalApi.Velocity.CreateDashboardItemRequest.settings:type_name -> InternalApi.Velocity.DashboardItemSettings
	28, // 24: InternalApi.Velocity.CreateDashboardItemResponse.item:type_name -> InternalApi.Velocity.DashboardItem
	1,  // 25: InternalApi.Velocity.ListPipelinePerformanceMetricsRequest.aggregate:type_name -> InternalApi.Velocity.MetricAggregation
	67, // 26: InternalApi.Velocity.ListPipelinePerformanceMetricsRequest.from_date:type_name -> google.protobuf.Timestamp
	67, // 27: InternalApi.Velocity.ListPipelinePerformanceMetricsRequest.to_date:type_name -> google.protobuf.Timestamp
	42, // 28: InternalApi.Velocity.ListPipelinePerformanceMetricsResponse.all_metrics:type_name -> InternalApi.Velocity.PerformanceMetric
	42, // 29: InternalApi.Velocity.ListPipelinePerformanceMetricsResponse.passed_metrics:type_name -> InternalApi.Velocity.PerformanceMetric
	42, // 30: InternalApi.Velocity.ListPipelinePerformanceMetricsResponse.failed_metrics:type_name -> InternalApi.Velocity.PerformanceMetric
	67, // 31: InternalApi.Velocity.PerformanceMetric.from_date:type_name -> google.protobuf.Timestamp
	67, // 32: InternalApi.Velocity.PerformanceMetric.to_date:type_name -> google.protobuf.Timestamp
	1,  // 33: InternalApi.Velocity.ListPipelineReliabilityMetricsRequest.aggregate:type_name -> InternalApi.Velocity.MetricAggregation
	67, // 34: InternalApi.Velocity.ListPipelineReliabilityMetricsRequest.from_date:type_name -> google.protobuf.Timestamp
	67, // 35: InternalApi.Velocity.ListPipelineReliabilityMetricsRequest.to_date:type_name -> google.protobuf.Timestamp
	45, // 36: InternalApi.Velocity.ListPipelineReliabilityMetricsResponse.metrics:type_name -> InternalApi.Velocity.ReliabilityMetric
	67, // 37: InternalApi.Velocity.ReliabilityMetric.from_date:type_name -> google.protobuf.Timestamp
	67, // 38: InternalApi.Velocity.ReliabilityMetric.to_date:type_name -> google.protobuf.Timestamp
	1,  // 39: InternalApi.Velocity.ListPipelineFrequencyMetricsRequest.aggregate:type_name -> InternalApi.Velocity.MetricAggregation
	67, // 40: InternalApi.Velocity.ListPipelineFrequencyMetricsRequest.from_date:type_name -> google.protobuf.Timestamp
	67, // 41: InternalApi.Velocity.ListPipelineFrequencyMetricsRequest.to_date:type_name -> google.protobuf.Timestamp
	48, // 42: InternalApi.Velocity.ListPipelineFrequencyMetricsResponse.metrics:type_name -> InternalApi.Velocity.FrequencyMetric
	67, // 43: InternalApi.Velocity.FrequencyMetric.from_date:type_name -> google.protobuf.Timestamp
	67, // 44: InternalApi.Velocity.FrequencyMetric.to_date:type_name -> google.protobuf.Timestamp
	67, // 45: InternalApi.Velocity.DescribeProjectPerformanceRequest.from_date:type_name -> google.protobuf.Timestamp
	67, // 46: InternalApi.Velocity.DescribeProjectPerformanceRequest.to_date:type_name -> google.protobuf.Timestamp
	67, // 47: InternalApi.Velocity.DescribeProjectPerformanceResponse.last_successful_run_at:type_name -> google.protobuf.Timestamp
	67, // 48: InternalApi.Velocity.DescribeProjectPerformanceResponse.from_date:type_name -> google.protobuf.Timestamp
	67, // 49: InternalApi.Velocity.DescribeProjectPerformanceResponse.to_date:type_name -> google.protobuf.Timestamp
	55, // 50: InternalApi.Velocity.DescribeProjectSettingsResponse.settings:type_name -> InternalApi.Velocity.Settings
	55, // 51: InternalApi.Velocity.UpdateProjectSettingsRequest.settings:type_name -> InternalApi.Velocity.Settings
	55, // 52: InternalApi.Velocity.UpdateProjectSettingsResponse.settings:type_name -> InternalApi.Velocity.Settings
	60, // 53: InternalApi.Velocity.ListPipelineSummariesResponse.pipeline_summaries:type_name -> InternalApi.Velocity.PipelineSummary
	61, // 54: InternalApi.Velocity.ListJobSummariesResponse.job_summaries:type_name -> InternalApi.Velocity.JobSummary
	62, // 55: InternalApi.Velocity.PipelineSummary.summary:type_name -> InternalApi.Velocity.Summary
	62, // 56: InternalApi.Velocity.JobSummary.summary:type_name -> InternalApi.Velocity.Summary
	67, // 57: InternalApi.Velocity.PipelineSummaryAvailableEvent.timestamp:type_name -> google.protobuf.Timestamp
	67, // 58: InternalApi.Velocity.JobSummaryAvailableEvent.timestamp:type_name -> google.protobuf.Timestamp
	67, // 59: InternalApi.Velocity.CollectPipelineMetricsEvent.metric_day:type_name -> google.protobuf.Timestamp
	67, // 60: InternalApi.Velocity.CollectPipelineMetricsEvent.timestamp:type_name -> google.protobuf.Timestamp
	56, // 61: InternalApi.Velocity.PipelineMetricsService.ListPipelineSummaries:input_type -> InternalApi.Velocity.ListPipelineSummariesRequest
	58, // 62: InternalApi.Velocity.PipelineMetricsService.ListJobSummaries:input_type -> InternalApi.Velocity.ListJobSummariesRequest
	40, // 63: InternalApi.Velocity.PipelineMetricsService.ListPipelinePerformanceMetrics:input_type -> InternalApi.Velocity.ListPipelinePerformanceMetricsRequest
	43, // 64: InternalApi.Velocity.PipelineMetricsService.ListPipelineReliabilityMetrics:input_type -> InternalApi.Velocity.ListPipelineReliabilityMetricsRequest
	46, // 65: InternalApi.Velocity.PipelineMetricsService.ListPipelineFrequencyMetrics:input_type -> InternalApi.Velocity.ListPipelineFrequencyMetricsRequest
	49, // 66: InternalApi.Velocity.PipelineMetricsService.DescribeProjectPerformance:input_type -> InternalApi.Velocity.DescribeProjectPerformanceRequest
	51, // 67: InternalApi.Velocity.PipelineMetricsService.DescribeProjectSettings:input_type -> InternalApi.Velocity.DescribeProjectSettingsRequest
	53, // 68: InternalApi.Velocity.PipelineMetricsService.UpdateProjectSettings:input_type -> InternalApi.Velocity.UpdateProjectSettingsRequest
	25, // 69: InternalApi.Velocity.PipelineMetricsService.DescribeMetricsDashboard:input_type -> InternalApi.Velocity.DescribeMetricsDashboardRequest
	23, // 70: InternalApi.Velocity.PipelineMetricsService.ListMetricsDashboards:input_type -> InternalApi.Velocity.ListMetricsDashboardsRequest
	30, // 71: InternalApi.Velocity.PipelineMetricsService.CreateMetricsDashboard:input_type -> InternalApi.Velocity.CreateMetricsDashboardRequest
	32, // 72: InternalApi.Velocity.PipelineMetricsService.UpdateMetricsDashboard:input_type -> InternalApi.Velocity.UpdateMetricsDashboardRequest
	21, // 73: InternalApi.Velocity.PipelineMetricsService.DeleteMetricsDashboard:input_type -> InternalApi.Velocity.DeleteMetricsDashboardRequest
	34, // 74: InternalApi.Velocity.PipelineMetricsService.CreateDashboardItem:input_type -> InternalApi.Velocity.CreateDashboardItemRequest
	36, // 75: InternalApi.Velocity.PipelineMetricsService.UpdateDashboardItem:input_type -> InternalApi.Velocity.UpdateDashboardItemRequest
	19, // 76: InternalApi.Velocity.PipelineMetricsService.DeleteDashboardItem:input_type -> InternalApi.Velocity.DeleteDashboardItemRequest
	17, // 77: InternalApi.Velocity.PipelineMetricsService.DescribeDashboardItem:input_type -> InternalApi.Velocity.DescribeDashboardItemRequest
	38, // 78: InternalApi.Velocity.PipelineMetricsService.ChangeDashboardItemNotes:input_type -> InternalApi.Velocity.ChangeDashboardItemNotesRequest
	13, // 79: InternalApi.Velocity.PipelineMetricsService.FetchOrganizationHealth:input_type -> InternalApi.Velocity.OrganizationHealthRequest
	4,  // 80: InternalApi.Velocity.PipelineMetricsService.ListFlakyTestsFilters:input_type -> InternalApi.Velocity.ListFlakyTestsFiltersRequest
	6,  // 81: InternalApi.Velocity.PipelineMetricsService.CreateFlakyTestsFilter:input_type -> InternalApi.Velocity.CreateFlakyTestsFilterRequest
	9,  // 82: InternalApi.Velocity.PipelineMetricsService.RemoveFlakyTestsFilter:input_type -> InternalApi.Velocity.RemoveFlakyTestsFilterRequest
	11, // 83: InternalApi.Velocity.PipelineMetricsService.UpdateFlakyTestsFilter:input_type -> InternalApi.Velocity.UpdateFlakyTestsFilterRequest
	2,  // 84: InternalApi.Velocity.PipelineMetricsService.InitializeFlakyTestsFilters:input_type -> InternalApi.Velocity.InitializeFlakyTestsFiltersRequest
	57, // 85: InternalApi.Velocity.PipelineMetricsService.ListPipelineSummaries:output_type -> InternalApi.Velocity.ListPipelineSummariesResponse
	59, // 86: InternalApi.Velocity.PipelineMetricsService.ListJobSummaries:output_type -> InternalApi.Velocity.ListJobSummariesResponse
	41, // 87: InternalApi.Velocity.PipelineMetricsService.ListPipelinePerformanceMetrics:output_type -> InternalApi.Velocity.ListPipelinePerformanceMetricsResponse
	44, // 88: InternalApi.Velocity.PipelineMetricsService.ListPipelineReliabilityMetrics:output_type -> InternalApi.Velocity.ListPipelineReliabilityMetricsResponse
	47, // 89: InternalApi.Velocity.PipelineMetricsService.ListPipelineFrequencyMetrics:output_type -> InternalApi.Velocity.ListPipelineFrequencyMetricsResponse
	50, // 90: InternalApi.Velocity.PipelineMetricsService.DescribeProjectPerformance:output_type -> InternalApi.Velocity.DescribeProjectPerformanceResponse
	52, // 91: InternalApi.Velocity.PipelineMetricsService.DescribeProjectSettings:output_type -> InternalApi.Velocity.DescribeProjectSettingsResponse
	54, // 92: InternalApi.Velocity.PipelineMetricsService.UpdateProjectSettings:output_type -> InternalApi.Velocity.UpdateProjectSettingsResponse
	26, // 93: InternalApi.Velocity.PipelineMetricsService.DescribeMetricsDashboard:output_type -> InternalApi.Velocity.DescribeMetricsDashboardResponse
	24, // 94: InternalApi.Velocity.PipelineMetricsService.ListMetricsDashboards:output_type -> InternalApi.Velocity.ListMetricsDashboardsResponse
	31, // 95: InternalApi.Velocity.PipelineMetricsService.CreateMetricsDashboard:output_type -> InternalApi.Velocity.CreateMetricsDashboardResponse
	33, // 96: InternalApi.Velocity.PipelineMetricsService.UpdateMetricsDashboard:output_type -> InternalApi.Velocity.UpdateMetricsDashboardResponse
	22, // 97: InternalApi.Velocity.PipelineMetricsService.DeleteMetricsDashboard:output_type -> InternalApi.Velocity.DeleteMetricsDashboardResponse
	35, // 98: InternalApi.Velocity.PipelineMetricsService.CreateDashboardItem:output_type -> InternalApi.Velocity.CreateDashboardItemResponse
	37, // 99: InternalApi.Velocity.PipelineMetricsService.UpdateDashboardItem:output_type -> InternalApi.Velocity.UpdateDashboardItemResponse
	20, // 100: InternalApi.Velocity.PipelineMetricsService.DeleteDashboardItem:output_type -> InternalApi.Velocity.DeleteDashboardItemResponse
	18, // 101: InternalApi.Velocity.PipelineMetricsService.DescribeDashboardItem:output_type -> InternalApi.Velocity.DescribeDashboardItemResponse
	39, // 102: InternalApi.Velocity.PipelineMetricsService.ChangeDashboardItemNotes:output_type -> InternalApi.Velocity.ChangeDashboardItemNotesResponse
	14, // 103: InternalApi.Velocity.PipelineMetricsService.FetchOrganizationHealth:output_type -> InternalApi.Velocity.OrganizationHealthResponse
	5,  // 104: InternalApi.Velocity.PipelineMetricsService.ListFlakyTestsFilters:output_type -> InternalApi.Velocity.ListFlakyTestsFiltersResponse
	7,  // 105: InternalApi.Velocity.PipelineMetricsService.CreateFlakyTestsFilter:output_type -> InternalApi.Velocity.CreateFlakyTestsFilterResponse
	10, // 106: InternalApi.Velocity.PipelineMetricsService.RemoveFlakyTestsFilter:output_type -> InternalApi.Velocity.RemoveFlakyTestsFilterResponse
	12, // 107: InternalApi.Velocity.PipelineMetricsService.UpdateFlakyTestsFilter:output_type -> InternalApi.Velocity.UpdateFlakyTestsFilterResponse
	3,  // 108: InternalApi.Velocity.PipelineMetricsService.InitializeFlakyTestsFilters:output_type -> InternalApi.Velocity.InitializeFlakyTestsFiltersResponse
	85, // [85:109] is the sub-list for method output_type
	61, // [61:85] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_velocity_proto_init() }
func file_velocity_proto_init() {
	if File_velocity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_velocity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeFlakyTestsFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeFlakyTestsFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyTestsFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlakyTestsFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlakyTestsFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlakyTestsFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyTestsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFlakyTestsFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFlakyTestsFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlakyTestsFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlakyTestsFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectHealthMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDashboardItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDashboardItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDashboardItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDashboardItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricsDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricsDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsDashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricsDashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMetricsDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMetricsDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsDashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardItemSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMetricsDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMetricsDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetricsDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetricsDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDashboardItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDashboardItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDashboardItemNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDashboardItemNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinePerformanceMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinePerformanceMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReliabilityMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReliabilityMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliabilityMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineFrequencyMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineFrequencyMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProjectPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProjectPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProjectSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProjectSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineSummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineSummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobSummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobSummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineSummaryAvailableEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummaryAvailableEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPipelineMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_velocity_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectSuperjerryJobReportEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_velocity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_velocity_proto_goTypes,
		DependencyIndexes: file_velocity_proto_depIdxs,
		EnumInfos:         file_velocity_proto_enumTypes,
		MessageInfos:      file_velocity_proto_msgTypes,
	}.Build()
	File_velocity_proto = out.File
	file_velocity_proto_rawDesc = nil
	file_velocity_proto_goTypes = nil
	file_velocity_proto_depIdxs = nil
}
