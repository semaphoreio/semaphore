version: v1.0  # Pipeline schema: https://docs.semaphoreci.com/reference/pipeline-yaml/
name: "🐍 Python CI/CD Pipeline"

agent:  # Define execution environment; select machine type in UI → https://docs.semaphoreci.com/reference/machine-types/
  machine:
    type: {{ machine_type }}
  containers:
    - name: main
      image: 'registry.semaphoreci.com/python:3.12.1'  # Docker container image → https://docs.semaphoreci.com/ci-cd-environment/docker-images/

auto_cancel:  # Automatically cancel queued runs upon new commits → https://docs.semaphoreci.com/reference/pipeline-yaml/#auto-cancel
  queued:
    when: 'true'

fail_fast:  # Quickly abort non-main branch jobs if failures occur → https://docs.semaphoreci.com/reference/pipeline-yaml/#fail-fast
  cancel:
    when: branch != 'main'

global_job_config:
  prologue:  # Commands run at the start of each job
    commands:
      - checkout  # Check out the current commit → https://docs.semaphoreci.com/essentials/checking-out-code/

blocks:
  - name: "📦 Setup Dependencies"
    dependencies: []
    task:
      jobs:
        - name: "📦 Install dependencies"
          commands:
            - echo "Setting up Python environment and caching dependencies…"
            - 'export PATH="$HOME/.local/bin:$PATH"'
            - mkdir -p .pip_cache
            - cache restore  # Restore cached dependencies → https://docs.semaphoreci.com/essentials/caching-dependencies/
            - |
              if [ -f requirements.txt ]; then
                pip install --user --cache-dir .pip_cache -r requirements.txt
              else
                echo "No requirements.txt found, skipping installation."
              fi
            - cache store  # Store dependencies for future runs → https://docs.semaphoreci.com/essentials/caching-dependencies/

  - name: "🔍 Lint"
    dependencies:
      - "📦 Setup Dependencies"
    task:
      jobs:
        - name: "🔍 flake8 lint"
          commands:
            - echo "Running flake8 lint…"
            - 'export PATH="$HOME/.local/bin:$PATH"'
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install --user flake8'
            - flake8 .

  - name: "🛡️Security Checks"
    dependencies:
      - "📦 Setup Dependencies"
    task:
      jobs:
        - name: "🛡️ Bandit scan"
          commands:
            - echo "Running Bandit security scan…"
            - 'export PATH="$HOME/.local/bin:$PATH"'
            - mkdir -p .pip_cache
            - cache restore
            - 'pip install --user bandit'
            - bandit -r . -ll

  - name: "🧪 Unit Tests"
    dependencies:
      - "🛡️Security Checks"  # Tests run only if security checks pass
    task:
      jobs:
        - name: "🧪 pytest unit"
          commands:
            - echo "Running unit tests with pytest…"
            - 'export PATH="$HOME/.local/bin:$PATH"'
            - mkdir -p .pip_cache
            - cache restore
            - 'pytest --maxfail=1 --disable-warnings -q --junitxml=junit_unit.xml tests'
      epilogue:
        always:
          commands:
            - test-results publish junit_unit.xml  # Publish test results → https://docs.semaphoreci.com/essentials/test-reports/

  - name: "🔗 Integration Tests"
    dependencies:
      - "🛡️Security Checks"
    task:
      jobs:
        - name: "🔗 pytest integration"
          commands:
            - echo "Running integration tests with pytest…"
            - 'export PATH="$HOME/.local/bin:$PATH"'
            - mkdir -p .pip_cache
            - cache restore
            - 'pytest --maxfail=1 --disable-warnings -q --junitxml=junit_integration.xml tests/integration'
      epilogue:
        always:
          commands:
            - test-results publish junit_integration.xml  # Publish test results → https://docs.semaphoreci.com/essentials/test-reports/

  - name: "🐳 Docker Build"
    dependencies:
      - "🔗 Integration Tests"
      - "🧪 Unit Tests"
    task:
      jobs:
        - name: "🐳 Build image"
          commands:
            - echo "Building Docker image…"
            - |
              if [ -f Dockerfile ]; then
                docker build -t my-python-app:${SEMAPHORE_GIT_BRANCH:-latest} .
              else
                echo "No Dockerfile found, skipping Docker build."
              fi

after_pipeline:
  task:
    jobs:
      - name: "📊 Merge reports"
        commands:
          - test-results gen-pipeline-report  # Consolidate test reports → https://docs.semaphoreci.com/essentials/test-reports/
