// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: server_farm.job.proto

package server_farm_job

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	response_status "github.com/semaphoreio/semaphore/velocity/pkg/protos/response_status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebugSessionType int32

const (
	DebugSessionType_JOB     DebugSessionType = 0
	DebugSessionType_PROJECT DebugSessionType = 1
)

// Enum value maps for DebugSessionType.
var (
	DebugSessionType_name = map[int32]string{
		0: "JOB",
		1: "PROJECT",
	}
	DebugSessionType_value = map[string]int32{
		"JOB":     0,
		"PROJECT": 1,
	}
)

func (x DebugSessionType) Enum() *DebugSessionType {
	p := new(DebugSessionType)
	*p = x
	return p
}

func (x DebugSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[0].Descriptor()
}

func (DebugSessionType) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[0]
}

func (x DebugSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugSessionType.Descriptor instead.
func (DebugSessionType) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{0}
}

type Job_State int32

const (
	Job_PENDING    Job_State = 0
	Job_ENQUEUED   Job_State = 1
	Job_SCHEDULED  Job_State = 2
	Job_DISPATCHED Job_State = 5
	Job_STARTED    Job_State = 3
	Job_FINISHED   Job_State = 4
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "PENDING",
		1: "ENQUEUED",
		2: "SCHEDULED",
		5: "DISPATCHED",
		3: "STARTED",
		4: "FINISHED",
	}
	Job_State_value = map[string]int32{
		"PENDING":    0,
		"ENQUEUED":   1,
		"SCHEDULED":  2,
		"DISPATCHED": 5,
		"STARTED":    3,
		"FINISHED":   4,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[1].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[1]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{1, 0}
}

type Job_Result int32

const (
	Job_PASSED  Job_Result = 0
	Job_FAILED  Job_Result = 1
	Job_STOPPED Job_Result = 2
)

// Enum value maps for Job_Result.
var (
	Job_Result_name = map[int32]string{
		0: "PASSED",
		1: "FAILED",
		2: "STOPPED",
	}
	Job_Result_value = map[string]int32{
		"PASSED":  0,
		"FAILED":  1,
		"STOPPED": 2,
	}
)

func (x Job_Result) Enum() *Job_Result {
	p := new(Job_Result)
	*p = x
	return p
}

func (x Job_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[2].Descriptor()
}

func (Job_Result) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[2]
}

func (x Job_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Result.Descriptor instead.
func (Job_Result) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{1, 1}
}

type ListRequest_Order int32

const (
	ListRequest_BY_FINISH_TIME_ASC    ListRequest_Order = 0
	ListRequest_BY_CREATION_TIME_DESC ListRequest_Order = 1
	ListRequest_BY_PRIORITY_DESC      ListRequest_Order = 2
)

// Enum value maps for ListRequest_Order.
var (
	ListRequest_Order_name = map[int32]string{
		0: "BY_FINISH_TIME_ASC",
		1: "BY_CREATION_TIME_DESC",
		2: "BY_PRIORITY_DESC",
	}
	ListRequest_Order_value = map[string]int32{
		"BY_FINISH_TIME_ASC":    0,
		"BY_CREATION_TIME_DESC": 1,
		"BY_PRIORITY_DESC":      2,
	}
)

func (x ListRequest_Order) Enum() *ListRequest_Order {
	p := new(ListRequest_Order)
	*p = x
	return p
}

func (x ListRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[3].Descriptor()
}

func (ListRequest_Order) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[3]
}

func (x ListRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListRequest_Order.Descriptor instead.
func (ListRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{3, 0}
}

type ListDebugSessionsRequest_Order int32

const (
	ListDebugSessionsRequest_BY_CREATION_TIME_DESC ListDebugSessionsRequest_Order = 0
	ListDebugSessionsRequest_BY_FINISH_TIME_ASC    ListDebugSessionsRequest_Order = 1
)

// Enum value maps for ListDebugSessionsRequest_Order.
var (
	ListDebugSessionsRequest_Order_name = map[int32]string{
		0: "BY_CREATION_TIME_DESC",
		1: "BY_FINISH_TIME_ASC",
	}
	ListDebugSessionsRequest_Order_value = map[string]int32{
		"BY_CREATION_TIME_DESC": 0,
		"BY_FINISH_TIME_ASC":    1,
	}
)

func (x ListDebugSessionsRequest_Order) Enum() *ListDebugSessionsRequest_Order {
	p := new(ListDebugSessionsRequest_Order)
	*p = x
	return p
}

func (x ListDebugSessionsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListDebugSessionsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[4].Descriptor()
}

func (ListDebugSessionsRequest_Order) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[4]
}

func (x ListDebugSessionsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListDebugSessionsRequest_Order.Descriptor instead.
func (ListDebugSessionsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{5, 0}
}

type TotalExecutionTimeRequest_Interval int32

const (
	TotalExecutionTimeRequest_LAST_DAY TotalExecutionTimeRequest_Interval = 0
)

// Enum value maps for TotalExecutionTimeRequest_Interval.
var (
	TotalExecutionTimeRequest_Interval_name = map[int32]string{
		0: "LAST_DAY",
	}
	TotalExecutionTimeRequest_Interval_value = map[string]int32{
		"LAST_DAY": 0,
	}
)

func (x TotalExecutionTimeRequest_Interval) Enum() *TotalExecutionTimeRequest_Interval {
	p := new(TotalExecutionTimeRequest_Interval)
	*p = x
	return p
}

func (x TotalExecutionTimeRequest_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TotalExecutionTimeRequest_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_server_farm_job_proto_enumTypes[5].Descriptor()
}

func (TotalExecutionTimeRequest_Interval) Type() protoreflect.EnumType {
	return &file_server_farm_job_proto_enumTypes[5]
}

func (x TotalExecutionTimeRequest_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TotalExecutionTimeRequest_Interval.Descriptor instead.
func (TotalExecutionTimeRequest_Interval) EnumDescriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{12, 0}
}

// Describe call request
//
// - job_id = [required] UUID of the job.
type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Job
//
// Response:
// - id              = [required] Job UUID.
// - name            = [required] Name of the job.
// - state           = [required] Job state.
// - result          = [required if present] Job execution result.
// - organization_id = [required] UUID of a organization.
// - project_id      = [required] UUID of a project.
// - branch_id       = [required] UUID of a branch.
// - hook_id         = [required] UUID of a hook.
// - ppl_id          = [required] UUID of the pipeline.
// - build_server    = [required if present] IP or domain of the build server.
// - index           = [required] Index of the job in the context of the build.
//
// - priority        = [required] The priority of the job
// - is_debug_job    = [required] True if job is started as debug session
// - debug_user_id   = [optional] Exists if is_debug_job = true; ID of the user who started the session.
// - self_hosted     = [required] True if job is running in a self-hosted agent
// - build_req_id    = [required] ID from plumber used to tie job to the block
// - agent_name      = [required] Name of the self-hosted agent, empty for hosted jobs
// - agent_id        = [required] ID of the agent
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string        `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchId       string        `protobuf:"bytes,3,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	HookId         string        `protobuf:"bytes,4,opt,name=hook_id,json=hookId,proto3" json:"hook_id,omitempty"`
	Timeline       *Job_Timeline `protobuf:"bytes,5,opt,name=timeline,proto3" json:"timeline,omitempty"`
	State          Job_State     `protobuf:"varint,6,opt,name=state,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"state,omitempty"`
	Result         Job_Result    `protobuf:"varint,7,opt,name=result,proto3,enum=InternalApi.ServerFarm.Job.Job_Result" json:"result,omitempty"`
	BuildServerIp  string        `protobuf:"bytes,8,opt,name=build_server_ip,json=buildServerIp,proto3" json:"build_server_ip,omitempty"` // deprecated in favor of agent_host. They contain the same value.
	PplId          string        `protobuf:"bytes,9,opt,name=ppl_id,json=pplId,proto3" json:"ppl_id,omitempty"`
	Name           string        `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Index          int32         `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	FailureReason  string        `protobuf:"bytes,12,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	MachineType    string        `protobuf:"bytes,13,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	MachineOsImage string        `protobuf:"bytes,14,opt,name=machine_os_image,json=machineOsImage,proto3" json:"machine_os_image,omitempty"`
	AgentHost      string        `protobuf:"bytes,15,opt,name=agent_host,json=agentHost,proto3" json:"agent_host,omitempty"`
	AgentCtrlPort  int32         `protobuf:"varint,16,opt,name=agent_ctrl_port,json=agentCtrlPort,proto3" json:"agent_ctrl_port,omitempty"`
	AgentSshPort   int32         `protobuf:"varint,17,opt,name=agent_ssh_port,json=agentSshPort,proto3" json:"agent_ssh_port,omitempty"`
	AgentAuthToken string        `protobuf:"bytes,18,opt,name=agent_auth_token,json=agentAuthToken,proto3" json:"agent_auth_token,omitempty"`
	Priority       int32         `protobuf:"varint,19,opt,name=priority,proto3" json:"priority,omitempty"`
	IsDebugJob     bool          `protobuf:"varint,20,opt,name=is_debug_job,json=isDebugJob,proto3" json:"is_debug_job,omitempty"`
	DebugUserId    string        `protobuf:"bytes,21,opt,name=debug_user_id,json=debugUserId,proto3" json:"debug_user_id,omitempty"`
	SelfHosted     bool          `protobuf:"varint,22,opt,name=self_hosted,json=selfHosted,proto3" json:"self_hosted,omitempty"`
	OrganizationId string        `protobuf:"bytes,23,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	BuildReqId     string        `protobuf:"bytes,24,opt,name=build_req_id,json=buildReqId,proto3" json:"build_req_id,omitempty"`
	AgentName      string        `protobuf:"bytes,25,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	AgentId        string        `protobuf:"bytes,27,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Job) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Job) GetHookId() string {
	if x != nil {
		return x.HookId
	}
	return ""
}

func (x *Job) GetTimeline() *Job_Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_PENDING
}

func (x *Job) GetResult() Job_Result {
	if x != nil {
		return x.Result
	}
	return Job_PASSED
}

func (x *Job) GetBuildServerIp() string {
	if x != nil {
		return x.BuildServerIp
	}
	return ""
}

func (x *Job) GetPplId() string {
	if x != nil {
		return x.PplId
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Job) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Job) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *Job) GetMachineOsImage() string {
	if x != nil {
		return x.MachineOsImage
	}
	return ""
}

func (x *Job) GetAgentHost() string {
	if x != nil {
		return x.AgentHost
	}
	return ""
}

func (x *Job) GetAgentCtrlPort() int32 {
	if x != nil {
		return x.AgentCtrlPort
	}
	return 0
}

func (x *Job) GetAgentSshPort() int32 {
	if x != nil {
		return x.AgentSshPort
	}
	return 0
}

func (x *Job) GetAgentAuthToken() string {
	if x != nil {
		return x.AgentAuthToken
	}
	return ""
}

func (x *Job) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Job) GetIsDebugJob() bool {
	if x != nil {
		return x.IsDebugJob
	}
	return false
}

func (x *Job) GetDebugUserId() string {
	if x != nil {
		return x.DebugUserId
	}
	return ""
}

func (x *Job) GetSelfHosted() bool {
	if x != nil {
		return x.SelfHosted
	}
	return false
}

func (x *Job) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Job) GetBuildReqId() string {
	if x != nil {
		return x.BuildReqId
	}
	return ""
}

func (x *Job) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Job) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

// - status = [required] Status of the reponse.
// - job    = [required if status is OK] Description of job.
type DescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Job    *Job                            `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the pagination window. Allowed values are in the range (0..1000].
	// If you send values outside of this range you will get a BAD_PARAM response.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// If you are fetching for the first time leave this value empty.
	// The response will return a page_token, that you should use in the
	// next requests.
	//
	// If the page_token is invalid, you will get a BAD_PARAM.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Sorting order direction. See enum Order.
	Order ListRequest_Order `protobuf:"varint,3,opt,name=order,proto3,enum=InternalApi.ServerFarm.Job.ListRequest_Order" json:"order,omitempty"`
	// Specify a filter for job states
	//
	// example: [:STARTED, :FINISHED] returns only jobs that
	//
	//	are started and finished
	//
	// If you don't specify job state, you will not get any jobs
	// back in the response.
	JobStates []Job_State `protobuf:"varint,4,rep,packed,name=job_states,json=jobStates,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"job_states,omitempty"`
	// Specify the minimim value for the finished_at timestamp.
	// The response will list jobs only newer or equal to the
	// timestamp provided in this request.
	FinishedAtGt  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=finished_at_gt,json=finishedAtGt,proto3" json:"finished_at_gt,omitempty"`
	FinishedAtGte *timestamp.Timestamp `protobuf:"bytes,6,opt,name=finished_at_gte,json=finishedAtGte,proto3" json:"finished_at_gte,omitempty"`
	// [optional] Specify organization which jobs you want to list
	OrganizationId string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// [required] If true, only debug jobs will be listed
	OnlyDebugJobs bool `protobuf:"varint,8,opt,name=only_debug_jobs,json=onlyDebugJobs,proto3" json:"only_debug_jobs,omitempty"`
	// [optional] List of IDs of pipelines which jobs should be listed
	PplIds       []string             `protobuf:"bytes,9,rep,name=ppl_ids,json=pplIds,proto3" json:"ppl_ids,omitempty"`
	CreatedAtGte *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at_gte,json=createdAtGte,proto3" json:"created_at_gte,omitempty"`
	CreatedAtLte *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at_lte,json=createdAtLte,proto3" json:"created_at_lte,omitempty"`
	// [optional] List of ids of projects which jobs should be listed
	ProjectIds []string `protobuf:"bytes,13,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	// [optional] List of machine_types which jobs should be listed
	MachineTypes []string `protobuf:"bytes,14,rep,name=machine_types,json=machineTypes,proto3" json:"machine_types,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{3}
}

func (x *ListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRequest) GetOrder() ListRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListRequest_BY_FINISH_TIME_ASC
}

func (x *ListRequest) GetJobStates() []Job_State {
	if x != nil {
		return x.JobStates
	}
	return nil
}

func (x *ListRequest) GetFinishedAtGt() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAtGt
	}
	return nil
}

func (x *ListRequest) GetFinishedAtGte() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAtGte
	}
	return nil
}

func (x *ListRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRequest) GetOnlyDebugJobs() bool {
	if x != nil {
		return x.OnlyDebugJobs
	}
	return false
}

func (x *ListRequest) GetPplIds() []string {
	if x != nil {
		return x.PplIds
	}
	return nil
}

func (x *ListRequest) GetCreatedAtGte() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAtGte
	}
	return nil
}

func (x *ListRequest) GetCreatedAtLte() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAtLte
	}
	return nil
}

func (x *ListRequest) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *ListRequest) GetMachineTypes() []string {
	if x != nil {
		return x.MachineTypes
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Jobs   []*Job                          `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
	// Token to fetch the next page of jobs. Pass this in as page_token in
	// a ListRequest message to the List rpc.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{4}
}

func (x *ListResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *ListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListDebugSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the pagination window. Allowed values are in the range (0..1000].
	// If you send values outside of this range you will get a BAD_PARAM response.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// If you are fetching for the first time leave this value empty.
	// The response will return a page_token, that you should use in the
	// next requests.
	//
	// If the page_token is invalid, you will get a BAD_PARAM.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Sorting order direction. See enum Order.
	Order ListDebugSessionsRequest_Order `protobuf:"varint,3,opt,name=order,proto3,enum=InternalApi.ServerFarm.Job.ListDebugSessionsRequest_Order" json:"order,omitempty"`
	// Specify a filter for debug session states
	//
	// example: [:STARTED, :FINISHED] returns only debug session that
	//
	//	are started or finished
	//
	// If you don't specify a debug session state, you will not get any debug sessions
	// back in the response.
	DebugSessionStates []Job_State `protobuf:"varint,4,rep,packed,name=debug_session_states,json=debugSessionStates,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"debug_session_states,omitempty"`
	// Type of debug sessions - whether it is debugging a job or a project
	//
	// example: [:JOB, :PROJECT] returns both debug sessions for jobs and debug
	// sessions for projects
	//
	// If you don't specify a debug session type, you will not get any debug sessions
	// back in the response.
	Types []DebugSessionType `protobuf:"varint,5,rep,packed,name=types,proto3,enum=InternalApi.ServerFarm.Job.DebugSessionType" json:"types,omitempty"`
	// [optional] Specify organization which debug sessions you want to list
	// At least one of the fields with number in range [6, 9] is required.
	OrganizationId string `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// [optional] Specify a project which debug sessions you want to list
	// At least one of the fields with number in range [6, 9] is required.
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// [optional] Specify a job for which debug sessions should be listed
	// At least one of the fields with number in range [6, 9] is required.
	JobId string `protobuf:"bytes,8,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// [optional] Specify a user which debug sessions you want to list
	// At least one of the fields with number in range [6, 9] is required.
	DebugUserId string `protobuf:"bytes,9,opt,name=debug_user_id,json=debugUserId,proto3" json:"debug_user_id,omitempty"`
}

func (x *ListDebugSessionsRequest) Reset() {
	*x = ListDebugSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDebugSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDebugSessionsRequest) ProtoMessage() {}

func (x *ListDebugSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDebugSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListDebugSessionsRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{5}
}

func (x *ListDebugSessionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDebugSessionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDebugSessionsRequest) GetOrder() ListDebugSessionsRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListDebugSessionsRequest_BY_CREATION_TIME_DESC
}

func (x *ListDebugSessionsRequest) GetDebugSessionStates() []Job_State {
	if x != nil {
		return x.DebugSessionStates
	}
	return nil
}

func (x *ListDebugSessionsRequest) GetTypes() []DebugSessionType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListDebugSessionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDebugSessionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDebugSessionsRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ListDebugSessionsRequest) GetDebugUserId() string {
	if x != nil {
		return x.DebugUserId
	}
	return ""
}

type ListDebugSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DebugSessions []*DebugSession                 `protobuf:"bytes,2,rep,name=debug_sessions,json=debugSessions,proto3" json:"debug_sessions,omitempty"`
	// Token to fetch the next page of jobs. Pass this in as page_token in
	// a ListDebugSessionsRequest message to the ListDebugSessions rpc.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDebugSessionsResponse) Reset() {
	*x = ListDebugSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDebugSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDebugSessionsResponse) ProtoMessage() {}

func (x *ListDebugSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDebugSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListDebugSessionsResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{6}
}

func (x *ListDebugSessionsResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDebugSessionsResponse) GetDebugSessions() []*DebugSession {
	if x != nil {
		return x.DebugSessions
	}
	return nil
}

func (x *ListDebugSessionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Debug Session
//
// Fields:
//
// - debug_session  = [required] Job type field with data about debug session
// - type           = [required] Type of debug sessions - whether it is debugging a job or a project
// - debug_user_id  = [required] ID of the user who started the debug session.
// - debugged_job   = [optional] Exists if type = JOB; Job that is being debugged.
type DebugSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugSession *Job             `protobuf:"bytes,1,opt,name=debug_session,json=debugSession,proto3" json:"debug_session,omitempty"`
	Type         DebugSessionType `protobuf:"varint,2,opt,name=type,proto3,enum=InternalApi.ServerFarm.Job.DebugSessionType" json:"type,omitempty"`
	DebugUserId  string           `protobuf:"bytes,3,opt,name=debug_user_id,json=debugUserId,proto3" json:"debug_user_id,omitempty"`
	DebuggedJob  *Job             `protobuf:"bytes,4,opt,name=debugged_job,json=debuggedJob,proto3" json:"debugged_job,omitempty"`
}

func (x *DebugSession) Reset() {
	*x = DebugSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugSession) ProtoMessage() {}

func (x *DebugSession) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugSession.ProtoReflect.Descriptor instead.
func (*DebugSession) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{7}
}

func (x *DebugSession) GetDebugSession() *Job {
	if x != nil {
		return x.DebugSession
	}
	return nil
}

func (x *DebugSession) GetType() DebugSessionType {
	if x != nil {
		return x.Type
	}
	return DebugSessionType_JOB
}

func (x *DebugSession) GetDebugUserId() string {
	if x != nil {
		return x.DebugUserId
	}
	return ""
}

func (x *DebugSession) GetDebuggedJob() *Job {
	if x != nil {
		return x.DebuggedJob
	}
	return nil
}

type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify a filter for job states
	//
	// example: [:STARTED, :FINISHED] counts only jobs that
	//
	//	are started and finished
	//
	// If you don't specify job state, count will eq 0 in response
	JobStates []Job_State `protobuf:"varint,4,rep,packed,name=job_states,json=jobStates,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"job_states,omitempty"`
	// Specify the minimim and maximum value for the finished_at timestamp.
	// The count will contain jobs between (with this dates)
	// timestamps provided in the request.
	FinishedAtGte *timestamp.Timestamp `protobuf:"bytes,1,opt,name=finished_at_gte,json=finishedAtGte,proto3" json:"finished_at_gte,omitempty"`
	FinishedAtLte *timestamp.Timestamp `protobuf:"bytes,2,opt,name=finished_at_lte,json=finishedAtLte,proto3" json:"finished_at_lte,omitempty"`
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{8}
}

func (x *CountRequest) GetJobStates() []Job_State {
	if x != nil {
		return x.JobStates
	}
	return nil
}

func (x *CountRequest) GetFinishedAtGte() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAtGte
	}
	return nil
}

func (x *CountRequest) GetFinishedAtLte() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAtLte
	}
	return nil
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count  int32                           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{9}
}

func (x *CountResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CountByStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string      `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	AgentType string      `protobuf:"bytes,2,opt,name=agent_type,json=agentType,proto3" json:"agent_type,omitempty"`
	States    []Job_State `protobuf:"varint,3,rep,packed,name=states,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"states,omitempty"`
}

func (x *CountByStateRequest) Reset() {
	*x = CountByStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByStateRequest) ProtoMessage() {}

func (x *CountByStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByStateRequest.ProtoReflect.Descriptor instead.
func (*CountByStateRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{10}
}

func (x *CountByStateRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CountByStateRequest) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

func (x *CountByStateRequest) GetStates() []Job_State {
	if x != nil {
		return x.States
	}
	return nil
}

type CountByStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*CountByStateResponse_CountByState `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *CountByStateResponse) Reset() {
	*x = CountByStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByStateResponse) ProtoMessage() {}

func (x *CountByStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByStateResponse.ProtoReflect.Descriptor instead.
func (*CountByStateResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{11}
}

func (x *CountByStateResponse) GetCounts() []*CountByStateResponse_CountByState {
	if x != nil {
		return x.Counts
	}
	return nil
}

// Returns total execution time of all jobs in an org,
// both running and finished.
//
// Useful for introspection and hunting miners.
type TotalExecutionTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string                             `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Interval TotalExecutionTimeRequest_Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=InternalApi.ServerFarm.Job.TotalExecutionTimeRequest_Interval" json:"interval,omitempty"`
}

func (x *TotalExecutionTimeRequest) Reset() {
	*x = TotalExecutionTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalExecutionTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalExecutionTimeRequest) ProtoMessage() {}

func (x *TotalExecutionTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalExecutionTimeRequest.ProtoReflect.Descriptor instead.
func (*TotalExecutionTimeRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{12}
}

func (x *TotalExecutionTimeRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TotalExecutionTimeRequest) GetInterval() TotalExecutionTimeRequest_Interval {
	if x != nil {
		return x.Interval
	}
	return TotalExecutionTimeRequest_LAST_DAY
}

type TotalExecutionTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDurationInSecs int64 `protobuf:"varint,1,opt,name=total_duration_in_secs,json=totalDurationInSecs,proto3" json:"total_duration_in_secs,omitempty"`
}

func (x *TotalExecutionTimeResponse) Reset() {
	*x = TotalExecutionTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalExecutionTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalExecutionTimeResponse) ProtoMessage() {}

func (x *TotalExecutionTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalExecutionTimeResponse.ProtoReflect.Descriptor instead.
func (*TotalExecutionTimeResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{13}
}

func (x *TotalExecutionTimeResponse) GetTotalDurationInSecs() int64 {
	if x != nil {
		return x.TotalDurationInSecs
	}
	return 0
}

// Stop call request
//
// - job_id       = [required] UUID of the job.
// - requester_id = [required] ID of the user that requested stopping of the job
type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId       string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequesterId string `protobuf:"bytes,2,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{14}
}

func (x *StopRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StopRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

// Stop call response
//
// Response:
//   - status  = [required] contains ResponseCode:
//     OK        = Job exists and it will be stopped if possible.
//     BAD_PARAM = Job with given job_id was not found.
type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{15}
}

func (x *StopResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAgentPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetAgentPayloadRequest) Reset() {
	*x = GetAgentPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentPayloadRequest) ProtoMessage() {}

func (x *GetAgentPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetAgentPayloadRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{16}
}

func (x *GetAgentPayloadRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetAgentPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetAgentPayloadResponse) Reset() {
	*x = GetAgentPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentPayloadResponse) ProtoMessage() {}

func (x *GetAgentPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetAgentPayloadResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{17}
}

func (x *GetAgentPayloadResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type CanDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId  string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CanDebugRequest) Reset() {
	*x = CanDebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanDebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanDebugRequest) ProtoMessage() {}

func (x *CanDebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanDebugRequest.ProtoReflect.Descriptor instead.
func (*CanDebugRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{18}
}

func (x *CanDebugRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CanDebugRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CanDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed bool   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CanDebugResponse) Reset() {
	*x = CanDebugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanDebugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanDebugResponse) ProtoMessage() {}

func (x *CanDebugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanDebugResponse.ProtoReflect.Descriptor instead.
func (*CanDebugResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{19}
}

func (x *CanDebugResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *CanDebugResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CanAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId  string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CanAttachRequest) Reset() {
	*x = CanAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanAttachRequest) ProtoMessage() {}

func (x *CanAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanAttachRequest.ProtoReflect.Descriptor instead.
func (*CanAttachRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{20}
}

func (x *CanAttachRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CanAttachRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CanAttachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed bool   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CanAttachResponse) Reset() {
	*x = CanAttachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanAttachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanAttachResponse) ProtoMessage() {}

func (x *CanAttachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanAttachResponse.ProtoReflect.Descriptor instead.
func (*CanAttachResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{21}
}

func (x *CanAttachResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *CanAttachResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Create job request
//
// - requester_id    = [required] ID of the user that requested job to be created
// - organization_id = [required] UUID of the organization
// - project_id      = [required] UUID of project
// - branch_name     = [optional, default=master] git branch on which the job should start
// - commit_sha      = [optional, default=HEAD] git commit SHA on which the job should start
// - job_spec        = [required] detailed job specification
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterId    string   `protobuf:"bytes,1,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	OrganizationId string   `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string   `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName     string   `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha      string   `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	JobSpec        *JobSpec `protobuf:"bytes,6,opt,name=job_spec,json=jobSpec,proto3" json:"job_spec,omitempty"`
	RestrictedJob  bool     `protobuf:"varint,7,opt,name=restricted_job,json=restrictedJob,proto3" json:"restricted_job,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{22}
}

func (x *CreateRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *CreateRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *CreateRequest) GetJobSpec() *JobSpec {
	if x != nil {
		return x.JobSpec
	}
	return nil
}

func (x *CreateRequest) GetRestrictedJob() bool {
	if x != nil {
		return x.RestrictedJob
	}
	return false
}

// Create job response
//
// Response:
//   - status  = [required] contains ResponseCode:
//     OK        = Job was created successfully
//     BAD_PARAM = One of the provided parameters is invalid
//   - job     = [required] The new job that was created based on request
type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *response_status.ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Job    *Job                            `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{23}
}

func (x *CreateResponse) GetStatus() *response_status.ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// Job specification detials
//
// - job_name                  = [required] the name of the job
// - agent                     = [required] the agent being used to run the job
// - secrets                   = [optional] list of secrets to be available within the job
// - env_vars                  = [optional] list of env vars to be available within the job
// - files                     = [optional] files to inject into the job
// - commands                  = [required] list of commands that job will execute
// - epilogue_always_commands  = [optional] commands to be run after regular ones regardles of execution result
// - epilogue_on_pass_commands = [optional] commands to be run after regular ones only if they passed
// - epilogue_on_fail_commands = [optional] commands to be run after regular ones only if they failed
type JobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName                string            `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Agent                  *JobSpec_Agent    `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Secrets                []*JobSpec_Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	EnvVars                []*JobSpec_EnvVar `protobuf:"bytes,4,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	Files                  []*JobSpec_File   `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	Commands               []string          `protobuf:"bytes,6,rep,name=commands,proto3" json:"commands,omitempty"`
	EpilogueAlwaysCommands []string          `protobuf:"bytes,7,rep,name=epilogue_always_commands,json=epilogueAlwaysCommands,proto3" json:"epilogue_always_commands,omitempty"`
	EpilogueOnPassCommands []string          `protobuf:"bytes,8,rep,name=epilogue_on_pass_commands,json=epilogueOnPassCommands,proto3" json:"epilogue_on_pass_commands,omitempty"`
	EpilogueOnFailCommands []string          `protobuf:"bytes,9,rep,name=epilogue_on_fail_commands,json=epilogueOnFailCommands,proto3" json:"epilogue_on_fail_commands,omitempty"`
	Priority               int32             `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	ExecutionTimeLimit     int32             `protobuf:"varint,11,opt,name=execution_time_limit,json=executionTimeLimit,proto3" json:"execution_time_limit,omitempty"`
}

func (x *JobSpec) Reset() {
	*x = JobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec) ProtoMessage() {}

func (x *JobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec.ProtoReflect.Descriptor instead.
func (*JobSpec) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24}
}

func (x *JobSpec) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobSpec) GetAgent() *JobSpec_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *JobSpec) GetSecrets() []*JobSpec_Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *JobSpec) GetEnvVars() []*JobSpec_EnvVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *JobSpec) GetFiles() []*JobSpec_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *JobSpec) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *JobSpec) GetEpilogueAlwaysCommands() []string {
	if x != nil {
		return x.EpilogueAlwaysCommands
	}
	return nil
}

func (x *JobSpec) GetEpilogueOnPassCommands() []string {
	if x != nil {
		return x.EpilogueOnPassCommands
	}
	return nil
}

func (x *JobSpec) GetEpilogueOnFailCommands() []string {
	if x != nil {
		return x.EpilogueOnFailCommands
	}
	return nil
}

func (x *JobSpec) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JobSpec) GetExecutionTimeLimit() int32 {
	if x != nil {
		return x.ExecutionTimeLimit
	}
	return 0
}

type Job_Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the job was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when the job was enqueued in the scheduling
	// process. Pending jobs don't have this value set.
	EnqueuedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	// Timestamp when the job was declared started by the
	// job monitor in the scheduler. It can differ from
	// execution_started_at that specifies the exect time
	// when the job was started on a physical machine.
	StartedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Timestamp when the job was declared finished by the
	// job monitoring system in the zebra scheduler.
	// This time can be different from the execution_finished_at
	// that specifies the unix timestamp when the job execution
	// was finished on the physical machine.
	//
	// The diff is caused by a lag in network communication between
	// clusters, or due to queueing in callback processors.
	FinishedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Timestamp when the job was started on the machine.
	ExecutionStartedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=execution_started_at,json=executionStartedAt,proto3" json:"execution_started_at,omitempty"`
	// Timestamp when the job was finished on the machine.
	ExecutionFinishedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=execution_finished_at,json=executionFinishedAt,proto3" json:"execution_finished_at,omitempty"`
}

func (x *Job_Timeline) Reset() {
	*x = Job_Timeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Timeline) ProtoMessage() {}

func (x *Job_Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Timeline.ProtoReflect.Descriptor instead.
func (*Job_Timeline) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Job_Timeline) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Job_Timeline) GetEnqueuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *Job_Timeline) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Job_Timeline) GetFinishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Job_Timeline) GetExecutionStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExecutionStartedAt
	}
	return nil
}

func (x *Job_Timeline) GetExecutionFinishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExecutionFinishedAt
	}
	return nil
}

type CountByStateResponse_CountByState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State Job_State `protobuf:"varint,1,opt,name=state,proto3,enum=InternalApi.ServerFarm.Job.Job_State" json:"state,omitempty"`
	Count int32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountByStateResponse_CountByState) Reset() {
	*x = CountByStateResponse_CountByState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByStateResponse_CountByState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByStateResponse_CountByState) ProtoMessage() {}

func (x *CountByStateResponse_CountByState) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByStateResponse_CountByState.ProtoReflect.Descriptor instead.
func (*CountByStateResponse_CountByState) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CountByStateResponse_CountByState) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_PENDING
}

func (x *CountByStateResponse_CountByState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type JobSpec_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine          *JobSpec_Agent_Machine           `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	Containers       []*JobSpec_Agent_Container       `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
	ImagePullSecrets []*JobSpec_Agent_ImagePullSecret `protobuf:"bytes,3,rep,name=image_pull_secrets,json=imagePullSecrets,proto3" json:"image_pull_secrets,omitempty"`
}

func (x *JobSpec_Agent) Reset() {
	*x = JobSpec_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_Agent) ProtoMessage() {}

func (x *JobSpec_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_Agent.ProtoReflect.Descriptor instead.
func (*JobSpec_Agent) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 0}
}

func (x *JobSpec_Agent) GetMachine() *JobSpec_Agent_Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *JobSpec_Agent) GetContainers() []*JobSpec_Agent_Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *JobSpec_Agent) GetImagePullSecrets() []*JobSpec_Agent_ImagePullSecret {
	if x != nil {
		return x.ImagePullSecrets
	}
	return nil
}

type JobSpec_Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *JobSpec_Secret) Reset() {
	*x = JobSpec_Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_Secret) ProtoMessage() {}

func (x *JobSpec_Secret) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_Secret.ProtoReflect.Descriptor instead.
func (*JobSpec_Secret) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 1}
}

func (x *JobSpec_Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JobSpec_EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *JobSpec_EnvVar) Reset() {
	*x = JobSpec_EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_EnvVar) ProtoMessage() {}

func (x *JobSpec_EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_EnvVar.ProtoReflect.Descriptor instead.
func (*JobSpec_EnvVar) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 2}
}

func (x *JobSpec_EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobSpec_EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type JobSpec_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *JobSpec_File) Reset() {
	*x = JobSpec_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_File) ProtoMessage() {}

func (x *JobSpec_File) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_File.ProtoReflect.Descriptor instead.
func (*JobSpec_File) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 3}
}

func (x *JobSpec_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JobSpec_File) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type JobSpec_Agent_Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	OsImage string `protobuf:"bytes,2,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
}

func (x *JobSpec_Agent_Machine) Reset() {
	*x = JobSpec_Agent_Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_Agent_Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_Agent_Machine) ProtoMessage() {}

func (x *JobSpec_Agent_Machine) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_Agent_Machine.ProtoReflect.Descriptor instead.
func (*JobSpec_Agent_Machine) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *JobSpec_Agent_Machine) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobSpec_Agent_Machine) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

type JobSpec_Agent_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image   string            `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Command string            `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	EnvVars []*JobSpec_EnvVar `protobuf:"bytes,4,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	Secrets []*JobSpec_Secret `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *JobSpec_Agent_Container) Reset() {
	*x = JobSpec_Agent_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_Agent_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_Agent_Container) ProtoMessage() {}

func (x *JobSpec_Agent_Container) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_Agent_Container.ProtoReflect.Descriptor instead.
func (*JobSpec_Agent_Container) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 0, 1}
}

func (x *JobSpec_Agent_Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobSpec_Agent_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *JobSpec_Agent_Container) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *JobSpec_Agent_Container) GetEnvVars() []*JobSpec_EnvVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *JobSpec_Agent_Container) GetSecrets() []*JobSpec_Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type JobSpec_Agent_ImagePullSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *JobSpec_Agent_ImagePullSecret) Reset() {
	*x = JobSpec_Agent_ImagePullSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_farm_job_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec_Agent_ImagePullSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec_Agent_ImagePullSecret) ProtoMessage() {}

func (x *JobSpec_Agent_ImagePullSecret) ProtoReflect() protoreflect.Message {
	mi := &file_server_farm_job_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec_Agent_ImagePullSecret.ProtoReflect.Descriptor instead.
func (*JobSpec_Agent_ImagePullSecret) Descriptor() ([]byte, []int) {
	return file_server_farm_job_proto_rawDescGZIP(), []int{24, 0, 2}
}

func (x *JobSpec_Agent_ImagePullSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_server_farm_job_proto protoreflect.FileDescriptor

var file_server_farm_job_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e,
	0x4a, 0x6f, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0xd1, 0x0b, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f,
	0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x70,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x70, 0x6c, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x74,
	0x72, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x98,
	0x03, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5c, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x22, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x22, 0xe0, 0x05, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4a, 0x6f, 0x62, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x70, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41,
	0x53, 0x43, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x02, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6a,
	0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x04, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x50, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22,
	0xc9, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x67, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0xdc, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x18, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x00, 0x22, 0x51, 0x0a, 0x1a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x61, 0x6e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x10,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x3e,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x4a, 0x6f, 0x62, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22,
	0xa9, 0x0a, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72,
	0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x45, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x65, 0x70, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x70, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x70,
	0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x65,
	0x70, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x4f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x70, 0x69, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x65, 0x70, 0x69, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xd2,
	0x04, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xdc, 0x01,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x07, 0x65,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x25, 0x0a, 0x0f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x34, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x28, 0x0a, 0x10, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x32, 0xb1, 0x09, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72,
	0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x2b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x61,
	0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x09, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61,
	0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
	0x65, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x6a, 0x6f,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_farm_job_proto_rawDescOnce sync.Once
	file_server_farm_job_proto_rawDescData = file_server_farm_job_proto_rawDesc
)

func file_server_farm_job_proto_rawDescGZIP() []byte {
	file_server_farm_job_proto_rawDescOnce.Do(func() {
		file_server_farm_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_farm_job_proto_rawDescData)
	})
	return file_server_farm_job_proto_rawDescData
}

var file_server_farm_job_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_server_farm_job_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_server_farm_job_proto_goTypes = []interface{}{
	(DebugSessionType)(0),                     // 0: InternalApi.ServerFarm.Job.DebugSessionType
	(Job_State)(0),                            // 1: InternalApi.ServerFarm.Job.Job.State
	(Job_Result)(0),                           // 2: InternalApi.ServerFarm.Job.Job.Result
	(ListRequest_Order)(0),                    // 3: InternalApi.ServerFarm.Job.ListRequest.Order
	(ListDebugSessionsRequest_Order)(0),       // 4: InternalApi.ServerFarm.Job.ListDebugSessionsRequest.Order
	(TotalExecutionTimeRequest_Interval)(0),   // 5: InternalApi.ServerFarm.Job.TotalExecutionTimeRequest.Interval
	(*DescribeRequest)(nil),                   // 6: InternalApi.ServerFarm.Job.DescribeRequest
	(*Job)(nil),                               // 7: InternalApi.ServerFarm.Job.Job
	(*DescribeResponse)(nil),                  // 8: InternalApi.ServerFarm.Job.DescribeResponse
	(*ListRequest)(nil),                       // 9: InternalApi.ServerFarm.Job.ListRequest
	(*ListResponse)(nil),                      // 10: InternalApi.ServerFarm.Job.ListResponse
	(*ListDebugSessionsRequest)(nil),          // 11: InternalApi.ServerFarm.Job.ListDebugSessionsRequest
	(*ListDebugSessionsResponse)(nil),         // 12: InternalApi.ServerFarm.Job.ListDebugSessionsResponse
	(*DebugSession)(nil),                      // 13: InternalApi.ServerFarm.Job.DebugSession
	(*CountRequest)(nil),                      // 14: InternalApi.ServerFarm.Job.CountRequest
	(*CountResponse)(nil),                     // 15: InternalApi.ServerFarm.Job.CountResponse
	(*CountByStateRequest)(nil),               // 16: InternalApi.ServerFarm.Job.CountByStateRequest
	(*CountByStateResponse)(nil),              // 17: InternalApi.ServerFarm.Job.CountByStateResponse
	(*TotalExecutionTimeRequest)(nil),         // 18: InternalApi.ServerFarm.Job.TotalExecutionTimeRequest
	(*TotalExecutionTimeResponse)(nil),        // 19: InternalApi.ServerFarm.Job.TotalExecutionTimeResponse
	(*StopRequest)(nil),                       // 20: InternalApi.ServerFarm.Job.StopRequest
	(*StopResponse)(nil),                      // 21: InternalApi.ServerFarm.Job.StopResponse
	(*GetAgentPayloadRequest)(nil),            // 22: InternalApi.ServerFarm.Job.GetAgentPayloadRequest
	(*GetAgentPayloadResponse)(nil),           // 23: InternalApi.ServerFarm.Job.GetAgentPayloadResponse
	(*CanDebugRequest)(nil),                   // 24: InternalApi.ServerFarm.Job.CanDebugRequest
	(*CanDebugResponse)(nil),                  // 25: InternalApi.ServerFarm.Job.CanDebugResponse
	(*CanAttachRequest)(nil),                  // 26: InternalApi.ServerFarm.Job.CanAttachRequest
	(*CanAttachResponse)(nil),                 // 27: InternalApi.ServerFarm.Job.CanAttachResponse
	(*CreateRequest)(nil),                     // 28: InternalApi.ServerFarm.Job.CreateRequest
	(*CreateResponse)(nil),                    // 29: InternalApi.ServerFarm.Job.CreateResponse
	(*JobSpec)(nil),                           // 30: InternalApi.ServerFarm.Job.JobSpec
	(*Job_Timeline)(nil),                      // 31: InternalApi.ServerFarm.Job.Job.Timeline
	(*CountByStateResponse_CountByState)(nil), // 32: InternalApi.ServerFarm.Job.CountByStateResponse.CountByState
	(*JobSpec_Agent)(nil),                     // 33: InternalApi.ServerFarm.Job.JobSpec.Agent
	(*JobSpec_Secret)(nil),                    // 34: InternalApi.ServerFarm.Job.JobSpec.Secret
	(*JobSpec_EnvVar)(nil),                    // 35: InternalApi.ServerFarm.Job.JobSpec.EnvVar
	(*JobSpec_File)(nil),                      // 36: InternalApi.ServerFarm.Job.JobSpec.File
	(*JobSpec_Agent_Machine)(nil),             // 37: InternalApi.ServerFarm.Job.JobSpec.Agent.Machine
	(*JobSpec_Agent_Container)(nil),           // 38: InternalApi.ServerFarm.Job.JobSpec.Agent.Container
	(*JobSpec_Agent_ImagePullSecret)(nil),     // 39: InternalApi.ServerFarm.Job.JobSpec.Agent.ImagePullSecret
	(*response_status.ResponseStatus)(nil),    // 40: InternalApi.ResponseStatus
	(*timestamp.Timestamp)(nil),               // 41: google.protobuf.Timestamp
}
var file_server_farm_job_proto_depIdxs = []int32{
	31, // 0: InternalApi.ServerFarm.Job.Job.timeline:type_name -> InternalApi.ServerFarm.Job.Job.Timeline
	1,  // 1: InternalApi.ServerFarm.Job.Job.state:type_name -> InternalApi.ServerFarm.Job.Job.State
	2,  // 2: InternalApi.ServerFarm.Job.Job.result:type_name -> InternalApi.ServerFarm.Job.Job.Result
	40, // 3: InternalApi.ServerFarm.Job.DescribeResponse.status:type_name -> InternalApi.ResponseStatus
	7,  // 4: InternalApi.ServerFarm.Job.DescribeResponse.job:type_name -> InternalApi.ServerFarm.Job.Job
	3,  // 5: InternalApi.ServerFarm.Job.ListRequest.order:type_name -> InternalApi.ServerFarm.Job.ListRequest.Order
	1,  // 6: InternalApi.ServerFarm.Job.ListRequest.job_states:type_name -> InternalApi.ServerFarm.Job.Job.State
	41, // 7: InternalApi.ServerFarm.Job.ListRequest.finished_at_gt:type_name -> google.protobuf.Timestamp
	41, // 8: InternalApi.ServerFarm.Job.ListRequest.finished_at_gte:type_name -> google.protobuf.Timestamp
	41, // 9: InternalApi.ServerFarm.Job.ListRequest.created_at_gte:type_name -> google.protobuf.Timestamp
	41, // 10: InternalApi.ServerFarm.Job.ListRequest.created_at_lte:type_name -> google.protobuf.Timestamp
	40, // 11: InternalApi.ServerFarm.Job.ListResponse.status:type_name -> InternalApi.ResponseStatus
	7,  // 12: InternalApi.ServerFarm.Job.ListResponse.jobs:type_name -> InternalApi.ServerFarm.Job.Job
	4,  // 13: InternalApi.ServerFarm.Job.ListDebugSessionsRequest.order:type_name -> InternalApi.ServerFarm.Job.ListDebugSessionsRequest.Order
	1,  // 14: InternalApi.ServerFarm.Job.ListDebugSessionsRequest.debug_session_states:type_name -> InternalApi.ServerFarm.Job.Job.State
	0,  // 15: InternalApi.ServerFarm.Job.ListDebugSessionsRequest.types:type_name -> InternalApi.ServerFarm.Job.DebugSessionType
	40, // 16: InternalApi.ServerFarm.Job.ListDebugSessionsResponse.status:type_name -> InternalApi.ResponseStatus
	13, // 17: InternalApi.ServerFarm.Job.ListDebugSessionsResponse.debug_sessions:type_name -> InternalApi.ServerFarm.Job.DebugSession
	7,  // 18: InternalApi.ServerFarm.Job.DebugSession.debug_session:type_name -> InternalApi.ServerFarm.Job.Job
	0,  // 19: InternalApi.ServerFarm.Job.DebugSession.type:type_name -> InternalApi.ServerFarm.Job.DebugSessionType
	7,  // 20: InternalApi.ServerFarm.Job.DebugSession.debugged_job:type_name -> InternalApi.ServerFarm.Job.Job
	1,  // 21: InternalApi.ServerFarm.Job.CountRequest.job_states:type_name -> InternalApi.ServerFarm.Job.Job.State
	41, // 22: InternalApi.ServerFarm.Job.CountRequest.finished_at_gte:type_name -> google.protobuf.Timestamp
	41, // 23: InternalApi.ServerFarm.Job.CountRequest.finished_at_lte:type_name -> google.protobuf.Timestamp
	40, // 24: InternalApi.ServerFarm.Job.CountResponse.status:type_name -> InternalApi.ResponseStatus
	1,  // 25: InternalApi.ServerFarm.Job.CountByStateRequest.states:type_name -> InternalApi.ServerFarm.Job.Job.State
	32, // 26: InternalApi.ServerFarm.Job.CountByStateResponse.counts:type_name -> InternalApi.ServerFarm.Job.CountByStateResponse.CountByState
	5,  // 27: InternalApi.ServerFarm.Job.TotalExecutionTimeRequest.interval:type_name -> InternalApi.ServerFarm.Job.TotalExecutionTimeRequest.Interval
	40, // 28: InternalApi.ServerFarm.Job.StopResponse.status:type_name -> InternalApi.ResponseStatus
	30, // 29: InternalApi.ServerFarm.Job.CreateRequest.job_spec:type_name -> InternalApi.ServerFarm.Job.JobSpec
	40, // 30: InternalApi.ServerFarm.Job.CreateResponse.status:type_name -> InternalApi.ResponseStatus
	7,  // 31: InternalApi.ServerFarm.Job.CreateResponse.job:type_name -> InternalApi.ServerFarm.Job.Job
	33, // 32: InternalApi.ServerFarm.Job.JobSpec.agent:type_name -> InternalApi.ServerFarm.Job.JobSpec.Agent
	34, // 33: InternalApi.ServerFarm.Job.JobSpec.secrets:type_name -> InternalApi.ServerFarm.Job.JobSpec.Secret
	35, // 34: InternalApi.ServerFarm.Job.JobSpec.env_vars:type_name -> InternalApi.ServerFarm.Job.JobSpec.EnvVar
	36, // 35: InternalApi.ServerFarm.Job.JobSpec.files:type_name -> InternalApi.ServerFarm.Job.JobSpec.File
	41, // 36: InternalApi.ServerFarm.Job.Job.Timeline.created_at:type_name -> google.protobuf.Timestamp
	41, // 37: InternalApi.ServerFarm.Job.Job.Timeline.enqueued_at:type_name -> google.protobuf.Timestamp
	41, // 38: InternalApi.ServerFarm.Job.Job.Timeline.started_at:type_name -> google.protobuf.Timestamp
	41, // 39: InternalApi.ServerFarm.Job.Job.Timeline.finished_at:type_name -> google.protobuf.Timestamp
	41, // 40: InternalApi.ServerFarm.Job.Job.Timeline.execution_started_at:type_name -> google.protobuf.Timestamp
	41, // 41: InternalApi.ServerFarm.Job.Job.Timeline.execution_finished_at:type_name -> google.protobuf.Timestamp
	1,  // 42: InternalApi.ServerFarm.Job.CountByStateResponse.CountByState.state:type_name -> InternalApi.ServerFarm.Job.Job.State
	37, // 43: InternalApi.ServerFarm.Job.JobSpec.Agent.machine:type_name -> InternalApi.ServerFarm.Job.JobSpec.Agent.Machine
	38, // 44: InternalApi.ServerFarm.Job.JobSpec.Agent.containers:type_name -> InternalApi.ServerFarm.Job.JobSpec.Agent.Container
	39, // 45: InternalApi.ServerFarm.Job.JobSpec.Agent.image_pull_secrets:type_name -> InternalApi.ServerFarm.Job.JobSpec.Agent.ImagePullSecret
	35, // 46: InternalApi.ServerFarm.Job.JobSpec.Agent.Container.env_vars:type_name -> InternalApi.ServerFarm.Job.JobSpec.EnvVar
	34, // 47: InternalApi.ServerFarm.Job.JobSpec.Agent.Container.secrets:type_name -> InternalApi.ServerFarm.Job.JobSpec.Secret
	6,  // 48: InternalApi.ServerFarm.Job.JobService.Describe:input_type -> InternalApi.ServerFarm.Job.DescribeRequest
	9,  // 49: InternalApi.ServerFarm.Job.JobService.List:input_type -> InternalApi.ServerFarm.Job.ListRequest
	11, // 50: InternalApi.ServerFarm.Job.JobService.ListDebugSessions:input_type -> InternalApi.ServerFarm.Job.ListDebugSessionsRequest
	14, // 51: InternalApi.ServerFarm.Job.JobService.Count:input_type -> InternalApi.ServerFarm.Job.CountRequest
	16, // 52: InternalApi.ServerFarm.Job.JobService.CountByState:input_type -> InternalApi.ServerFarm.Job.CountByStateRequest
	20, // 53: InternalApi.ServerFarm.Job.JobService.Stop:input_type -> InternalApi.ServerFarm.Job.StopRequest
	18, // 54: InternalApi.ServerFarm.Job.JobService.TotalExecutionTime:input_type -> InternalApi.ServerFarm.Job.TotalExecutionTimeRequest
	22, // 55: InternalApi.ServerFarm.Job.JobService.GetAgentPayload:input_type -> InternalApi.ServerFarm.Job.GetAgentPayloadRequest
	24, // 56: InternalApi.ServerFarm.Job.JobService.CanDebug:input_type -> InternalApi.ServerFarm.Job.CanDebugRequest
	26, // 57: InternalApi.ServerFarm.Job.JobService.CanAttach:input_type -> InternalApi.ServerFarm.Job.CanAttachRequest
	28, // 58: InternalApi.ServerFarm.Job.JobService.Create:input_type -> InternalApi.ServerFarm.Job.CreateRequest
	8,  // 59: InternalApi.ServerFarm.Job.JobService.Describe:output_type -> InternalApi.ServerFarm.Job.DescribeResponse
	10, // 60: InternalApi.ServerFarm.Job.JobService.List:output_type -> InternalApi.ServerFarm.Job.ListResponse
	12, // 61: InternalApi.ServerFarm.Job.JobService.ListDebugSessions:output_type -> InternalApi.ServerFarm.Job.ListDebugSessionsResponse
	15, // 62: InternalApi.ServerFarm.Job.JobService.Count:output_type -> InternalApi.ServerFarm.Job.CountResponse
	17, // 63: InternalApi.ServerFarm.Job.JobService.CountByState:output_type -> InternalApi.ServerFarm.Job.CountByStateResponse
	21, // 64: InternalApi.ServerFarm.Job.JobService.Stop:output_type -> InternalApi.ServerFarm.Job.StopResponse
	19, // 65: InternalApi.ServerFarm.Job.JobService.TotalExecutionTime:output_type -> InternalApi.ServerFarm.Job.TotalExecutionTimeResponse
	23, // 66: InternalApi.ServerFarm.Job.JobService.GetAgentPayload:output_type -> InternalApi.ServerFarm.Job.GetAgentPayloadResponse
	25, // 67: InternalApi.ServerFarm.Job.JobService.CanDebug:output_type -> InternalApi.ServerFarm.Job.CanDebugResponse
	27, // 68: InternalApi.ServerFarm.Job.JobService.CanAttach:output_type -> InternalApi.ServerFarm.Job.CanAttachResponse
	29, // 69: InternalApi.ServerFarm.Job.JobService.Create:output_type -> InternalApi.ServerFarm.Job.CreateResponse
	59, // [59:70] is the sub-list for method output_type
	48, // [48:59] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_server_farm_job_proto_init() }
func file_server_farm_job_proto_init() {
	if File_server_farm_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_farm_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDebugSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDebugSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalExecutionTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalExecutionTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanDebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanDebugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanAttachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Timeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByStateResponse_CountByState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_Agent_Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_Agent_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_farm_job_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec_Agent_ImagePullSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_farm_job_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_farm_job_proto_goTypes,
		DependencyIndexes: file_server_farm_job_proto_depIdxs,
		EnumInfos:         file_server_farm_job_proto_enumTypes,
		MessageInfos:      file_server_farm_job_proto_msgTypes,
	}.Build()
	File_server_farm_job_proto = out.File
	file_server_farm_job_proto_rawDesc = nil
	file_server_farm_job_proto_goTypes = nil
	file_server_farm_job_proto_depIdxs = nil
}
