# Semaphore CI/CD configuration for Go project
# This file defines the complete CI/CD pipeline for a Go application

# Version and name of the pipeline
version: v1.0
name: "\U0001F439 Go CI Pipeline"

# Agent configuration - defines the execution environment
agent:
  # Kubernetes-based machine type with templated values that will be filled at runtime
  machine:
    type: {{ machine_type }}  # Will be replaced with actual machine type from environment variables
    os_image: {{ os_image }}  # Empty for Docker compose style pipeline, will be set at runtime
  containers:
    - name: main
      image: 'golang:1.23'  # Using Golang 1.23 as the base Docker image

# Controls if the pipeline should stop on failure for the main branch
fail_fast:
  stop:
    when: branch = 'main'  # Stop all jobs if any job fails on main branch

# Defines auto-cancellation behavior for running and queued pipelines
auto_cancel:
  running:
    when: branch != 'main'  # Cancel running pipelines when a new commit is pushed (except on main)
  queued:
    when: branch = 'main'  # Cancel queued pipelines for main branch when a new commit is pushed

# Global configuration applied to all jobs
global_job_config:
  prologue:
    commands:
      - checkout  # Clone the repository
      - 'export PATH=$PATH:/usr/local/go/bin:/go/bin'  # Add Go binaries to PATH
      - 'export PATH=$PATH:/usr/local/go/bin:$(go env GOPATH)/bin'  # Add Go package binaries to PATH
      - cache restore  # Restore cached dependencies from previous runs
      - go mod download  # Download Go module dependencies
      - which go  # Verify Go installation path

# Pipeline blocks (stages) definition
blocks:
  # Setup block - installs and caches dependencies
  - name: "\U0001F6E0 Setup and Cache"
    dependencies: []  # No dependencies, runs first
    task:
      jobs:
        - name: Install Dependencies
          commands:
            - go install github.com/securego/gosec/v2/cmd/gosec@latest  # Install security scanner
            - go install github.com/mgechev/revive@latest  # Install linter
            - cache store  # Store the downloaded modules and tools in cache

  # Code Quality block - runs linters and code formatters
  - name: "\U0001F50D Code Quality"
    dependencies:
      - "\U0001F6E0 Setup and Cache"  # Depends on setup block
    task:
      jobs:
        - name: Lint and Vet
          commands:
            - revive ./...  # Run revive linter on all packages
            - go vet ./...  # Run Go's built-in static analyzer
            - gosec ./...  # Run security scanner
            - go fmt ./...  # Format code according to Go standards
      prologue:
        commands:
          - go install github.com/securego/gosec/v2/cmd/gosec@latest  # Install security scanner (redundant but ensures availability)
          - go install github.com/mgechev/revive@latest  # Install linter (redundant but ensures availability)
      epilogue:
        always:
          commands:
            - echo $(go env GOPATH)/bin  # Debug: show Go bin path
            - ls $(go env GOPATH)/bin | grep revive  # Debug: verify revive installation
            - which revive  # Debug: find revive binary location

  # Security Checks block - runs vulnerability scanning
  - name: "\U0001F510 Security Checks"
    dependencies:
      - "\U0001F6E0 Setup and Cache"  # Depends on setup block
    task:
      jobs:
        - name: Security Scan
          commands:
            - go install golang.org/x/vuln/cmd/govulncheck@latest  # Install vulnerability checker
            - govulncheck ./...  # Check for known vulnerabilities in dependencies

  # Test Suite block - runs unit tests and generates reports
  - name: "\U0001F9EA Test Suite"
    dependencies:
      - "\U0001F6E0 Setup and Cache"  # Depends on setup block
    task:
      env_vars:
        - name: GO_TEST_REPORT
          value: test-results.xml  # File to store test results
      jobs:
        - name: "\U0001F7E2 Go Test"
          commands:
            - go install gotest.tools/gotestsum@latest  # Install test runner with JUnit output support
            - 'export PATH=$PATH:$(go env GOPATH)/bin'  # Add Go package binaries to PATH
            - gotestsum --junitfile=$GO_TEST_REPORT -- -coverprofile=coverage.txt -covermode=atomic ./...  # Run tests with coverage
            - go tool cover -func=coverage.txt  # Display function coverage summary
      epilogue:
        always:
          commands:
            - test-results publish $GO_TEST_REPORT  # Upload test results to Semaphore

  # Build block - compiles application for different platforms
  - name: "\U0001F4E6 Build"
    dependencies:
      - "\U0001F50D Code Quality"  # Depends on code quality checks
      - "\U0001F510 Security Checks"  # Depends on security checks
      - "\U0001F9EA Test Suite"  # Depends on tests passing
    task:
      jobs:
        - name: "\U0001F528 Build Binary"
          commands:
            - GOOS=linux GOARCH=amd64 go build -o bin/app  # Build for Linux
            - artifact push workflow bin/app  # Store Linux binary as artifact
            - GOOS=darwin GOARCH=amd64 go build -o bin/app-darwin  # Build for MacOS
            - artifact push workflow bin/app-darwin  # Store MacOS binary as artifact

# Actions to perform after all pipeline blocks are completed
after_pipeline:
  task:
    jobs:
      - name: "Merge Reports \U0001F4CA"
        commands:
          - test-results gen-pipeline-report  # Generate consolidated test report