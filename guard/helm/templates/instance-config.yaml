{{- if not .Values.global.development.minimalDeployment }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}-instance-config"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}-instance-config"
  replicas: {{ .Values.api.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  template:
    metadata:
      name: "{{ .Chart.Name }}-instance-config"
      labels:
        app: "{{ .Chart.Name }}-instance-config"
        product: semaphoreci
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- range .Values.imagePullSecrets }}
        - name: {{ . }}
{{- end }}
{{- end }}
      automountServiceAccountToken: false
      volumes:
        - name: roles-volume
          configMap:
            defaultMode: 0644
            name: roles
            items:
            - key: roles.yaml
              path: roles.yaml
        - name: permissions-volume
          configMap:
            defaultMode: 0644
            name: permissions
            items:
            - key: permissions.yaml
              path: permissions.yaml
        - name: features-volume
          configMap:
            defaultMode: 0644
            name: features
            items:
            - key: features.yml
              path: features.yml
      initContainers:
{{ include "initContainers.all" . | indent 8 }}
      priorityClassName: medium-priority
      containers:
        - name: "{{ .Chart.Name }}-instance-config"
          image: "{{ .Values.global.image.registry }}/{{ .Values.image }}:{{ .Values.imageTag }}"
          command: ["bash", "-c"]
          args: ["bin/guard eval \"Guard.Release.create_and_migrate()\" && bin/guard start"]
          ports:
          - name: grpc
            containerPort: 50051
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          envFrom:
            - configMapRef:
                name: {{ .Values.global.internalApi.configMapName }}
            - configMapRef:
                name: {{ .Values.global.authentication.configMapName }}
            - secretRef:
                name: {{ include "secrets.authentication.name" . }}
          volumeMounts:
            - name: features-volume
              mountPath: "/app/features.yml"
              readOnly: true
              subPath: features.yml
          env:
            {{- include "env.db.elixir" . | indent 12 }}
            - name: FEATURE_YAML_PATH
              value: "/app/features.yml"
            - name: GRPC_API
              value: "true"
            - name: START_GPRC_GUARD_API
              value: "false"
            - name: START_GPRC_HEALTH_CHECK
              value: "true"
            - name: RABBIT_CONSUMER
              value: "false"
            - name: START_INSTANCE_CONFIG
              value: "true"
            - name: INSTANCE_CONFIG_API
              value: "true"
            - name: START_GRPC_INSTANCE_CONFIG_API
              value: "true"
            - name: START_FEATURE_PROVIDER
              value: "true"
            - name: OIDC_DISCOVERY_URL
              value: "$(KC_ROOT_URL)/realms/$(KC_REALM)/.well-known/openid-configuration"
            - name: OIDC_MANAGE_URL
              value: "$(KC_LOCAL_URL)/admin/realms/$(KC_REALM)"
{{- if .Values.global.development.skipTlsVerifyInternal }}
            - name: TLS_SKIP_VERIFY_INTERNAL
              value: "true"
{{- end }}
            - name: BASE_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.domain.configMapName }}
                  key: BASE_DOMAIN
            - name: POSTGRES_DB_SSL
              value: {{ .Values.global.database.ssl | quote }}
            - name: POSTGRES_DB_NAME
              value: guard
            - name: MIGRATIONS_PATH
              value: "/app/instance_config_repo/migrations"
            - name: POSTGRES_GIT_INTEGRATION_DB_NAME
              value: integration_configurations
            - name: POSTGRES_DB_POOL_SIZE
              value: {{ .Values.api.dbPoolSize | quote }}
            - name: AMQP_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.rabbitmq.secretName }}
                  key: amqp-url
            - name: LOG_LEVEL
              value: {{ .Values.api.logging.level | quote }}
            - name: ENCRYPTOR_URL
              value: "localhost:50052"

{{- if .Values.global.statsd.enabled }}
            - name: METRICS_NAMESPACE
              value: {{ .Values.global.statsd.metricsNamespace }}
{{- end }}

{{- if .Values.api.resources }}
          resources:
{{ toYaml .Values.api.resources | indent 12 }}
{{- end }}

          startupProbe:
            grpc:
              port: 50051
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
          readinessProbe:
            grpc:
              port: 50051
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            grpc:
              port: 50051
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

        - name: {{ .Chart.Name }}-encryptor
          image: "{{ .Values.global.image.registry }}/{{ .Values.global.sidecarEncryptor.image }}:{{ .Values.global.sidecarEncryptor.imageTag }}"
          ports:
            - name: grpc-port
              containerPort: 50052
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          env:
            - name: START_API
              value: "yes"
            - name: GRPC_API_PORT
              value: "50052"
            - name: ENCRYPTOR_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "secrets.encryption.name" . }}
                  key: key
          startupProbe:
            grpc:
              port: 50052
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
          readinessProbe:
            grpc:
              port: 50052
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            grpc:
              port: 50052
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
{{- if .Values.sidecarEncryptor.resources }}
          resources:
{{ toYaml .Values.sidecarEncryptor.resources | indent 12 }}
{{- end }}

{{- if .Values.global.statsd.enabled }}
        - name: {{ .Chart.Name }}-statsd
          image: "{{ .Values.global.image.registry }}/{{ .Values.global.statsd.image }}:{{ .Values.global.statsd.imageTag }}"
          env:
            - name: FLUSH_INTERVAL
              value: "60000"
            - name: GRAPHITE_HOST
              value: {{ .Values.global.statsd.graphiteHost }}
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
{{- if .Values.statsd.resources }}
          resources:
{{ toYaml .Values.statsd.resources | indent 13 }}
{{- end }}
{{- end }}
{{- end }}
