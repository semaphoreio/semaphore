// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.17.3
// source: semaphore/notifications.v1alpha.proto

package semaphore_notifications_v1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Notification_Spec_Rule_Filter_State int32

const (
	Notification_Spec_Rule_Filter_STARTED  Notification_Spec_Rule_Filter_State = 0
	Notification_Spec_Rule_Filter_FINISHED Notification_Spec_Rule_Filter_State = 1
)

// Enum value maps for Notification_Spec_Rule_Filter_State.
var (
	Notification_Spec_Rule_Filter_State_name = map[int32]string{
		0: "STARTED",
		1: "FINISHED",
	}
	Notification_Spec_Rule_Filter_State_value = map[string]int32{
		"STARTED":  0,
		"FINISHED": 1,
	}
)

func (x Notification_Spec_Rule_Filter_State) Enum() *Notification_Spec_Rule_Filter_State {
	p := new(Notification_Spec_Rule_Filter_State)
	*p = x
	return p
}

func (x Notification_Spec_Rule_Filter_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Spec_Rule_Filter_State) Descriptor() protoreflect.EnumDescriptor {
	return file_semaphore_notifications_v1alpha_proto_enumTypes[0].Descriptor()
}

func (Notification_Spec_Rule_Filter_State) Type() protoreflect.EnumType {
	return &file_semaphore_notifications_v1alpha_proto_enumTypes[0]
}

func (x Notification_Spec_Rule_Filter_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Spec_Rule_Filter_State.Descriptor instead.
func (Notification_Spec_Rule_Filter_State) EnumDescriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

type Notification_Spec_Rule_Notify_Status int32

const (
	Notification_Spec_Rule_Notify_ACTIVE   Notification_Spec_Rule_Notify_Status = 0
	Notification_Spec_Rule_Notify_INACTIVE Notification_Spec_Rule_Notify_Status = 1
)

// Enum value maps for Notification_Spec_Rule_Notify_Status.
var (
	Notification_Spec_Rule_Notify_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Notification_Spec_Rule_Notify_Status_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Notification_Spec_Rule_Notify_Status) Enum() *Notification_Spec_Rule_Notify_Status {
	p := new(Notification_Spec_Rule_Notify_Status)
	*p = x
	return p
}

func (x Notification_Spec_Rule_Notify_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification_Spec_Rule_Notify_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_semaphore_notifications_v1alpha_proto_enumTypes[1].Descriptor()
}

func (Notification_Spec_Rule_Notify_Status) Type() protoreflect.EnumType {
	return &file_semaphore_notifications_v1alpha_proto_enumTypes[1]
}

func (x Notification_Spec_Rule_Notify_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification_Spec_Rule_Notify_Status.Descriptor instead.
func (Notification_Spec_Rule_Notify_Status) EnumDescriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

type ListNotificationsRequest_Order int32

const (
	ListNotificationsRequest_BY_NAME_ASC ListNotificationsRequest_Order = 0
)

// Enum value maps for ListNotificationsRequest_Order.
var (
	ListNotificationsRequest_Order_name = map[int32]string{
		0: "BY_NAME_ASC",
	}
	ListNotificationsRequest_Order_value = map[string]int32{
		"BY_NAME_ASC": 0,
	}
)

func (x ListNotificationsRequest_Order) Enum() *ListNotificationsRequest_Order {
	p := new(ListNotificationsRequest_Order)
	*p = x
	return p
}

func (x ListNotificationsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListNotificationsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_semaphore_notifications_v1alpha_proto_enumTypes[2].Descriptor()
}

func (ListNotificationsRequest_Order) Type() protoreflect.EnumType {
	return &file_semaphore_notifications_v1alpha_proto_enumTypes[2]
}

func (x ListNotificationsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListNotificationsRequest_Order.Descriptor instead.
func (ListNotificationsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{1, 0}
}

type Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *Notification_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *Notification_Spec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Notification_Status   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0}
}

func (x *Notification) GetMetadata() *Notification_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Notification) GetSpec() *Notification_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Notification) GetStatus() *Notification_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListNotificationsRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	PageSize      int32                          `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                         `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Order         ListNotificationsRequest_Order `protobuf:"varint,3,opt,name=order,proto3,enum=semaphore.notifications.v1alpha.ListNotificationsRequest_Order" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNotificationsRequest) Reset() {
	*x = ListNotificationsRequest{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotificationsRequest) ProtoMessage() {}

func (x *ListNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotificationsRequest.ProtoReflect.Descriptor instead.
func (*ListNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{1}
}

func (x *ListNotificationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNotificationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNotificationsRequest) GetOrder() ListNotificationsRequest_Order {
	if x != nil {
		return x.Order
	}
	return ListNotificationsRequest_BY_NAME_ASC
}

type ListNotificationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notifications []*Notification        `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNotificationsResponse) Reset() {
	*x = ListNotificationsResponse{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotificationsResponse) ProtoMessage() {}

func (x *ListNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotificationsResponse.ProtoReflect.Descriptor instead.
func (*ListNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{2}
}

func (x *ListNotificationsResponse) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *ListNotificationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetNotificationRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NotificationIdOrName string                 `protobuf:"bytes,1,opt,name=notification_id_or_name,json=notificationIdOrName,proto3" json:"notification_id_or_name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetNotificationRequest) Reset() {
	*x = GetNotificationRequest{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationRequest) ProtoMessage() {}

func (x *GetNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationRequest) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{3}
}

func (x *GetNotificationRequest) GetNotificationIdOrName() string {
	if x != nil {
		return x.NotificationIdOrName
	}
	return ""
}

type UpdateNotificationRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NotificationIdOrName string                 `protobuf:"bytes,1,opt,name=notification_id_or_name,json=notificationIdOrName,proto3" json:"notification_id_or_name,omitempty"`
	Notification         *Notification          `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateNotificationRequest) Reset() {
	*x = UpdateNotificationRequest{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationRequest) ProtoMessage() {}

func (x *UpdateNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotificationRequest) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNotificationRequest) GetNotificationIdOrName() string {
	if x != nil {
		return x.NotificationIdOrName
	}
	return ""
}

func (x *UpdateNotificationRequest) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type DeleteNotificationRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NotificationIdOrName string                 `protobuf:"bytes,1,opt,name=notification_id_or_name,json=notificationIdOrName,proto3" json:"notification_id_or_name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DeleteNotificationRequest) Reset() {
	*x = DeleteNotificationRequest{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotificationRequest) ProtoMessage() {}

func (x *DeleteNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotificationRequest) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNotificationRequest) GetNotificationIdOrName() string {
	if x != nil {
		return x.NotificationIdOrName
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{6}
}

type Notification_Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime    int64                  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // unix timestamp of creation
	UpdateTime    int64                  `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // unix timestamp of last update
	CreatorId     string                 `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Metadata) Reset() {
	*x = Notification_Metadata{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Metadata) ProtoMessage() {}

func (x *Notification_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Metadata.ProtoReflect.Descriptor instead.
func (*Notification_Metadata) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Notification_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notification_Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification_Metadata) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Notification_Metadata) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Notification_Metadata) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type Notification_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rules must have at least one element. Maximal number of rules: 20.
	Rules         []*Notification_Spec_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec) Reset() {
	*x = Notification_Spec{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec) ProtoMessage() {}

func (x *Notification_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec.ProtoReflect.Descriptor instead.
func (*Notification_Spec) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Notification_Spec) GetRules() []*Notification_Spec_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Notification_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Lists the 100 most recent notification failures
	//
	// examples:
	//
	//	sending webhook to https://my.service/semaphore failed with http timeout after 500ms
	Failures      []*Notification_Status_Failure `protobuf:"bytes,1,rep,name=failures,proto3" json:"failures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Status) Reset() {
	*x = Notification_Status{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Status) ProtoMessage() {}

func (x *Notification_Status) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Status.ProtoReflect.Descriptor instead.
func (*Notification_Status) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Notification_Status) GetFailures() []*Notification_Status_Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

type Notification_Spec_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [optional] name of the rule
	Name          string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Filter        *Notification_Spec_Rule_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Notify        *Notification_Spec_Rule_Notify `protobuf:"bytes,3,opt,name=notify,proto3" json:"notify,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule) Reset() {
	*x = Notification_Spec_Rule{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule) ProtoMessage() {}

func (x *Notification_Spec_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Notification_Spec_Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notification_Spec_Rule) GetFilter() *Notification_Spec_Rule_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Notification_Spec_Rule) GetNotify() *Notification_Spec_Rule_Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

type Notification_Spec_Rule_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of projects to trigger this rule.
	// By default: No project.
	//
	// Rule is invalid if list of projects is empty.
	//
	// Examples:
	//   - "cli" - strictly match the CLI project
	//   - "/^s2-*/" - regex mathes projects that start with 's2-' prefix
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// List of branches to trigger this rule.
	// Default: all branches.
	//
	// Examples:
	//   - "master" - strictly match the master branch
	//   - "/^release-*/" - regex matches branches that start with 'release-' prefix
	Branches []string `protobuf:"bytes,2,rep,name=branches,proto3" json:"branches,omitempty"`
	// List of pipelines to trigger this rule.
	// Default only: .semaphore/semaphore.yml.
	//
	// Examples:
	//   - ".seamphore/semaphore.yml" - strictly match the .semaphore/semaphore.yml pipeline
	//   - "/^.semaphore/stg-*/" - regex matches pipelines that start with '.semaphore/stg-' prefix
	Pipelines []string `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// List of blocks to trigger this rule.
	// Default: no block.
	//
	// Examples:
	//   - "tests" - strictly match the tests block in pipelines
	//   - "/^unit-*/" - regex matches blocks that start with 'unit-' prefix
	Blocks []string `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
	// List of states that trigger this rule.
	// Default: only FINISHED.
	States []Notification_Spec_Rule_Filter_State `protobuf:"varint,5,rep,packed,name=states,proto3,enum=semaphore.notifications.v1alpha.Notification_Spec_Rule_Filter_State" json:"states,omitempty"`
	// List of results to trigger this rule.
	// Default: every result.
	Results []string `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	// List of tags to trigger this rule.
	// Default: all tags.
	//
	// Examples:
	//   - "v1.0.0" - strictly match the v1.0.0 tag
	//   - "/^v\\d+\\.\\d+\\.\\d+$/" - regex matches semantic version tags
	//   - "release-*" - wildcard match for tags starting with 'release-'
	Tags          []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule_Filter) Reset() {
	*x = Notification_Spec_Rule_Filter{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule_Filter) ProtoMessage() {}

func (x *Notification_Spec_Rule_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule_Filter.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule_Filter) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Notification_Spec_Rule_Filter) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetPipelines() []string {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetBlocks() []string {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetStates() []Notification_Spec_Rule_Filter_State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Notification_Spec_Rule_Filter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Notification_Spec_Rule_Notify struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Slack         *Notification_Spec_Rule_Notify_Slack   `protobuf:"bytes,2,opt,name=slack,proto3" json:"slack,omitempty"`
	Email         *Notification_Spec_Rule_Notify_Email   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Webhook       *Notification_Spec_Rule_Notify_Webhook `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule_Notify) Reset() {
	*x = Notification_Spec_Rule_Notify{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule_Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule_Notify) ProtoMessage() {}

func (x *Notification_Spec_Rule_Notify) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule_Notify.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule_Notify) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Notification_Spec_Rule_Notify) GetSlack() *Notification_Spec_Rule_Notify_Slack {
	if x != nil {
		return x.Slack
	}
	return nil
}

func (x *Notification_Spec_Rule_Notify) GetEmail() *Notification_Spec_Rule_Notify_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Notification_Spec_Rule_Notify) GetWebhook() *Notification_Spec_Rule_Notify_Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

// Description of the slack notification.
// [required] endpoint - slack webhook to hit
// [optional] channels - list of channels, default: taken from endpoint
// [optional] message - default: TODO
// [optional] status - activity status. Default: ACTIVE
type Notification_Spec_Rule_Notify_Slack struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Endpoint      string                               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Channels      []string                             `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	Message       string                               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Status        Notification_Spec_Rule_Notify_Status `protobuf:"varint,4,opt,name=status,proto3,enum=semaphore.notifications.v1alpha.Notification_Spec_Rule_Notify_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule_Notify_Slack) Reset() {
	*x = Notification_Spec_Rule_Notify_Slack{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule_Notify_Slack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule_Notify_Slack) ProtoMessage() {}

func (x *Notification_Spec_Rule_Notify_Slack) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule_Notify_Slack.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule_Notify_Slack) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *Notification_Spec_Rule_Notify_Slack) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Slack) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Notification_Spec_Rule_Notify_Slack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Slack) GetStatus() Notification_Spec_Rule_Notify_Status {
	if x != nil {
		return x.Status
	}
	return Notification_Spec_Rule_Notify_ACTIVE
}

// Description of the email notification.
// [optional] subject - the subject line of the email. Default: TODO
// [required] cc - email addresses in the CC field. At least one is required.
// [optional] bcc - email addresses in the BCC field.
// [optional] content - content of the email. Default: TODO
// [optional] status - activity status. Default: ACTIVE
type Notification_Spec_Rule_Notify_Email struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Subject       string                               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Cc            []string                             `protobuf:"bytes,2,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc           []string                             `protobuf:"bytes,3,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Content       string                               `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Status        Notification_Spec_Rule_Notify_Status `protobuf:"varint,5,opt,name=status,proto3,enum=semaphore.notifications.v1alpha.Notification_Spec_Rule_Notify_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule_Notify_Email) Reset() {
	*x = Notification_Spec_Rule_Notify_Email{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule_Notify_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule_Notify_Email) ProtoMessage() {}

func (x *Notification_Spec_Rule_Notify_Email) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule_Notify_Email.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule_Notify_Email) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 1, 1}
}

func (x *Notification_Spec_Rule_Notify_Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Email) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Notification_Spec_Rule_Notify_Email) GetBcc() []string {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Notification_Spec_Rule_Notify_Email) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Email) GetStatus() Notification_Spec_Rule_Notify_Status {
	if x != nil {
		return x.Status
	}
	return Notification_Spec_Rule_Notify_ACTIVE
}

// Description of the email notification.
// [required] endpoint - HTTP endpoint to hit.
// [optional] timeout - delivery timeout. Defualt: 500ms. Must be in range (0..1000)ms.
// [optional] action - http verb to use. Default: POST.
// [optional] retries - number of times to retry delivery. Default: 1. Muse be in range (1..3).
// [optional] status - activity status. Default: ACTIVE
// [optional] secret - name of a Semaphore secret, which will be used to sign the payload.
type Notification_Spec_Rule_Notify_Webhook struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Endpoint      string                               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Timeout       int32                                `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Action        string                               `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Retries       int32                                `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Status        Notification_Spec_Rule_Notify_Status `protobuf:"varint,5,opt,name=status,proto3,enum=semaphore.notifications.v1alpha.Notification_Spec_Rule_Notify_Status" json:"status,omitempty"`
	Secret        string                               `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Spec_Rule_Notify_Webhook) Reset() {
	*x = Notification_Spec_Rule_Notify_Webhook{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Spec_Rule_Notify_Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Spec_Rule_Notify_Webhook) ProtoMessage() {}

func (x *Notification_Spec_Rule_Notify_Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Spec_Rule_Notify_Webhook.ProtoReflect.Descriptor instead.
func (*Notification_Spec_Rule_Notify_Webhook) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 1, 0, 1, 2}
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetStatus() Notification_Spec_Rule_Notify_Status {
	if x != nil {
		return x.Status
	}
	return Notification_Spec_Rule_Notify_ACTIVE
}

func (x *Notification_Spec_Rule_Notify_Webhook) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

// A failure contains a timestamp and a description of a failure
type Notification_Status_Failure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`      // unix timestamp of failure occurance
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // message describing the failure
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification_Status_Failure) Reset() {
	*x = Notification_Status_Failure{}
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification_Status_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_Status_Failure) ProtoMessage() {}

func (x *Notification_Status_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_semaphore_notifications_v1alpha_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_Status_Failure.ProtoReflect.Descriptor instead.
func (*Notification_Status_Failure) Descriptor() ([]byte, []int) {
	return file_semaphore_notifications_v1alpha_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Notification_Status_Failure) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Notification_Status_Failure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_semaphore_notifications_v1alpha_proto protoreflect.FileDescriptor

const file_semaphore_notifications_v1alpha_proto_rawDesc = "" +
	"\n" +
	"%semaphore/notifications.v1alpha.proto\x12\x1fsemaphore.notifications.v1alpha\"\xa4\x10\n" +
	"\fNotification\x12R\n" +
	"\bmetadata\x18\x01 \x01(\v26.semaphore.notifications.v1alpha.Notification.MetadataR\bmetadata\x12F\n" +
	"\x04spec\x18\x02 \x01(\v22.semaphore.notifications.v1alpha.Notification.SpecR\x04spec\x12L\n" +
	"\x06status\x18\x03 \x01(\v24.semaphore.notifications.v1alpha.Notification.StatusR\x06status\x1a\x8f\x01\n" +
	"\bMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x1f\n" +
	"\vcreate_time\x18\x03 \x01(\x03R\n" +
	"createTime\x12\x1f\n" +
	"\vupdate_time\x18\x04 \x01(\x03R\n" +
	"updateTime\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x05 \x01(\tR\tcreatorId\x1a\xf9\v\n" +
	"\x04Spec\x12M\n" +
	"\x05rules\x18\x01 \x03(\v27.semaphore.notifications.v1alpha.Notification.Spec.RuleR\x05rules\x1a\xa1\v\n" +
	"\x04Rule\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12V\n" +
	"\x06filter\x18\x02 \x01(\v2>.semaphore.notifications.v1alpha.Notification.Spec.Rule.FilterR\x06filter\x12V\n" +
	"\x06notify\x18\x03 \x01(\v2>.semaphore.notifications.v1alpha.Notification.Spec.Rule.NotifyR\x06notify\x1a\xa6\x02\n" +
	"\x06Filter\x12\x1a\n" +
	"\bprojects\x18\x01 \x03(\tR\bprojects\x12\x1a\n" +
	"\bbranches\x18\x02 \x03(\tR\bbranches\x12\x1c\n" +
	"\tpipelines\x18\x03 \x03(\tR\tpipelines\x12\x16\n" +
	"\x06blocks\x18\x04 \x03(\tR\x06blocks\x12\\\n" +
	"\x06states\x18\x05 \x03(\x0e2D.semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter.StateR\x06states\x12\x18\n" +
	"\aresults\x18\x06 \x03(\tR\aresults\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\"\"\n" +
	"\x05State\x12\v\n" +
	"\aSTARTED\x10\x00\x12\f\n" +
	"\bFINISHED\x10\x01\x1a\xab\a\n" +
	"\x06Notify\x12Z\n" +
	"\x05slack\x18\x02 \x01(\v2D.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.SlackR\x05slack\x12Z\n" +
	"\x05email\x18\x03 \x01(\v2D.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.EmailR\x05email\x12`\n" +
	"\awebhook\x18\x04 \x01(\v2F.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.WebhookR\awebhook\x1a\xb8\x01\n" +
	"\x05Slack\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x1a\n" +
	"\bchannels\x18\x02 \x03(\tR\bchannels\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12]\n" +
	"\x06status\x18\x04 \x01(\x0e2E.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.StatusR\x06status\x1a\xbc\x01\n" +
	"\x05Email\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12\x0e\n" +
	"\x02cc\x18\x02 \x03(\tR\x02cc\x12\x10\n" +
	"\x03bcc\x18\x03 \x03(\tR\x03bcc\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12]\n" +
	"\x06status\x18\x05 \x01(\x0e2E.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.StatusR\x06status\x1a\xe8\x01\n" +
	"\aWebhook\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x18\n" +
	"\atimeout\x18\x02 \x01(\x05R\atimeout\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12\x18\n" +
	"\aretries\x18\x04 \x01(\x05R\aretries\x12]\n" +
	"\x06status\x18\x05 \x01(\x0e2E.semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.StatusR\x06status\x12\x16\n" +
	"\x06secret\x18\x06 \x01(\tR\x06secret\"\"\n" +
	"\x06Status\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x00\x12\f\n" +
	"\bINACTIVE\x10\x01\x1a\x9b\x01\n" +
	"\x06Status\x12X\n" +
	"\bfailures\x18\x01 \x03(\v2<.semaphore.notifications.v1alpha.Notification.Status.FailureR\bfailures\x1a7\n" +
	"\aFailure\x12\x12\n" +
	"\x04time\x18\x01 \x01(\x03R\x04time\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xc7\x01\n" +
	"\x18ListNotificationsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12U\n" +
	"\x05order\x18\x03 \x01(\x0e2?.semaphore.notifications.v1alpha.ListNotificationsRequest.OrderR\x05order\"\x18\n" +
	"\x05Order\x12\x0f\n" +
	"\vBY_NAME_ASC\x10\x00\"\x98\x01\n" +
	"\x19ListNotificationsResponse\x12S\n" +
	"\rnotifications\x18\x01 \x03(\v2-.semaphore.notifications.v1alpha.NotificationR\rnotifications\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"O\n" +
	"\x16GetNotificationRequest\x125\n" +
	"\x17notification_id_or_name\x18\x01 \x01(\tR\x14notificationIdOrName\"\xa5\x01\n" +
	"\x19UpdateNotificationRequest\x125\n" +
	"\x17notification_id_or_name\x18\x01 \x01(\tR\x14notificationIdOrName\x12Q\n" +
	"\fnotification\x18\x02 \x01(\v2-.semaphore.notifications.v1alpha.NotificationR\fnotification\"R\n" +
	"\x19DeleteNotificationRequest\x125\n" +
	"\x17notification_id_or_name\x18\x01 \x01(\tR\x14notificationIdOrName\"\a\n" +
	"\x05Empty2\x89\x05\n" +
	"\x10NotificationsApi\x12\x8a\x01\n" +
	"\x11ListNotifications\x129.semaphore.notifications.v1alpha.ListNotificationsRequest\x1a:.semaphore.notifications.v1alpha.ListNotificationsResponse\x12y\n" +
	"\x0fGetNotification\x127.semaphore.notifications.v1alpha.GetNotificationRequest\x1a-.semaphore.notifications.v1alpha.Notification\x12r\n" +
	"\x12CreateNotification\x12-.semaphore.notifications.v1alpha.Notification\x1a-.semaphore.notifications.v1alpha.Notification\x12\x7f\n" +
	"\x12UpdateNotification\x12:.semaphore.notifications.v1alpha.UpdateNotificationRequest\x1a-.semaphore.notifications.v1alpha.Notification\x12x\n" +
	"\x12DeleteNotification\x12:.semaphore.notifications.v1alpha.DeleteNotificationRequest\x1a&.semaphore.notifications.v1alpha.EmptyB9Z7./notifications.v1alpha;semaphore_notifications_v1alphab\x06proto3"

var (
	file_semaphore_notifications_v1alpha_proto_rawDescOnce sync.Once
	file_semaphore_notifications_v1alpha_proto_rawDescData []byte
)

func file_semaphore_notifications_v1alpha_proto_rawDescGZIP() []byte {
	file_semaphore_notifications_v1alpha_proto_rawDescOnce.Do(func() {
		file_semaphore_notifications_v1alpha_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_semaphore_notifications_v1alpha_proto_rawDesc), len(file_semaphore_notifications_v1alpha_proto_rawDesc)))
	})
	return file_semaphore_notifications_v1alpha_proto_rawDescData
}

var file_semaphore_notifications_v1alpha_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_semaphore_notifications_v1alpha_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_semaphore_notifications_v1alpha_proto_goTypes = []any{
	(Notification_Spec_Rule_Filter_State)(0),      // 0: semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter.State
	(Notification_Spec_Rule_Notify_Status)(0),     // 1: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Status
	(ListNotificationsRequest_Order)(0),           // 2: semaphore.notifications.v1alpha.ListNotificationsRequest.Order
	(*Notification)(nil),                          // 3: semaphore.notifications.v1alpha.Notification
	(*ListNotificationsRequest)(nil),              // 4: semaphore.notifications.v1alpha.ListNotificationsRequest
	(*ListNotificationsResponse)(nil),             // 5: semaphore.notifications.v1alpha.ListNotificationsResponse
	(*GetNotificationRequest)(nil),                // 6: semaphore.notifications.v1alpha.GetNotificationRequest
	(*UpdateNotificationRequest)(nil),             // 7: semaphore.notifications.v1alpha.UpdateNotificationRequest
	(*DeleteNotificationRequest)(nil),             // 8: semaphore.notifications.v1alpha.DeleteNotificationRequest
	(*Empty)(nil),                                 // 9: semaphore.notifications.v1alpha.Empty
	(*Notification_Metadata)(nil),                 // 10: semaphore.notifications.v1alpha.Notification.Metadata
	(*Notification_Spec)(nil),                     // 11: semaphore.notifications.v1alpha.Notification.Spec
	(*Notification_Status)(nil),                   // 12: semaphore.notifications.v1alpha.Notification.Status
	(*Notification_Spec_Rule)(nil),                // 13: semaphore.notifications.v1alpha.Notification.Spec.Rule
	(*Notification_Spec_Rule_Filter)(nil),         // 14: semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter
	(*Notification_Spec_Rule_Notify)(nil),         // 15: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify
	(*Notification_Spec_Rule_Notify_Slack)(nil),   // 16: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Slack
	(*Notification_Spec_Rule_Notify_Email)(nil),   // 17: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Email
	(*Notification_Spec_Rule_Notify_Webhook)(nil), // 18: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Webhook
	(*Notification_Status_Failure)(nil),           // 19: semaphore.notifications.v1alpha.Notification.Status.Failure
}
var file_semaphore_notifications_v1alpha_proto_depIdxs = []int32{
	10, // 0: semaphore.notifications.v1alpha.Notification.metadata:type_name -> semaphore.notifications.v1alpha.Notification.Metadata
	11, // 1: semaphore.notifications.v1alpha.Notification.spec:type_name -> semaphore.notifications.v1alpha.Notification.Spec
	12, // 2: semaphore.notifications.v1alpha.Notification.status:type_name -> semaphore.notifications.v1alpha.Notification.Status
	2,  // 3: semaphore.notifications.v1alpha.ListNotificationsRequest.order:type_name -> semaphore.notifications.v1alpha.ListNotificationsRequest.Order
	3,  // 4: semaphore.notifications.v1alpha.ListNotificationsResponse.notifications:type_name -> semaphore.notifications.v1alpha.Notification
	3,  // 5: semaphore.notifications.v1alpha.UpdateNotificationRequest.notification:type_name -> semaphore.notifications.v1alpha.Notification
	13, // 6: semaphore.notifications.v1alpha.Notification.Spec.rules:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule
	19, // 7: semaphore.notifications.v1alpha.Notification.Status.failures:type_name -> semaphore.notifications.v1alpha.Notification.Status.Failure
	14, // 8: semaphore.notifications.v1alpha.Notification.Spec.Rule.filter:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter
	15, // 9: semaphore.notifications.v1alpha.Notification.Spec.Rule.notify:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify
	0,  // 10: semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter.states:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Filter.State
	16, // 11: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.slack:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Slack
	17, // 12: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.email:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Email
	18, // 13: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.webhook:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Webhook
	1,  // 14: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Slack.status:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Status
	1,  // 15: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Email.status:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Status
	1,  // 16: semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Webhook.status:type_name -> semaphore.notifications.v1alpha.Notification.Spec.Rule.Notify.Status
	4,  // 17: semaphore.notifications.v1alpha.NotificationsApi.ListNotifications:input_type -> semaphore.notifications.v1alpha.ListNotificationsRequest
	6,  // 18: semaphore.notifications.v1alpha.NotificationsApi.GetNotification:input_type -> semaphore.notifications.v1alpha.GetNotificationRequest
	3,  // 19: semaphore.notifications.v1alpha.NotificationsApi.CreateNotification:input_type -> semaphore.notifications.v1alpha.Notification
	7,  // 20: semaphore.notifications.v1alpha.NotificationsApi.UpdateNotification:input_type -> semaphore.notifications.v1alpha.UpdateNotificationRequest
	8,  // 21: semaphore.notifications.v1alpha.NotificationsApi.DeleteNotification:input_type -> semaphore.notifications.v1alpha.DeleteNotificationRequest
	5,  // 22: semaphore.notifications.v1alpha.NotificationsApi.ListNotifications:output_type -> semaphore.notifications.v1alpha.ListNotificationsResponse
	3,  // 23: semaphore.notifications.v1alpha.NotificationsApi.GetNotification:output_type -> semaphore.notifications.v1alpha.Notification
	3,  // 24: semaphore.notifications.v1alpha.NotificationsApi.CreateNotification:output_type -> semaphore.notifications.v1alpha.Notification
	3,  // 25: semaphore.notifications.v1alpha.NotificationsApi.UpdateNotification:output_type -> semaphore.notifications.v1alpha.Notification
	9,  // 26: semaphore.notifications.v1alpha.NotificationsApi.DeleteNotification:output_type -> semaphore.notifications.v1alpha.Empty
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_semaphore_notifications_v1alpha_proto_init() }
func file_semaphore_notifications_v1alpha_proto_init() {
	if File_semaphore_notifications_v1alpha_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_semaphore_notifications_v1alpha_proto_rawDesc), len(file_semaphore_notifications_v1alpha_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_semaphore_notifications_v1alpha_proto_goTypes,
		DependencyIndexes: file_semaphore_notifications_v1alpha_proto_depIdxs,
		EnumInfos:         file_semaphore_notifications_v1alpha_proto_enumTypes,
		MessageInfos:      file_semaphore_notifications_v1alpha_proto_msgTypes,
	}.Build()
	File_semaphore_notifications_v1alpha_proto = out.File
	file_semaphore_notifications_v1alpha_proto_goTypes = nil
	file_semaphore_notifications_v1alpha_proto_depIdxs = nil
}
