// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.3.0
// source: audit.proto

package audit

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// export stream provider in audit service
type StreamProvider int32

const (
	StreamProvider_S3 StreamProvider = 0
)

// Enum value maps for StreamProvider.
var (
	StreamProvider_name = map[int32]string{
		0: "S3",
	}
	StreamProvider_value = map[string]int32{
		"S3": 0,
	}
)

func (x StreamProvider) Enum() *StreamProvider {
	p := new(StreamProvider)
	*p = x
	return p
}

func (x StreamProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[0].Descriptor()
}

func (StreamProvider) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[0]
}

func (x StreamProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamProvider.Descriptor instead.
func (StreamProvider) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0}
}

type StreamStatus int32

const (
	StreamStatus_ACTIVE StreamStatus = 0
	StreamStatus_PAUSED StreamStatus = 1
)

// Enum value maps for StreamStatus.
var (
	StreamStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "PAUSED",
	}
	StreamStatus_value = map[string]int32{
		"ACTIVE": 0,
		"PAUSED": 1,
	}
)

func (x StreamStatus) Enum() *StreamStatus {
	p := new(StreamStatus)
	*p = x
	return p
}

func (x StreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[1].Descriptor()
}

func (StreamStatus) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[1]
}

func (x StreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStatus.Descriptor instead.
func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{1}
}

type PaginatedListRequest_Direction int32

const (
	PaginatedListRequest_NEXT     PaginatedListRequest_Direction = 0
	PaginatedListRequest_PREVIOUS PaginatedListRequest_Direction = 1
)

// Enum value maps for PaginatedListRequest_Direction.
var (
	PaginatedListRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	PaginatedListRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x PaginatedListRequest_Direction) Enum() *PaginatedListRequest_Direction {
	p := new(PaginatedListRequest_Direction)
	*p = x
	return p
}

func (x PaginatedListRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaginatedListRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[2].Descriptor()
}

func (PaginatedListRequest_Direction) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[2]
}

func (x PaginatedListRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaginatedListRequest_Direction.Descriptor instead.
func (PaginatedListRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{2, 0}
}

type ListStreamLogsRequest_Direction int32

const (
	ListStreamLogsRequest_NEXT     ListStreamLogsRequest_Direction = 0
	ListStreamLogsRequest_PREVIOUS ListStreamLogsRequest_Direction = 1
)

// Enum value maps for ListStreamLogsRequest_Direction.
var (
	ListStreamLogsRequest_Direction_name = map[int32]string{
		0: "NEXT",
		1: "PREVIOUS",
	}
	ListStreamLogsRequest_Direction_value = map[string]int32{
		"NEXT":     0,
		"PREVIOUS": 1,
	}
)

func (x ListStreamLogsRequest_Direction) Enum() *ListStreamLogsRequest_Direction {
	p := new(ListStreamLogsRequest_Direction)
	*p = x
	return p
}

func (x ListStreamLogsRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStreamLogsRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[3].Descriptor()
}

func (ListStreamLogsRequest_Direction) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[3]
}

func (x ListStreamLogsRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListStreamLogsRequest_Direction.Descriptor instead.
func (ListStreamLogsRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{4, 0}
}

// Describes the type of S3StreamConfig
// - USER          - uses key_id and key_secret as credential
// - INSTANCE_ROLE - uses AWS instance role to access S3
type S3StreamConfig_Type int32

const (
	S3StreamConfig_USER          S3StreamConfig_Type = 0
	S3StreamConfig_INSTANCE_ROLE S3StreamConfig_Type = 1
)

// Enum value maps for S3StreamConfig_Type.
var (
	S3StreamConfig_Type_name = map[int32]string{
		0: "USER",
		1: "INSTANCE_ROLE",
	}
	S3StreamConfig_Type_value = map[string]int32{
		"USER":          0,
		"INSTANCE_ROLE": 1,
	}
)

func (x S3StreamConfig_Type) Enum() *S3StreamConfig_Type {
	p := new(S3StreamConfig_Type)
	*p = x
	return p
}

func (x S3StreamConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3StreamConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[4].Descriptor()
}

func (S3StreamConfig_Type) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[4]
}

func (x S3StreamConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use S3StreamConfig_Type.Descriptor instead.
func (S3StreamConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{9, 0}
}

type Event_Resource int32

const (
	Event_Project                 Event_Resource = 0
	Event_User                    Event_Resource = 1
	Event_Workflow                Event_Resource = 2
	Event_Pipeline                Event_Resource = 3
	Event_DebugSession            Event_Resource = 4
	Event_PeriodicScheduler       Event_Resource = 5
	Event_Secret                  Event_Resource = 6
	Event_Notification            Event_Resource = 7
	Event_Dashboard               Event_Resource = 8
	Event_Job                     Event_Resource = 9
	Event_Artifact                Event_Resource = 10
	Event_Organization            Event_Resource = 11
	Event_SelfHostedAgentType     Event_Resource = 12
	Event_SelfHostedAgent         Event_Resource = 13
	Event_CustomDashboard         Event_Resource = 14
	Event_CustomDashboardItem     Event_Resource = 15
	Event_ProjectInsightsSettings Event_Resource = 16
	Event_Okta                    Event_Resource = 17
	Event_FlakyTests              Event_Resource = 18
	Event_RBACRole                Event_Resource = 19
)

// Enum value maps for Event_Resource.
var (
	Event_Resource_name = map[int32]string{
		0:  "Project",
		1:  "User",
		2:  "Workflow",
		3:  "Pipeline",
		4:  "DebugSession",
		5:  "PeriodicScheduler",
		6:  "Secret",
		7:  "Notification",
		8:  "Dashboard",
		9:  "Job",
		10: "Artifact",
		11: "Organization",
		12: "SelfHostedAgentType",
		13: "SelfHostedAgent",
		14: "CustomDashboard",
		15: "CustomDashboardItem",
		16: "ProjectInsightsSettings",
		17: "Okta",
		18: "FlakyTests",
		19: "RBACRole",
	}
	Event_Resource_value = map[string]int32{
		"Project":                 0,
		"User":                    1,
		"Workflow":                2,
		"Pipeline":                3,
		"DebugSession":            4,
		"PeriodicScheduler":       5,
		"Secret":                  6,
		"Notification":            7,
		"Dashboard":               8,
		"Job":                     9,
		"Artifact":                10,
		"Organization":            11,
		"SelfHostedAgentType":     12,
		"SelfHostedAgent":         13,
		"CustomDashboard":         14,
		"CustomDashboardItem":     15,
		"ProjectInsightsSettings": 16,
		"Okta":                    17,
		"FlakyTests":              18,
		"RBACRole":                19,
	}
)

func (x Event_Resource) Enum() *Event_Resource {
	p := new(Event_Resource)
	*p = x
	return p
}

func (x Event_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[5].Descriptor()
}

func (Event_Resource) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[5]
}

func (x Event_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Resource.Descriptor instead.
func (Event_Resource) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{20, 0}
}

type Event_Operation int32

const (
	Event_Added    Event_Operation = 0
	Event_Removed  Event_Operation = 1
	Event_Modified Event_Operation = 2
	Event_Started  Event_Operation = 3
	Event_Stopped  Event_Operation = 4
	Event_Promoted Event_Operation = 5
	Event_Demoted  Event_Operation = 6
	Event_Rebuild  Event_Operation = 7
	Event_Download Event_Operation = 8
	Event_Disabled Event_Operation = 9
)

// Enum value maps for Event_Operation.
var (
	Event_Operation_name = map[int32]string{
		0: "Added",
		1: "Removed",
		2: "Modified",
		3: "Started",
		4: "Stopped",
		5: "Promoted",
		6: "Demoted",
		7: "Rebuild",
		8: "Download",
		9: "Disabled",
	}
	Event_Operation_value = map[string]int32{
		"Added":    0,
		"Removed":  1,
		"Modified": 2,
		"Started":  3,
		"Stopped":  4,
		"Promoted": 5,
		"Demoted":  6,
		"Rebuild":  7,
		"Download": 8,
		"Disabled": 9,
	}
)

func (x Event_Operation) Enum() *Event_Operation {
	p := new(Event_Operation)
	*p = x
	return p
}

func (x Event_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[6].Descriptor()
}

func (Event_Operation) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[6]
}

func (x Event_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Operation.Descriptor instead.
func (Event_Operation) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{20, 1}
}

type Event_Medium int32

const (
	Event_Web Event_Medium = 0
	Event_API Event_Medium = 1
	Event_CLI Event_Medium = 2
)

// Enum value maps for Event_Medium.
var (
	Event_Medium_name = map[int32]string{
		0: "Web",
		1: "API",
		2: "CLI",
	}
	Event_Medium_value = map[string]int32{
		"Web": 0,
		"API": 1,
		"CLI": 2,
	}
)

func (x Event_Medium) Enum() *Event_Medium {
	p := new(Event_Medium)
	*p = x
	return p
}

func (x Event_Medium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Medium) Descriptor() protoreflect.EnumDescriptor {
	return file_audit_proto_enumTypes[7].Descriptor()
}

func (Event_Medium) Type() protoreflect.EnumType {
	return &file_audit_proto_enumTypes[7]
}

func (x Event_Medium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Medium.Descriptor instead.
func (Event_Medium) EnumDescriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{20, 2}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// [optional]
	//
	// By default, only the last event for an operation is returned.
	// If you need every event, pass true.
	AllEventsInOperation bool `protobuf:"varint,2,opt,name=all_events_in_operation,json=allEventsInOperation,proto3" json:"all_events_in_operation,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0}
}

func (x *ListRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListRequest) GetAllEventsInOperation() bool {
	if x != nil {
		return x.AllEventsInOperation
	}
	return false
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_audit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{1}
}

func (x *ListResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type PaginatedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string                         `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	PageSize  int32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                         `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Direction PaginatedListRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=InternalApi.Audit.PaginatedListRequest_Direction" json:"direction,omitempty"`
}

func (x *PaginatedListRequest) Reset() {
	*x = PaginatedListRequest{}
	mi := &file_audit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginatedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedListRequest) ProtoMessage() {}

func (x *PaginatedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedListRequest.ProtoReflect.Descriptor instead.
func (*PaginatedListRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{2}
}

func (x *PaginatedListRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PaginatedListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PaginatedListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *PaginatedListRequest) GetDirection() PaginatedListRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return PaginatedListRequest_NEXT
}

type PaginatedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events            []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextPageToken     string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string   `protobuf:"bytes,3,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
}

func (x *PaginatedListResponse) Reset() {
	*x = PaginatedListResponse{}
	mi := &file_audit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginatedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedListResponse) ProtoMessage() {}

func (x *PaginatedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedListResponse.ProtoReflect.Descriptor instead.
func (*PaginatedListResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{3}
}

func (x *PaginatedListResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PaginatedListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *PaginatedListResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

type ListStreamLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string                          `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	PageSize  int32                           `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                          `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Direction ListStreamLogsRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=InternalApi.Audit.ListStreamLogsRequest_Direction" json:"direction,omitempty"`
}

func (x *ListStreamLogsRequest) Reset() {
	*x = ListStreamLogsRequest{}
	mi := &file_audit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLogsRequest) ProtoMessage() {}

func (x *ListStreamLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLogsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamLogsRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{4}
}

func (x *ListStreamLogsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListStreamLogsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStreamLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStreamLogsRequest) GetDirection() ListStreamLogsRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return ListStreamLogsRequest_NEXT
}

type ListStreamLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamLogs        []*StreamLog `protobuf:"bytes,1,rep,name=stream_logs,json=streamLogs,proto3" json:"stream_logs,omitempty"`
	NextPageToken     string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PreviousPageToken string       `protobuf:"bytes,3,opt,name=previous_page_token,json=previousPageToken,proto3" json:"previous_page_token,omitempty"`
}

func (x *ListStreamLogsResponse) Reset() {
	*x = ListStreamLogsResponse{}
	mi := &file_audit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLogsResponse) ProtoMessage() {}

func (x *ListStreamLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLogsResponse.ProtoReflect.Descriptor instead.
func (*ListStreamLogsResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{5}
}

func (x *ListStreamLogsResponse) GetStreamLogs() []*StreamLog {
	if x != nil {
		return x.StreamLogs
	}
	return nil
}

func (x *ListStreamLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListStreamLogsResponse) GetPreviousPageToken() string {
	if x != nil {
		return x.PreviousPageToken
	}
	return ""
}

type StreamLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp           *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ErrorMessage        string               `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	FileSize            int32                `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileName            string               `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FirstEventTimestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=first_event_timestamp,json=firstEventTimestamp,proto3" json:"first_event_timestamp,omitempty"`
	LastEventTimestamp  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_event_timestamp,json=lastEventTimestamp,proto3" json:"last_event_timestamp,omitempty"`
}

func (x *StreamLog) Reset() {
	*x = StreamLog{}
	mi := &file_audit_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLog) ProtoMessage() {}

func (x *StreamLog) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLog.ProtoReflect.Descriptor instead.
func (*StreamLog) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{6}
}

func (x *StreamLog) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StreamLog) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *StreamLog) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *StreamLog) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StreamLog) GetFirstEventTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.FirstEventTimestamp
	}
	return nil
}

func (x *StreamLog) GetLastEventTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.LastEventTimestamp
	}
	return nil
}

// Stream is message used to describe one stream
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string         `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Provider StreamProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=InternalApi.Audit.StreamProvider" json:"provider,omitempty"`
	Status   StreamStatus   `protobuf:"varint,3,opt,name=status,proto3,enum=InternalApi.Audit.StreamStatus" json:"status,omitempty"`
	// based on provider one of the following fields should be set
	S3Config *S3StreamConfig `protobuf:"bytes,4,opt,name=s3_config,json=s3Config,proto3" json:"s3_config,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_audit_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{7}
}

func (x *Stream) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Stream) GetProvider() StreamProvider {
	if x != nil {
		return x.Provider
	}
	return StreamProvider_S3
}

func (x *Stream) GetStatus() StreamStatus {
	if x != nil {
		return x.Status
	}
	return StreamStatus_ACTIVE
}

func (x *Stream) GetS3Config() *S3StreamConfig {
	if x != nil {
		return x.S3Config
	}
	return nil
}

// EditMeta contains Stream data
type EditMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ActivityToggledAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=activity_toggled_at,json=activityToggledAt,proto3" json:"activity_toggled_at,omitempty"`
	UpdatedBy         string               `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	ActivityToggledBy string               `protobuf:"bytes,5,opt,name=activity_toggled_by,json=activityToggledBy,proto3" json:"activity_toggled_by,omitempty"`
}

func (x *EditMeta) Reset() {
	*x = EditMeta{}
	mi := &file_audit_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMeta) ProtoMessage() {}

func (x *EditMeta) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMeta.ProtoReflect.Descriptor instead.
func (*EditMeta) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{8}
}

func (x *EditMeta) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EditMeta) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *EditMeta) GetActivityToggledAt() *timestamp.Timestamp {
	if x != nil {
		return x.ActivityToggledAt
	}
	return nil
}

func (x *EditMeta) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *EditMeta) GetActivityToggledBy() string {
	if x != nil {
		return x.ActivityToggledBy
	}
	return ""
}

type S3StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	KeyId     string `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeySecret string `protobuf:"bytes,3,opt,name=key_secret,json=keySecret,proto3" json:"key_secret,omitempty"`
	// specify host name of s3 server, defaults to aws
	Host   string              `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Region string              `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Type   S3StreamConfig_Type `protobuf:"varint,6,opt,name=type,proto3,enum=InternalApi.Audit.S3StreamConfig_Type" json:"type,omitempty"`
}

func (x *S3StreamConfig) Reset() {
	*x = S3StreamConfig{}
	mi := &file_audit_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3StreamConfig) ProtoMessage() {}

func (x *S3StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3StreamConfig.ProtoReflect.Descriptor instead.
func (*S3StreamConfig) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{9}
}

func (x *S3StreamConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3StreamConfig) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *S3StreamConfig) GetKeySecret() string {
	if x != nil {
		return x.KeySecret
	}
	return ""
}

func (x *S3StreamConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *S3StreamConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3StreamConfig) GetType() S3StreamConfig_Type {
	if x != nil {
		return x.Type
	}
	return S3StreamConfig_USER
}

type TestStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *TestStreamRequest) Reset() {
	*x = TestStreamRequest{}
	mi := &file_audit_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamRequest) ProtoMessage() {}

func (x *TestStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStreamRequest.ProtoReflect.Descriptor instead.
func (*TestStreamRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{10}
}

func (x *TestStreamRequest) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type TestStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TestStreamResponse) Reset() {
	*x = TestStreamResponse{}
	mi := &file_audit_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStreamResponse) ProtoMessage() {}

func (x *TestStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStreamResponse.ProtoReflect.Descriptor instead.
func (*TestStreamResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{11}
}

func (x *TestStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestStreamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	UserId string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	mi := &file_audit_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{12}
}

func (x *CreateStreamRequest) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *CreateStreamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Meta   *EditMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	mi := &file_audit_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{13}
}

func (x *CreateStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *CreateStreamResponse) GetMeta() *EditMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DescribeStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DescribeStreamRequest) Reset() {
	*x = DescribeStreamRequest{}
	mi := &file_audit_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStreamRequest) ProtoMessage() {}

func (x *DescribeStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStreamRequest.ProtoReflect.Descriptor instead.
func (*DescribeStreamRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeStreamRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type DescribeStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Meta   *EditMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *DescribeStreamResponse) Reset() {
	*x = DescribeStreamResponse{}
	mi := &file_audit_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStreamResponse) ProtoMessage() {}

func (x *DescribeStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStreamResponse.ProtoReflect.Descriptor instead.
func (*DescribeStreamResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *DescribeStreamResponse) GetMeta() *EditMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	UserId string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	mi := &file_audit_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateStreamRequest) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *UpdateStreamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Meta   *EditMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *UpdateStreamResponse) Reset() {
	*x = UpdateStreamResponse{}
	mi := &file_audit_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamResponse) ProtoMessage() {}

func (x *UpdateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamResponse.ProtoReflect.Descriptor instead.
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *UpdateStreamResponse) GetMeta() *EditMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DestroyStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DestroyStreamRequest) Reset() {
	*x = DestroyStreamRequest{}
	mi := &file_audit_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyStreamRequest) ProtoMessage() {}

func (x *DestroyStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyStreamRequest.ProtoReflect.Descriptor instead.
func (*DestroyStreamRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{18}
}

func (x *DestroyStreamRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type SetStreamStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  string       `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Status StreamStatus `protobuf:"varint,2,opt,name=status,proto3,enum=InternalApi.Audit.StreamStatus" json:"status,omitempty"`
	UserId string       `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetStreamStateRequest) Reset() {
	*x = SetStreamStateRequest{}
	mi := &file_audit_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStreamStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamStateRequest) ProtoMessage() {}

func (x *SetStreamStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamStateRequest.ProtoReflect.Descriptor instead.
func (*SetStreamStateRequest) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{19}
}

func (x *SetStreamStateRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetStreamStateRequest) GetStatus() StreamStatus {
	if x != nil {
		return x.Status
	}
	return StreamStatus_ACTIVE
}

func (x *SetStreamStateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Cloud AMQP messages.
//
// Listining for incomming logs on:
//
//	exchange: 'audit'
//	routing-key: 'log'
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource  Event_Resource  `protobuf:"varint,1,opt,name=resource,proto3,enum=InternalApi.Audit.Event_Resource" json:"resource,omitempty"`    // [required]
	Operation Event_Operation `protobuf:"varint,2,opt,name=operation,proto3,enum=InternalApi.Audit.Event_Operation" json:"operation,omitempty"` // [required]
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // [required] The user who initiated this action.
	OrgId     string          `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`                                    // [required] Organization ID in which this event happened.
	IpAddress string          `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                        // [optional] The user's IP address when he run the operation.
	// [optional]
	//
	// If username is not provided, the Audit system will use the user_id to look
	// up the username. This allows the sender to not worry about fetching the
	// username and the performance implications that this might add to the system.
	//
	// However, on user delete, the username of the user might no longer be
	// available. Providing the username in regular audit logs is not
	// necessary, as it will be loaded by the Audit service.
	//
	// Not providing the username (only the user_id) is cheaper
	// performance wise to some services.
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// [optinal] Short textual description of the action.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// [optinal] JSON Metadata. Must be a valid JSON.
	Metadata  string               `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // [required]
	// [required]
	//
	// An ID that uniquly identifies this operation. Usually the x-request-id
	// HTTP header of the request.
	//
	// Multiple events can belong to a single operation.
	//
	// When is this useful?
	//
	// Consider a Web request in a controller:
	//
	//	def start_job do
	//	  # running start operation ...
	//	end
	//
	// To add an Audit log to this operation, we can send it either before or
	// after the processing has been executed.
	//
	// 1) If we send it after the operation:
	//
	//	def start_job do
	//	  # running start operation ...
	//
	//	  Audit.log(:job, :start)
	//	end
	//
	//	We can risk the posibility that the processing is executed, but there is no
	//	Audit log saved. This can happen, for example, if the process shuts down
	//	just after the processing is done, but right before the log is sent out.
	//
	// 2) If we send it before the operation:
	//
	//	def start_job do
	//	  Audit.log(:job, :start)
	//
	//	  # running stop operation ...
	//	end
	//
	//	Now, we are certain that the Audit log is saved if the operation is
	//	executed. However, we would also like to save the ID of the job in the
	//	Audit log.
	//
	// 3) If we send both the start and the end.
	//
	//	def start_job do
	//	  Audit.log(:job, :start)
	//
	//	  # running stop operation ...
	//
	//	  Audit.log(:job, :start, job_id: id)
	//	end
	//
	//	This covers all the cases, however, the two events could be hard to
	//	connect while reviwing it.
	//
	// 4) Sending both at the start and the end with an operation_id.
	//
	//	def start_job do
	//	  Audit.log(:job, :start, operation_id: req.id)
	//
	//	  # running stop operation ...
	//
	//	  Audit.log(:job, :start, operation_id: req.id, job_id: id)
	//	end
	//
	//	By specifying the same operation_id, we have all the data and we can
	//	connect it.
	//
	// While generating the Audit Log dump, we can merge the events in the backend
	// and dump a single one to the customer.
	OperationId  string       `protobuf:"bytes,10,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	ResourceId   string       `protobuf:"bytes,11,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`            // [optional] ID of the resource that was modified.
	ResourceName string       `protobuf:"bytes,12,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`      // [optional] Name of the resource that was modified.
	Medium       Event_Medium `protobuf:"varint,13,opt,name=medium,proto3,enum=InternalApi.Audit.Event_Medium" json:"medium,omitempty"` // [required] Web, API, or CLI
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_audit_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{20}
}

func (x *Event) GetResource() Event_Resource {
	if x != nil {
		return x.Resource
	}
	return Event_Project
}

func (x *Event) GetOperation() Event_Operation {
	if x != nil {
		return x.Operation
	}
	return Event_Added
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Event) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Event) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *Event) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *Event) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Event) GetMedium() Event_Medium {
	if x != nil {
		return x.Medium
	}
	return Event_Web
}

var File_audit_proto protoreflect.FileDescriptor

var file_audit_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdf, 0x01,
	0x0a, 0x14, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x22,
	0xa1, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x50, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd7,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x53, 0x33, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x73, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x45, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x53, 0x33, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x33, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x10, 0x01, 0x22, 0x46, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x48, 0x0a, 0x12,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0x2d, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xa4, 0x08, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x22, 0xdd, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0f, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x6b, 0x74, 0x61, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x42, 0x41, 0x43, 0x52, 0x6f,
	0x6c, 0x65, 0x10, 0x13, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x22, 0x23, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x49,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x49, 0x10, 0x02, 0x2a, 0x18, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x06, 0x0a,
	0x02, 0x53, 0x33, 0x10, 0x00, 0x2a, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x32, 0xcc, 0x06,
	0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x27, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x52, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x40, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_proto_rawDescOnce sync.Once
	file_audit_proto_rawDescData = file_audit_proto_rawDesc
)

func file_audit_proto_rawDescGZIP() []byte {
	file_audit_proto_rawDescOnce.Do(func() {
		file_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_proto_rawDescData)
	})
	return file_audit_proto_rawDescData
}

var file_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_audit_proto_goTypes = []any{
	(StreamProvider)(0),                  // 0: InternalApi.Audit.StreamProvider
	(StreamStatus)(0),                    // 1: InternalApi.Audit.StreamStatus
	(PaginatedListRequest_Direction)(0),  // 2: InternalApi.Audit.PaginatedListRequest.Direction
	(ListStreamLogsRequest_Direction)(0), // 3: InternalApi.Audit.ListStreamLogsRequest.Direction
	(S3StreamConfig_Type)(0),             // 4: InternalApi.Audit.S3StreamConfig.Type
	(Event_Resource)(0),                  // 5: InternalApi.Audit.Event.Resource
	(Event_Operation)(0),                 // 6: InternalApi.Audit.Event.Operation
	(Event_Medium)(0),                    // 7: InternalApi.Audit.Event.Medium
	(*ListRequest)(nil),                  // 8: InternalApi.Audit.ListRequest
	(*ListResponse)(nil),                 // 9: InternalApi.Audit.ListResponse
	(*PaginatedListRequest)(nil),         // 10: InternalApi.Audit.PaginatedListRequest
	(*PaginatedListResponse)(nil),        // 11: InternalApi.Audit.PaginatedListResponse
	(*ListStreamLogsRequest)(nil),        // 12: InternalApi.Audit.ListStreamLogsRequest
	(*ListStreamLogsResponse)(nil),       // 13: InternalApi.Audit.ListStreamLogsResponse
	(*StreamLog)(nil),                    // 14: InternalApi.Audit.StreamLog
	(*Stream)(nil),                       // 15: InternalApi.Audit.Stream
	(*EditMeta)(nil),                     // 16: InternalApi.Audit.EditMeta
	(*S3StreamConfig)(nil),               // 17: InternalApi.Audit.S3StreamConfig
	(*TestStreamRequest)(nil),            // 18: InternalApi.Audit.TestStreamRequest
	(*TestStreamResponse)(nil),           // 19: InternalApi.Audit.TestStreamResponse
	(*CreateStreamRequest)(nil),          // 20: InternalApi.Audit.CreateStreamRequest
	(*CreateStreamResponse)(nil),         // 21: InternalApi.Audit.CreateStreamResponse
	(*DescribeStreamRequest)(nil),        // 22: InternalApi.Audit.DescribeStreamRequest
	(*DescribeStreamResponse)(nil),       // 23: InternalApi.Audit.DescribeStreamResponse
	(*UpdateStreamRequest)(nil),          // 24: InternalApi.Audit.UpdateStreamRequest
	(*UpdateStreamResponse)(nil),         // 25: InternalApi.Audit.UpdateStreamResponse
	(*DestroyStreamRequest)(nil),         // 26: InternalApi.Audit.DestroyStreamRequest
	(*SetStreamStateRequest)(nil),        // 27: InternalApi.Audit.SetStreamStateRequest
	(*Event)(nil),                        // 28: InternalApi.Audit.Event
	(*timestamp.Timestamp)(nil),          // 29: google.protobuf.Timestamp
	(*empty.Empty)(nil),                  // 30: google.protobuf.Empty
}
var file_audit_proto_depIdxs = []int32{
	28, // 0: InternalApi.Audit.ListResponse.events:type_name -> InternalApi.Audit.Event
	2,  // 1: InternalApi.Audit.PaginatedListRequest.direction:type_name -> InternalApi.Audit.PaginatedListRequest.Direction
	28, // 2: InternalApi.Audit.PaginatedListResponse.events:type_name -> InternalApi.Audit.Event
	3,  // 3: InternalApi.Audit.ListStreamLogsRequest.direction:type_name -> InternalApi.Audit.ListStreamLogsRequest.Direction
	14, // 4: InternalApi.Audit.ListStreamLogsResponse.stream_logs:type_name -> InternalApi.Audit.StreamLog
	29, // 5: InternalApi.Audit.StreamLog.timestamp:type_name -> google.protobuf.Timestamp
	29, // 6: InternalApi.Audit.StreamLog.first_event_timestamp:type_name -> google.protobuf.Timestamp
	29, // 7: InternalApi.Audit.StreamLog.last_event_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 8: InternalApi.Audit.Stream.provider:type_name -> InternalApi.Audit.StreamProvider
	1,  // 9: InternalApi.Audit.Stream.status:type_name -> InternalApi.Audit.StreamStatus
	17, // 10: InternalApi.Audit.Stream.s3_config:type_name -> InternalApi.Audit.S3StreamConfig
	29, // 11: InternalApi.Audit.EditMeta.created_at:type_name -> google.protobuf.Timestamp
	29, // 12: InternalApi.Audit.EditMeta.updated_at:type_name -> google.protobuf.Timestamp
	29, // 13: InternalApi.Audit.EditMeta.activity_toggled_at:type_name -> google.protobuf.Timestamp
	4,  // 14: InternalApi.Audit.S3StreamConfig.type:type_name -> InternalApi.Audit.S3StreamConfig.Type
	15, // 15: InternalApi.Audit.TestStreamRequest.stream:type_name -> InternalApi.Audit.Stream
	15, // 16: InternalApi.Audit.CreateStreamRequest.stream:type_name -> InternalApi.Audit.Stream
	15, // 17: InternalApi.Audit.CreateStreamResponse.stream:type_name -> InternalApi.Audit.Stream
	16, // 18: InternalApi.Audit.CreateStreamResponse.meta:type_name -> InternalApi.Audit.EditMeta
	15, // 19: InternalApi.Audit.DescribeStreamResponse.stream:type_name -> InternalApi.Audit.Stream
	16, // 20: InternalApi.Audit.DescribeStreamResponse.meta:type_name -> InternalApi.Audit.EditMeta
	15, // 21: InternalApi.Audit.UpdateStreamRequest.stream:type_name -> InternalApi.Audit.Stream
	15, // 22: InternalApi.Audit.UpdateStreamResponse.stream:type_name -> InternalApi.Audit.Stream
	16, // 23: InternalApi.Audit.UpdateStreamResponse.meta:type_name -> InternalApi.Audit.EditMeta
	1,  // 24: InternalApi.Audit.SetStreamStateRequest.status:type_name -> InternalApi.Audit.StreamStatus
	5,  // 25: InternalApi.Audit.Event.resource:type_name -> InternalApi.Audit.Event.Resource
	6,  // 26: InternalApi.Audit.Event.operation:type_name -> InternalApi.Audit.Event.Operation
	29, // 27: InternalApi.Audit.Event.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 28: InternalApi.Audit.Event.medium:type_name -> InternalApi.Audit.Event.Medium
	8,  // 29: InternalApi.Audit.AuditService.List:input_type -> InternalApi.Audit.ListRequest
	10, // 30: InternalApi.Audit.AuditService.PaginatedList:input_type -> InternalApi.Audit.PaginatedListRequest
	18, // 31: InternalApi.Audit.AuditService.TestStream:input_type -> InternalApi.Audit.TestStreamRequest
	20, // 32: InternalApi.Audit.AuditService.CreateStream:input_type -> InternalApi.Audit.CreateStreamRequest
	22, // 33: InternalApi.Audit.AuditService.DescribeStream:input_type -> InternalApi.Audit.DescribeStreamRequest
	24, // 34: InternalApi.Audit.AuditService.UpdateStream:input_type -> InternalApi.Audit.UpdateStreamRequest
	26, // 35: InternalApi.Audit.AuditService.DestroyStream:input_type -> InternalApi.Audit.DestroyStreamRequest
	27, // 36: InternalApi.Audit.AuditService.SetStreamState:input_type -> InternalApi.Audit.SetStreamStateRequest
	12, // 37: InternalApi.Audit.AuditService.ListStreamLogs:input_type -> InternalApi.Audit.ListStreamLogsRequest
	9,  // 38: InternalApi.Audit.AuditService.List:output_type -> InternalApi.Audit.ListResponse
	11, // 39: InternalApi.Audit.AuditService.PaginatedList:output_type -> InternalApi.Audit.PaginatedListResponse
	19, // 40: InternalApi.Audit.AuditService.TestStream:output_type -> InternalApi.Audit.TestStreamResponse
	21, // 41: InternalApi.Audit.AuditService.CreateStream:output_type -> InternalApi.Audit.CreateStreamResponse
	23, // 42: InternalApi.Audit.AuditService.DescribeStream:output_type -> InternalApi.Audit.DescribeStreamResponse
	25, // 43: InternalApi.Audit.AuditService.UpdateStream:output_type -> InternalApi.Audit.UpdateStreamResponse
	30, // 44: InternalApi.Audit.AuditService.DestroyStream:output_type -> google.protobuf.Empty
	30, // 45: InternalApi.Audit.AuditService.SetStreamState:output_type -> google.protobuf.Empty
	13, // 46: InternalApi.Audit.AuditService.ListStreamLogs:output_type -> InternalApi.Audit.ListStreamLogsResponse
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_audit_proto_init() }
func file_audit_proto_init() {
	if File_audit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_proto_goTypes,
		DependencyIndexes: file_audit_proto_depIdxs,
		EnumInfos:         file_audit_proto_enumTypes,
		MessageInfos:      file_audit_proto_msgTypes,
	}.Build()
	File_audit_proto = out.File
	file_audit_proto_rawDesc = nil
	file_audit_proto_goTypes = nil
	file_audit_proto_depIdxs = nil
}
