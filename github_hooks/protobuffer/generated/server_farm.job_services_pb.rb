# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: server_farm.job.proto for package 'InternalApi.ServerFarm.Job'

require 'grpc'
require_relative 'server_farm.job_pb'

module InternalApi
  module ServerFarm
    module Job
      module JobService
        class Service

          include ::GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = 'InternalApi.ServerFarm.Job.JobService'

          #
          # Operation is called to describe an existing job.
          # Operation is synchronous.
          #
          rpc :Describe, ::InternalApi::ServerFarm::Job::DescribeRequest, ::InternalApi::ServerFarm::Job::DescribeResponse
          #
          # Operation is called to list jobs.
          # Operation is synchronous.
          #
          rpc :List, ::InternalApi::ServerFarm::Job::ListRequest, ::InternalApi::ServerFarm::Job::ListResponse
          #
          # Operation is called to list debug sessions.
          # Operation is synchronous.
          #
          rpc :ListDebugSessions, ::InternalApi::ServerFarm::Job::ListDebugSessionsRequest, ::InternalApi::ServerFarm::Job::ListDebugSessionsResponse
          #
          # Operation is called to count jobs.
          # Operation is synchronous.
          #
          rpc :Count, ::InternalApi::ServerFarm::Job::CountRequest, ::InternalApi::ServerFarm::Job::CountResponse
          #
          # Operation is called to count jobs by state
          # Operation is synchronous
          #
          rpc :CountByState, ::InternalApi::ServerFarm::Job::CountByStateRequest, ::InternalApi::ServerFarm::Job::CountByStateResponse
          #
          # Operation is called to stop previously scheduled job.
          # Operation is synchronous and idempotent.
          #
          rpc :Stop, ::InternalApi::ServerFarm::Job::StopRequest, ::InternalApi::ServerFarm::Job::StopResponse
          #
          # Get total usage in seconds for any particular organizations.
          # Where Total Execution Time = sum(duration of all finished jobs) + sum(duration of all running jobs)
          #
          # Primary use case is to check suspicious activity on newly created organizations.
          # For example, bitcoin mining.
          #
          rpc :TotalExecutionTime, ::InternalApi::ServerFarm::Job::TotalExecutionTimeRequest, ::InternalApi::ServerFarm::Job::TotalExecutionTimeResponse
          #
          # Returns the JSON payload that is given to an Agent to execute a job.
          # The JSON payload contains all information necessary to run a job on an Agent.
          #
          # This call was introduced to support self-hosted agents.
          # For hosted jobs, zebra is sending this payload with HTTP POST directly to
          # the agent. For self-hosted ones, the agent will fetch this payload from
          # Semaphore via HTTP GET.
          #
          rpc :GetAgentPayload, ::InternalApi::ServerFarm::Job::GetAgentPayloadRequest, ::InternalApi::ServerFarm::Job::GetAgentPayloadResponse
          #
          # Returns information if a user can debug a job.
          #
          rpc :CanDebug, ::InternalApi::ServerFarm::Job::CanDebugRequest, ::InternalApi::ServerFarm::Job::CanDebugResponse
          #
          # Returns information if a user can attach a job.
          #
          rpc :CanAttach, ::InternalApi::ServerFarm::Job::CanAttachRequest, ::InternalApi::ServerFarm::Job::CanAttachResponse
          #
          # Create a new job based on the given job spec.
          #
          rpc :Create, ::InternalApi::ServerFarm::Job::CreateRequest, ::InternalApi::ServerFarm::Job::CreateResponse
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
