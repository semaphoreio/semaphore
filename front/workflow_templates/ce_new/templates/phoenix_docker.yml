version: v1.0
name: "üî• Phoenix CI Pipeline"
agent:
  machine:
    type: {{ machine_type }}
    os_image: {{ os_image }}  # Empty for Docker compose style pipeline
  containers:
    - name: main
      image: 'elixir:1.15'  # Official Elixir 1.15 image from Docker Hub
    - name: postgres
      image: 'postgres:17'  # PostgreSQL 17 for database operations
      env_vars:
        - name: POSTGRES_PASSWORD
          value: postgres  # Set PostgreSQL password
        - name: POSTGRES_USER
          value: postgres  # Set PostgreSQL user
        - name: POSTGRES_DB
          value: app_test  # Set default database name
    - name: redis
      image: 'redis:7.0'  # Redis 7.0 for caching, pub/sub, etc.
fail_fast:
  stop:
    when: branch != 'main'  # Stop pipeline early on failures for non-main branches
auto_cancel:
  running:
    when: branch != 'main'  # Cancel running pipelines on new commits for non-main branches
  queued:
    when: branch = 'main'   # Cancel queued pipelines for main branch
global_job_config:
  prologue:
    commands:
      - checkout  # Get the latest code from the repository
      - mix local.hex --force  # Install Hex package manager
      - mix local.rebar --force  # Install rebar (Erlang build tool)
      - cache restore mix-deps-$(checksum mix.lock)  # Restore cached dependencies based on mix.lock checksum
      - cache restore build-$(checksum mix.lock)  # Restore cached build artifacts
      - cache restore npm-modules-$(checksum assets/package-lock.json)  # Restore cached npm modules
      - cache restore plt-cache  # Restore cached Dialyzer PLT files
      - mix deps.get  # Download project dependencies
blocks:
  - name: "üõ†Ô∏è Setup and Cache"
    dependencies: []  # No dependencies for the first block
    task:
      jobs:
        - name: "üì¶ Install Dependencies"
          commands:
            - mix deps.compile  # Compile all dependencies
            - mix compile  # Compile the project
            - cd assets && npm ci  # Install frontend dependencies
            - cache store mix-deps-$(checksum mix.lock) deps  # Cache deps directory
            - cache store build-$(checksum mix.lock) _build  # Cache _build directory
            - cache store npm-modules-$(checksum assets/package-lock.json) assets/node_modules  # Cache node_modules
            - mkdir -p priv/plts  # Create directory for Dialyzer PLT files
            - cache store plt-cache priv/plts  # Cache PLT files for faster Dialyzer runs
  - name: "üé® Assets"
    dependencies:
      - "üõ†Ô∏è Setup and Cache"  # This block depends on Setup and Cache
    task:
      jobs:
        - name: "üñåÔ∏è Compile Assets"
          commands:
            - cd assets && npm run deploy  # Build and minify frontend assets
            - mix phx.digest  # Create digested versions of static files
  - name: "üîç Code Quality"
    dependencies:
      - "üõ†Ô∏è Setup and Cache"  # This block depends on Setup and Cache
    task:
      jobs:
        - name: "‚ú® Lint and Format"
          commands:
            - mix format --check-formatted  # Verify code formatting
            - mix credo --strict  # Run Credo for code quality analysis
            - cd assets && npm run lint  # Lint JavaScript code
  - name: "üîê Security Checks"
    dependencies:
      - "üõ†Ô∏è Setup and Cache"  # This block depends on Setup and Cache
    task:
      jobs:
        - name: "üõ°Ô∏è Security Scan"
          commands:
            - mix deps.audit  # Check dependencies for vulnerabilities
            - mix sobelow --config  # Run Sobelow for security analysis
            - cd assets && npm audit --production  # Audit npm dependencies (production only)
  - name: "üìä Dialyzer"
    dependencies:
      - "üõ†Ô∏è Setup and Cache"  # This block depends on Setup and Cache
    task:
      jobs:
        - name: "üîé Type Checking"
          commands:
            - mix dialyzer --plt  # Run Dialyzer type checking (PLT phase)
  - name: "üß™ Test Suite"
    dependencies:
      - "üõ†Ô∏è Setup and Cache"  # This block depends on Setup and Cache
      - "üé® Assets"  # This block also depends on Assets
    task:
      env_vars:
        - name: MIX_ENV
          value: test  # Set environment to test
        - name: DATABASE_URL
          value: 'postgresql://postgres:postgres@localhost:5432/app_test'  # Database connection string
        - name: PGHOST
          value: localhost  # PostgreSQL host
        - name: PGUSER
          value: postgres  # PostgreSQL user
        - name: PGPASSWORD
          value: postgres  # PostgreSQL password
        - name: REDIS_URL
          value: 'redis://localhost:6379'  # Redis connection string
      jobs:
        - name: "üü¢ ExUnit Tests"
          parallelism: 4  # Run tests in parallel across 4 jobs
          commands:
            - mix ecto.create  # Create the test database
            - mix ecto.migrate  # Run migrations
            - mix test --cover --partitions $SEMAPHORE_JOB_COUNT --partition $SEMAPHORE_JOB_INDEX  # Run tests with coverage
      epilogue:
        always:
          commands:
            - mix coveralls.json || true  # Generate coverage report (continue on error)
            - test-results publish coverage.json || true  # Publish coverage results (continue on error)
  - name: "üåê Browser Tests"
    dependencies:
      - "üß™ Test Suite"  # This block depends on Test Suite
    task:
      env_vars:
        - name: MIX_ENV
          value: test  # Set environment to test
        - name: DATABASE_URL
          value: 'postgresql://postgres:postgres@localhost:5432/app_test'  # Database connection string
        - name: PGHOST
          value: localhost  # PostgreSQL host
        - name: PGUSER
          value: postgres  # PostgreSQL user
        - name: PGPASSWORD
          value: postgres  # PostgreSQL password
        - name: REDIS_URL
          value: 'redis://localhost:6379'  # Redis connection string
      jobs:
        - name: "üé≠ Wallaby Tests"
          commands:
            - apt-get update && apt-get install -y wget gnupg ca-certificates  # Install tools for Chrome installation
            - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -  # Add Chrome repository key
            - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list  # Add Chrome repository
            - apt-get update && apt-get install -y google-chrome-stable  # Install Chrome
            - mix wallaby.install chrome  # Install Chrome driver for Wallaby
            - 'mix test --only browser:true'  # Run only browser tests
  - name: "üöÄ Deploy Checks"
    dependencies:
      - "üß™ Test Suite"  # This block depends on Test Suite
    task:
      env_vars:
        - name: MIX_ENV
          value: prod  # Set environment to production
        - name: DATABASE_URL
          value: 'postgresql://postgres:postgres@localhost:5432/app_test'  # Database connection string
        - name: PGHOST
          value: localhost  # PostgreSQL host
        - name: PGUSER
          value: postgres  # PostgreSQL user
        - name: PGPASSWORD
          value: postgres  # PostgreSQL password
      jobs:
        - name: "üîÑ Migration Safety"
          commands:
            - mix ecto.migrations  # List pending migrations
            - mix phx.routes  # List all routes
        - name: "üì¶ Release Build"
          commands:
            - MIX_ENV=prod mix release --dry-run  # Test building a release
  - name: "üê≥ Docker"
    dependencies:
      - "üöÄ Deploy Checks"
    task:
      secrets:
        - name: dockerhub-credentials
      jobs:
        - name: "üì¶ Build and Push"
          commands:
            - 'echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin'
            - 'docker build -t "${DOCKER_USERNAME}/phoenix-app:${SEMAPHORE_GIT_SHA:0:7}" .'
            - 'docker tag "${DOCKER_USERNAME}/phoenix-app:${SEMAPHORE_GIT_SHA:0:7}" "${DOCKER_USERNAME}/phoenix-app:latest"'
            - 'docker push "${DOCKER_USERNAME}/phoenix-app:${SEMAPHORE_GIT_SHA:0:7}"'
            - 'docker push "${DOCKER_USERNAME}/phoenix-app:latest"'