# This is a Semaphore configuration file for Laravel projects using Docker
# For more information about Semaphore configuration visit:
# https://docs.semaphoreci.com/reference/pipeline-yaml-reference/

version: v1.0  # Semaphore configuration version
name: "🚀 Laravel CI Pipeline"  # Pipeline display name

# Define the machine type, OS image, and containers
agent:
  machine:
    type: {{ machine_type }}
    os_image: {{ os_image }}

  containers:
    - name: main
      image: 'registry.semaphoreci.com/php:8.3-apache'  # PHP 8.3 with Apache
    - name: postgres
      image: 'registry.semaphoreci.com/postgres:17'  # PostgreSQL 17 for database operations
    - name: redis
      image: 'registry.semaphoreci.com/redis:7.0'  # Redis 7.0 for caching

# Configure when to stop the pipeline early
fail_fast:
  stop:
    when: branch != 'main'  # Stop all blocks if a job fails on non-main branches
auto_cancel:
  running:
    when: branch != 'main'  # Cancel running pipelines on non-main branches
  queued:
    when: branch = 'main'   # Cancel queued pipelines on main branch

# Commands to run before each job
global_job_config:
  prologue:
    commands:
      - checkout                    # Get the code from repository
      - cache restore             # Restore cached dependencies      
      - composer install           # Install PHP dependencies
      - npm ci                     # Install Node.js dependencies
      
# Pipeline blocks represent groups of jobs that can run in parallel
blocks:
  # Block for setting up dependencies and caching
  - name: "🛠 Setup and Cache"
    dependencies: []
    task:
      jobs:
        - name: Install Dependencies
          commands:
            - cache store  # Cache dependencies for future runs

  # Block for asset compilation
  - name: "🎨 Assets"
    dependencies: ["🛠 Setup and Cache"]
    task:
      jobs:
        - name: Compile Assets
          commands:
            - npm run build        # Build frontend assets

  # Block for code quality checks
  - name: "🔍 Code Quality"
    dependencies: ["🛠 Setup and Cache"]
    task:
      jobs:
        - name: Lint and Format
          commands:
            - ./vendor/bin/pint --test  # Check code style
            - ./vendor/bin/phpstan analyze  # Static analysis
            - npm run lint               # Check JavaScript code

  # Block for security checks
  - name: "🔐 Security Checks"
    dependencies: ["🛠 Setup and Cache"]
    task:
      jobs:
        - name: Security Scan
          commands:
            - composer audit       # Check PHP dependencies
            - npm audit           # Check Node.js dependencies

  # Block for running tests
  - name: "🧪 Test Suite"
    dependencies: ["🛠 Setup and Cache"]
    task:
      env_vars:
        - name: APP_ENV
          value: testing
        - name: DB_CONNECTION
          value: pgsql
        - name: DB_HOST
          value: postgres  # PostgreSQL container name
        - name: REDIS_HOST
          value: redis    # Redis container name
      jobs:
        - name: "🟢 PHPUnit Tests"
          parallelism: 4  # Run tests in parallel
          commands:
            - php artisan test --parallel --coverage-clover=report.xml  # Run tests with coverage and generate JUnit report
      epilogue:
        always:
          commands:
            - '[[ -f report.xml ]] && test-results publish report.xml'  # Publish test results if available           

  # Block for browser tests
  - name: "🌐 Browser Tests"
    dependencies: ["🧪 Test Suite"]
    task:
      jobs:
        - name: Dusk Tests
          commands:
            - php artisan dusk:chrome-driver  # Install Chrome driver
            - php artisan serve & sleep 5     # Start test server
            - php artisan dusk               # Run browser tests
            
after_pipeline:
  task:
    jobs:
      - name: "Merge Reports 📊"
        commands:
          - test-results gen-pipeline-report  # Generate a summary of the test results
