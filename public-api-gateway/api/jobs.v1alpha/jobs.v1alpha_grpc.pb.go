// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.17.3
// source: semaphore/jobs.v1alpha.proto

package semaphore_jobs_v1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JobsApi_ListJobs_FullMethodName           = "/semaphore.jobs.v1alpha.JobsApi/ListJobs"
	JobsApi_GetJob_FullMethodName             = "/semaphore.jobs.v1alpha.JobsApi/GetJob"
	JobsApi_GetJobDebugSSHKey_FullMethodName  = "/semaphore.jobs.v1alpha.JobsApi/GetJobDebugSSHKey"
	JobsApi_CreateJob_FullMethodName          = "/semaphore.jobs.v1alpha.JobsApi/CreateJob"
	JobsApi_CreateDebugJob_FullMethodName     = "/semaphore.jobs.v1alpha.JobsApi/CreateDebugJob"
	JobsApi_CreateDebugProject_FullMethodName = "/semaphore.jobs.v1alpha.JobsApi/CreateDebugProject"
	JobsApi_StopJob_FullMethodName            = "/semaphore.jobs.v1alpha.JobsApi/StopJob"
)

// JobsApiClient is the client API for JobsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsApiClient interface {
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	GetJobDebugSSHKey(ctx context.Context, in *GetJobDebugSSHKeyRequest, opts ...grpc.CallOption) (*JobDebugSSHKey, error)
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	CreateDebugJob(ctx context.Context, in *CreateDebugJobRequest, opts ...grpc.CallOption) (*Job, error)
	CreateDebugProject(ctx context.Context, in *CreateDebugProjectRequest, opts ...grpc.CallOption) (*Job, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*Empty, error)
}

type jobsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsApiClient(cc grpc.ClientConnInterface) JobsApiClient {
	return &jobsApiClient{cc}
}

func (c *jobsApiClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, JobsApi_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, JobsApi_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) GetJobDebugSSHKey(ctx context.Context, in *GetJobDebugSSHKeyRequest, opts ...grpc.CallOption) (*JobDebugSSHKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobDebugSSHKey)
	err := c.cc.Invoke(ctx, JobsApi_GetJobDebugSSHKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, JobsApi_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) CreateDebugJob(ctx context.Context, in *CreateDebugJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, JobsApi_CreateDebugJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) CreateDebugProject(ctx context.Context, in *CreateDebugProjectRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, JobsApi_CreateDebugProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsApiClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, JobsApi_StopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsApiServer is the server API for JobsApi service.
// All implementations should embed UnimplementedJobsApiServer
// for forward compatibility
type JobsApiServer interface {
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	GetJobDebugSSHKey(context.Context, *GetJobDebugSSHKeyRequest) (*JobDebugSSHKey, error)
	CreateJob(context.Context, *Job) (*Job, error)
	CreateDebugJob(context.Context, *CreateDebugJobRequest) (*Job, error)
	CreateDebugProject(context.Context, *CreateDebugProjectRequest) (*Job, error)
	StopJob(context.Context, *StopJobRequest) (*Empty, error)
}

// UnimplementedJobsApiServer should be embedded to have forward compatible implementations.
type UnimplementedJobsApiServer struct {
}

func (UnimplementedJobsApiServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedJobsApiServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobsApiServer) GetJobDebugSSHKey(context.Context, *GetJobDebugSSHKeyRequest) (*JobDebugSSHKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDebugSSHKey not implemented")
}
func (UnimplementedJobsApiServer) CreateJob(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobsApiServer) CreateDebugJob(context.Context, *CreateDebugJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugJob not implemented")
}
func (UnimplementedJobsApiServer) CreateDebugProject(context.Context, *CreateDebugProjectRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugProject not implemented")
}
func (UnimplementedJobsApiServer) StopJob(context.Context, *StopJobRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}

// UnsafeJobsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsApiServer will
// result in compilation errors.
type UnsafeJobsApiServer interface {
	mustEmbedUnimplementedJobsApiServer()
}

func RegisterJobsApiServer(s grpc.ServiceRegistrar, srv JobsApiServer) {
	s.RegisterService(&JobsApi_ServiceDesc, srv)
}

func _JobsApi_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_GetJobDebugSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobDebugSSHKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).GetJobDebugSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_GetJobDebugSSHKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).GetJobDebugSSHKey(ctx, req.(*GetJobDebugSSHKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).CreateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_CreateDebugJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).CreateDebugJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_CreateDebugJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).CreateDebugJob(ctx, req.(*CreateDebugJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_CreateDebugProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).CreateDebugProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_CreateDebugProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).CreateDebugProject(ctx, req.(*CreateDebugProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsApi_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsApiServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsApi_StopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsApiServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobsApi_ServiceDesc is the grpc.ServiceDesc for JobsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semaphore.jobs.v1alpha.JobsApi",
	HandlerType: (*JobsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _JobsApi_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobsApi_GetJob_Handler,
		},
		{
			MethodName: "GetJobDebugSSHKey",
			Handler:    _JobsApi_GetJobDebugSSHKey_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _JobsApi_CreateJob_Handler,
		},
		{
			MethodName: "CreateDebugJob",
			Handler:    _JobsApi_CreateDebugJob_Handler,
		},
		{
			MethodName: "CreateDebugProject",
			Handler:    _JobsApi_CreateDebugProject_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobsApi_StopJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "semaphore/jobs.v1alpha.proto",
}
