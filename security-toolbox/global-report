#!/usr/bin/env ruby
# 🌍 Global Security Report Aggregator
# Collects individual service security reports and creates comprehensive summary

require 'json'
require 'fileutils'
require 'time'

class GlobalSecurityAggregator
  def initialize(reports_dir = 'security-reports', output_dir = 'global-security')
    @reports_dir = reports_dir
    @output_dir = output_dir
    @service_reports = {}
    @all_vulnerabilities = []
    @global_stats = {}

    FileUtils.mkdir_p(@output_dir)
  end

  def aggregate
    puts "🌍 Global Security Report Aggregator"
    puts "📁 Scanning reports in: #{@reports_dir}"
    puts

    load_service_reports

    if @service_reports.empty?
      puts "❌ No service reports found!"
      return
    end

    aggregate_data
    generate_global_summary
    generate_service_matrix
    generate_trend_data
    generate_api_endpoints

    puts "✅ Global security report generated!"
    print_global_stats
  end

  private

  def load_service_reports
    return unless Dir.exist?(@reports_dir)

    # Look for service-specific JSON reports
    pattern = File.join(@reports_dir, '**', '*.json')
    report_files = Dir.glob(pattern)

    report_files.each do |file|
      puts "📊 Loading report from file: #{file}"
      begin
        content = File.read(file)
        data = JSON.parse(content)
        service_name = extract_service_name(data)
        puts "   loading #{service_name} report"


        @service_reports[service_name] = {
          file_path: file,
          data: data,
          last_modified: File.mtime(file),
          vulnerabilities: extract_vulnerabilities(data),
          summary: extract_summary(data)
        }

      rescue JSON::ParserError => e
        puts "   ⚠️  Invalid JSON in #{file}: #{e.message}"
      rescue => e
        puts "   ⚠️  Error loading #{file}: #{e.message}"
      end
    end

    puts "📈 Loaded #{@service_reports.length} service reports"
    puts
  end

  def looks_like_security_report?(file)
    # Check if file contains security vulnerability data
    return false unless File.file?(file)

    content = File.read(file, 1000) # Read first 1KB
    content.include?('vulnerabilities') || content.include?('CVE') || content.include?('security')
  rescue
    false
  end

  def extract_service_name(data)
    return data['scan_summary']['service_name'] if data.dig('scan_summary', 'service_name')
    return 'no-service-name'
  end

  def extract_vulnerabilities(data)
    return data['vulnerabilities'] if data['vulnerabilities']
    return data['scan_summary']['vulnerabilities'] if data.dig('scan_summary', 'vulnerabilities')
    []
  end

  def extract_summary(data)
    return data['scan_summary'] if data['scan_summary']

    # Build summary from vulnerability data
    vulns = extract_vulnerabilities(data)
    severity_counts = vulns.group_by { |v| v['severity'] }.transform_values(&:count)

    {
      'total_vulnerabilities' => vulns.length,
      'severity_counts' => severity_counts,
      'scan_date' => data['scan_date'] || Time.now.iso8601
    }
  end

  def aggregate_data
    total_vulns = 0
    global_severity_counts = Hash.new(0)
    service_risk_levels = {}

    @service_reports.each do |service_name, report|
      vulns = report[:vulnerabilities]
      summary = report[:summary]

      # Add service name to each vulnerability
      vulns.each { |v| v['service'] = service_name }
      @all_vulnerabilities.concat(vulns)

      # Aggregate severity counts
      severity_counts = summary['severity_counts'] || {}
      severity_counts.each { |severity, count| global_severity_counts[severity] += count }

      # Calculate risk level for each service
      critical_high = (severity_counts['CRITICAL'] || 0) + (severity_counts['HIGH'] || 0)
      service_risk_levels[service_name] = calculate_risk_level(critical_high, vulns.length)

      total_vulns += vulns.length
    end

    @global_stats = {
      total_services: @service_reports.length,
      total_vulnerabilities: total_vulns,
      severity_counts: global_severity_counts,
      service_risk_levels: service_risk_levels,
      scan_date: Time.now.iso8601,
      services_with_issues: @service_reports.count { |_, r| r[:vulnerabilities].any? },
      clean_services: @service_reports.count { |_, r| r[:vulnerabilities].empty? }
    }
  end

  def calculate_risk_level(critical_high_count, total_vulns)
    return 'CLEAN' if total_vulns == 0
    return 'CRITICAL' if critical_high_count >= 10
    return 'HIGH' if critical_high_count >= 5
    return 'MEDIUM' if critical_high_count >= 1
    return 'LOW'
  end

  def generate_global_summary
    File.open(File.join(@output_dir, 'global-security-summary.md'), 'w') do |f|
      write_global_header(f)
      write_global_overview(f)
      write_service_breakdown(f)
      write_vulnerability_heatmap(f)
      write_top_vulnerabilities(f)
      write_remediation_priorities(f)
      write_service_details(f)
    end
  end

  def write_global_header(f)
    f.puts "# 🌍 Global Security Dashboard"
    f.puts
    f.puts "**📅 Generated:** #{Time.now.strftime('%Y-%m-%d %H:%M:%S UTC')}"
    f.puts "**🏢 Total Services:** #{@global_stats[:total_services]}"
    f.puts "**🔍 Total Vulnerabilities:** #{@global_stats[:total_vulnerabilities]}"
    f.puts "**✅ Clean Services:** #{@global_stats[:clean_services]}"
    f.puts "**⚠️ Services with Issues:** #{@global_stats[:services_with_issues]}"
    f.puts
  end

  def write_global_overview(f)
    severity_counts = @global_stats[:severity_counts]
    critical_high = (severity_counts['CRITICAL'] || 0) + (severity_counts['HIGH'] || 0)

    f.puts "## 📊 Global Security Overview"
    f.puts

    # Risk assessment
    if @global_stats[:total_vulnerabilities] == 0
      f.puts "✅ **Excellent**: No security vulnerabilities detected across all services!"
    elsif critical_high == 0
      f.puts "🟡 **Good**: No critical or high severity vulnerabilities found."
    elsif critical_high <= 10
      f.puts "🟠 **Attention Needed**: #{critical_high} critical/high severity vulnerabilities across services."
    else
      f.puts "🔴 **Urgent Action Required**: #{critical_high} critical/high severity vulnerabilities need immediate attention!"
    end
    f.puts

    # Global severity breakdown
    f.puts "### Global Severity Distribution"
    f.puts
    f.puts "| Severity | Count | Services Affected |"
    f.puts "|----------|-------|-------------------|"

    ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'].each do |severity|
      count = severity_counts[severity] || 0
      affected_services = count_services_with_severity(severity)
      emoji = severity_emoji(severity)
      f.puts "| #{emoji} **#{severity}** | #{count} | #{affected_services} |"
    end
    f.puts
  end

  def write_service_breakdown(f)
    f.puts "## 🏢 Service Risk Matrix"
    f.puts
    f.puts "| Service | Risk Level | Total Vulns | Critical | High | Medium | Low | Last Scan |"
    f.puts "|---------|------------|-------------|----------|------|--------|-----|-----------|"

    # Sort services by risk level and vulnerability count
    sorted_services = @service_reports.sort_by do |name, report|
      risk_weight = risk_level_weight(@global_stats[:service_risk_levels][name])
      vuln_count = report[:vulnerabilities].length
      [risk_weight, -vuln_count]
    end

    sorted_services.each do |service_name, report|
      summary = report[:summary]
      severity_counts = summary['severity_counts'] || {}
      risk_level = @global_stats[:service_risk_levels][service_name]

      total = report[:vulnerabilities].length
      critical = severity_counts['CRITICAL'] || 0
      high = severity_counts['HIGH'] || 0
      medium = severity_counts['MEDIUM'] || 0
      low = severity_counts['LOW'] || 0

      last_scan = report[:last_modified].strftime('%Y-%m-%d')
      risk_emoji = risk_level_emoji(risk_level)

      f.puts "| `#{service_name}` | #{risk_emoji} #{risk_level} | #{total} | #{critical} | #{high} | #{medium} | #{low} | #{last_scan} |"
    end
    f.puts
  end

  def write_vulnerability_heatmap(f)
    return if @all_vulnerabilities.empty?

    f.puts "## 🔥 Vulnerability Heatmap"
    f.puts

    # Most affected packages across all services
    package_vulns = @all_vulnerabilities.group_by { |v| v['location'] || 'unknown' }
                                      .transform_values(&:length)
                                      .sort_by { |_, count| -count }
                                      .first(10)

    f.puts "### Most Vulnerable Packages (Top 10)"
    f.puts "| Package | Vulnerabilities | Services Affected |"
    f.puts "|---------|----------------|-------------------|"

    package_vulns.each do |package, count|
      services_affected = @all_vulnerabilities.select { |v| v['location'] == package }
                                             .map { |v| v['service'] }
                                             .uniq
                                             .length
      f.puts "| `#{package}` | #{count} | #{services_affected} |"
    end
    f.puts

    # Most common CVEs
    cve_counts = @all_vulnerabilities.group_by { |v| v['cve'] }
                                    .select { |cve, _| cve && !cve.empty? }
                                    .transform_values(&:length)
                                    .sort_by { |_, count| -count }
                                    .first(5)

    if cve_counts.any?
      f.puts "### Most Common CVEs (Top 5)"
      f.puts "| CVE | Occurrences | Services |"
      f.puts "|-----|-------------|----------|"

      cve_counts.each do |cve, count|
        services = @all_vulnerabilities.select { |v| v['cve'] == cve }
                                      .map { |v| v['service'] }
                                      .uniq
        f.puts "| `#{cve}` | #{count} | #{services.join(', ')} |"
      end
      f.puts
    end
  end

  def write_top_vulnerabilities(f)
    return if @all_vulnerabilities.empty?

    f.puts "## 🎯 Top Priority Vulnerabilities"
    f.puts

    # Sort by CVSS score first, then severity
    top_vulns = @all_vulnerabilities.select { |v| ['CRITICAL', 'HIGH'].include?(v['severity']) }
                                   .sort_by do |v|
                                     cvss_score = extract_cvss_score(v)
                                     [-cvss_score, severity_weight(v['severity'])]
                                   end
                                   .first(10)

    if top_vulns.any?
      f.puts "| Service | CVE | Severity | CVSS | Package | Description |"
      f.puts "|---------|-----|----------|------|---------|-------------|"

      top_vulns.each do |vuln|
        service = vuln['service'] || 'unknown'
        cve = vuln['cve'] || 'N/A'
        severity = vuln['severity'] || 'UNKNOWN'
        cvss = extract_cvss_score(vuln)
        cvss_display = cvss > 0 ? cvss.to_s : 'N/A'
        package = vuln['location'] || 'unknown'
        description = (vuln['title'] || vuln['description'] || '').slice(0, 50) + '...'

        emoji = severity_emoji(severity)
        f.puts "| `#{service}` | `#{cve}` | #{emoji} #{severity} | #{cvss_display} | `#{package}` | #{description} |"
      end
      f.puts
    end
  end

  def write_remediation_priorities(f)
    f.puts "## 💡 Remediation Priorities"
    f.puts

    critical_services = @global_stats[:service_risk_levels].select { |_, level| level == 'CRITICAL' }
    high_risk_services = @global_stats[:service_risk_levels].select { |_, level| level == 'HIGH' }

    f.puts "### Immediate Actions (Next 24-48 hours)"
    if critical_services.any?
      f.puts "🔴 **Critical Services** (#{critical_services.length}):"
      critical_services.keys.each { |service| f.puts "- `#{service}`: Focus on CRITICAL and HIGH severity vulnerabilities" }
    else
      f.puts "✅ No services in critical state"
    end
    f.puts

    f.puts "### Short-term Actions (Next 1-2 weeks)"
    if high_risk_services.any?
      f.puts "🟠 **High Risk Services** (#{high_risk_services.length}):"
      high_risk_services.keys.each { |service| f.puts "- `#{service}`: Address HIGH severity vulnerabilities" }
    else
      f.puts "✅ No services in high risk state"
    end
    f.puts

    # Actionable recommendations
    total_fixable = @all_vulnerabilities.count { |v| v['fixed_version'] && !v['fixed_version'].empty? }
    f.puts "### Quick Wins"
    f.puts "- 🔧 **#{total_fixable} vulnerabilities** have available fixes"
    f.puts "- 📊 Focus on packages appearing in multiple services"
    f.puts "- 🎯 Prioritize vulnerabilities with CVSS scores ≥ 7.0"
    f.puts
  end

  def write_service_details(f)
    f.puts "## 📋 Service Details"
    f.puts

    @service_reports.each do |service_name, report|
      vulns = report[:vulnerabilities]
      summary = report[:summary]

      if vulns.empty?
        f.puts "### ✅ #{service_name}"
        f.puts "No vulnerabilities detected."
        f.puts
        next
      end

      severity_counts = summary['severity_counts'] || {}
      risk_level = @global_stats[:service_risk_levels][service_name]

      f.puts "### #{risk_level_emoji(risk_level)} #{service_name}"
      f.puts "**Total Vulnerabilities:** #{vulns.length}  "
      f.puts "**Risk Level:** #{risk_level}  "
      f.puts "**Last Scan:** #{report[:last_modified].strftime('%Y-%m-%d %H:%M')}"
      f.puts

      # Top issues for this service
      top_issues = vulns.select { |v| ['CRITICAL', 'HIGH'].include?(v['severity']) }
                        .first(3)

      if top_issues.any?
        f.puts "**Top Issues:**"
        top_issues.each do |issue|
          emoji = severity_emoji(issue['severity'])
          f.puts "- #{emoji} `#{issue['cve']}` in `#{issue['location']}`"
        end
      end
      f.puts
    end
  end

  def generate_service_matrix
    matrix_data = @service_reports.map do |service_name, report|
      summary = report[:summary]
      severity_counts = summary['severity_counts'] || {}

      {
        service: service_name,
        total_vulnerabilities: report[:vulnerabilities].length,
        critical: severity_counts['CRITICAL'] || 0,
        high: severity_counts['HIGH'] || 0,
        medium: severity_counts['MEDIUM'] || 0,
        low: severity_counts['LOW'] || 0,
        risk_level: @global_stats[:service_risk_levels][service_name],
        last_scan: report[:last_modified].iso8601,
        file_path: report[:file_path]
      }
    end

    File.open(File.join(@output_dir, 'service-matrix.json'), 'w') do |f|
      f.puts JSON.pretty_generate({
        generated_at: Time.now.iso8601,
        global_stats: @global_stats,
        services: matrix_data
      })
    end
  end

  def generate_trend_data
    # For now, just current snapshot - could be enhanced with historical data
    trend_data = {
      timestamp: Time.now.iso8601,
      global_stats: @global_stats,
      service_snapshots: @service_reports.transform_values do |report|
        {
          vulnerability_count: report[:vulnerabilities].length,
          severity_breakdown: report[:summary]['severity_counts'] || {},
          last_modified: report[:last_modified].iso8601
        }
      end
    }

    File.open(File.join(@output_dir, 'security-trends.json'), 'w') do |f|
      f.puts JSON.pretty_generate(trend_data)
    end
  end

  def generate_api_endpoints
    # Generate API-friendly data for dashboards/integrations
    api_data = {
      global: {
        total_services: @global_stats[:total_services],
        total_vulnerabilities: @global_stats[:total_vulnerabilities],
        severity_counts: @global_stats[:severity_counts],
        clean_services: @global_stats[:clean_services],
        services_with_issues: @global_stats[:services_with_issues],
        last_updated: Time.now.iso8601
      },
      services: @service_reports.map do |name, report|
        {
          name: name,
          risk_level: @global_stats[:service_risk_levels][name],
          vulnerability_count: report[:vulnerabilities].length,
          severity_counts: report[:summary]['severity_counts'] || {},
          last_scan: report[:last_modified].iso8601
        }
      end,
      top_vulnerabilities: @all_vulnerabilities
        .select { |v| ['CRITICAL', 'HIGH'].include?(v['severity']) }
        .sort_by { |v| [-extract_cvss_score(v), severity_weight(v['severity'])] }
        .first(20)
    }

    File.open(File.join(@output_dir, 'security-api.json'), 'w') do |f|
      f.puts JSON.pretty_generate(api_data)
    end
  end

  # Helper methods
  def count_services_with_severity(severity)
    @service_reports.count do |_, report|
      severity_counts = report[:summary]['severity_counts'] || {}
      (severity_counts[severity] || 0) > 0
    end
  end

  def severity_emoji(severity)
    {
      'CRITICAL' => '🔴',
      'HIGH' => '🟠',
      'MEDIUM' => '🟡',
      'LOW' => '🔵'
    }[severity] || '⚪'
  end

  def risk_level_emoji(level)
    {
      'CRITICAL' => '🔴',
      'HIGH' => '🟠',
      'MEDIUM' => '🟡',
      'LOW' => '🔵',
      'CLEAN' => '✅'
    }[level] || '⚪'
  end

  def risk_level_weight(level)
    {
      'CRITICAL' => 0,
      'HIGH' => 1,
      'MEDIUM' => 2,
      'LOW' => 3,
      'CLEAN' => 4
    }[level] || 5
  end

  def severity_weight(severity)
    {
      'CRITICAL' => 0,
      'HIGH' => 1,
      'MEDIUM' => 2,
      'LOW' => 3
    }[severity] || 4
  end

  def extract_cvss_score(vuln)
    return 0 unless vuln['cvss']

    cvss = vuln['cvss']
    score = cvss['v3_score'] || cvss['v2_score'] || 0
    score.to_f
  end

  def print_global_stats
    puts "🌍 Global Security Summary:"
    puts "   🏢 Services: #{@global_stats[:total_services]}"
    puts "   🔍 Total Vulnerabilities: #{@global_stats[:total_vulnerabilities]}"
    puts "   ✅ Clean Services: #{@global_stats[:clean_services]}"
    puts "   ⚠️  Services with Issues: #{@global_stats[:services_with_issues]}"
    puts
    puts "📊 Severity Breakdown:"
    severity_counts = @global_stats[:severity_counts]
    puts "   🔴 Critical: #{severity_counts['CRITICAL'] || 0}"
    puts "   🟠 High:     #{severity_counts['HIGH'] || 0}"
    puts "   🟡 Medium:   #{severity_counts['MEDIUM'] || 0}"
    puts "   🔵 Low:      #{severity_counts['LOW'] || 0}"
    puts
    puts "📁 Generated files:"
    puts "   📄 global-security-summary.md - Main dashboard"
    puts "   📊 service-matrix.json - Service overview data"
    puts "   📈 security-trends.json - Trend data"
    puts "   🔗 security-api.json - API-friendly data"
  end
end

# 🚀 Main execution
if __FILE__ == $0
  reports_dir = ARGV[0] || 'security-reports'
  output_dir = ARGV[1] || 'global-security'

  puts "🌍 Global Security Report Aggregator"
  puts "📁 Reports directory: #{reports_dir}"
  puts "📤 Output directory: #{output_dir}"
  puts

  unless Dir.exist?(reports_dir)
    puts "❌ Reports directory '#{reports_dir}' does not exist!"
    puts "Usage: ruby #{File.basename(__FILE__)} [reports_dir] [output_dir]"
    exit 1
  end

  aggregator = GlobalSecurityAggregator.new(reports_dir, output_dir)
  aggregator.aggregate
end
