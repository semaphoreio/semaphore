{{- $chartName := regexReplaceAll "_" .Chart.Name "-" }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $chartName }}"
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.hooks.replicas }}
  selector:
    matchLabels:
      app: "{{ $chartName }}"
  template:
    metadata:
      name: "{{ $chartName }}"
      labels:
        app: "{{ $chartName }}"
        product: semaphoreci
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{- range .Values.imagePullSecrets }}
        - name: {{ . }}
{{- end }}
{{- end }}
      automountServiceAccountToken: false
      initContainers:
{{ include "initContainers.all" . | indent 8 }}
      containers:
        - name: "{{ $chartName }}"
          image: "{{ .Values.global.image.registry }}/{{ .Values.image }}:{{ .Values.imageTag }}"
          command: ["bash", "-c"]
          args: ["bundle exec rails db:create db:migrate && bundle exec puma"]
          ports:
            - name: web-port
              containerPort: 3000
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          envFrom:
            - configMapRef:
                name: internal-api-urls
          env:
            - name: RACK_ENV
              value: production
            - name: RAILS_ENV
              value: production

            - name: SECRET_KEY_BASE
              valueFrom: { secretKeyRef: { name: {{ include "secrets.authentication.name" . }}, key: SESSION_SECRET_KEY_BASE } }

            - name: BASE_DOMAIN
              valueFrom: { configMapKeyRef: { name: {{ .Values.global.domain.configMapName }}, key: BASE_DOMAIN } }
            - name: HOOKS_HOST
              value: "hooks.$(BASE_DOMAIN)"
            - name: HOST
              value: "id.$(BASE_DOMAIN)"

            - name: POSTGRES_DB_SSL
              value: {{ .Values.global.database.ssl | quote }}
            - name: DB_POOL_SIZE
              value: {{ .Values.hooks.dbPoolSize | quote }}
            - name: POSTGRES_DB_NAME
              value: {{ .Values.db.name | quote }}
            {{- include "env.db.elixir" . | indent 12 }}
            - name: PGAPPNAME
              value: sidekiq

            - name: AMQP_URL
              valueFrom: { secretKeyRef: { name: {{ .Values.global.rabbitmq.secretName }}, key: amqp-url }}

            - name: REDIS_HOST
              valueFrom: { secretKeyRef: { name: {{ .Values.global.redis.secretName }}, key: host }}
            - name: REDIS_PORT
              valueFrom: { secretKeyRef: { name: {{ .Values.global.redis.secretName }}, key: port }}
            - name: REDIS_USERNAME
              valueFrom: { secretKeyRef: { name: {{ .Values.global.redis.secretName }}, key: username }}
            - name: REDIS_SIDEKIQ_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Values.global.redis.secretName }}, key: password }}
            - name: REDIS_SIDEKIQ_URL
              value: "redis://$(REDIS_USERNAME)@$(REDIS_HOST):$(REDIS_PORT)"

{{- if .Values.global.statsd.enabled }}
            - name: METRICS_NAMESPACE
              value: {{ .Values.global.statsd.metricsNamespace }}
{{- end }}

            - name: ENCRYPTOR_URL
              value: "localhost:50052"

          startupProbe:
            httpGet:
              path: /is_alive
              port: web-port
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30

          livenessProbe:
            httpGet:
              path: /is_alive
              port: web-port
            periodSeconds: 10

          readinessProbe:
            httpGet:
              path: /is_alive
              port: web-port
            initialDelaySeconds: 10
            periodSeconds: 10

{{- if .Values.hooks.resources }}
          resources:
{{ toYaml .Values.hooks.resources | indent 13 }}
{{- end }}

        - name: sidecar-encryptor
          image: "{{ .Values.global.image.registry }}/{{ .Values.global.sidecarEncryptor.image }}:{{ .Values.global.sidecarEncryptor.imageTag }}"
          ports:
            - name: grpc-port
              containerPort: 50052
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          env:
            - name: START_API
              value: "yes"
            - name: GRPC_API_PORT
              value: "50052"
            - name: ENCRYPTOR_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "secrets.encryption.name" . }}
                  key: key
          livenessProbe:
            grpc:
              port: 50052
            initialDelaySeconds: 1
            periodSeconds: 10
          readinessProbe:
            grpc:
              port: 50052
            initialDelaySeconds: 1
            periodSeconds: 10
{{- if .Values.sidecarEncryptor.resources }}
          resources:
{{ toYaml .Values.sidecarEncryptor.resources | indent 12 }}
{{- end }}
