# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: license.proto

require 'google/protobuf'

require_relative 'google/protobuf/timestamp_pb'


descriptor_data = "\n\rlicense.proto\x12\x13InternalApi.License\x1a\x1fgoogle/protobuf/timestamp.proto\"\x16\n\x14VerifyLicenseRequest\"\x94\x01\n\x15VerifyLicenseResponse\x12\r\n\x05valid\x18\x01 \x01(\x08\x12.\n\nexpires_at\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x11\n\tmax_users\x18\x03 \x01(\x05\x12\x18\n\x10\x65nabled_features\x18\x04 \x03(\t\x12\x0f\n\x07message\x18\x05 \x01(\t2z\n\x0eLicenseService\x12h\n\rVerifyLicense\x12).InternalApi.License.VerifyLicenseRequest\x1a*.InternalApi.License.VerifyLicenseResponse\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
    # Compatibility code: will be removed in the next major version.
    require 'google/protobuf/descriptor_pb'
    parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
    parsed.clear_dependency
    serialized = parsed.class.encode(parsed)
    file = pool.add_serialized_file(serialized)
    warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
    imports = [
      ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
    ]
    imports.each do |type_name, expected_filename|
      import_file = pool.lookup(type_name).file_descriptor
      if import_file.name != expected_filename
        warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
      end
    end
    warn "Each proto file must use a consistent fully-qualified name."
    warn "This will become an error in the next major version."
end

module InternalApi
  module License
    VerifyLicenseRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("InternalApi.License.VerifyLicenseRequest").msgclass
    VerifyLicenseResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("InternalApi.License.VerifyLicenseResponse").msgclass
  end
end
