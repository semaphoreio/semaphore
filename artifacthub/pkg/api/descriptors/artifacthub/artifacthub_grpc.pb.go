// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: artifacthub.proto

package artifacthub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtifactService_HealthCheck_FullMethodName           = "/InternalApi.Artifacthub.ArtifactService/HealthCheck"
	ArtifactService_Create_FullMethodName                = "/InternalApi.Artifacthub.ArtifactService/Create"
	ArtifactService_Describe_FullMethodName              = "/InternalApi.Artifacthub.ArtifactService/Describe"
	ArtifactService_Destroy_FullMethodName               = "/InternalApi.Artifacthub.ArtifactService/Destroy"
	ArtifactService_ListPath_FullMethodName              = "/InternalApi.Artifacthub.ArtifactService/ListPath"
	ArtifactService_DeletePath_FullMethodName            = "/InternalApi.Artifacthub.ArtifactService/DeletePath"
	ArtifactService_UpdateRetentionPolicy_FullMethodName = "/InternalApi.Artifacthub.ArtifactService/UpdateRetentionPolicy"
	ArtifactService_GenerateToken_FullMethodName         = "/InternalApi.Artifacthub.ArtifactService/GenerateToken"
	ArtifactService_Cleanup_FullMethodName               = "/InternalApi.Artifacthub.ArtifactService/Cleanup"
	ArtifactService_GetSignedURL_FullMethodName          = "/InternalApi.Artifacthub.ArtifactService/GetSignedURL"
	ArtifactService_ListBuckets_FullMethodName           = "/InternalApi.Artifacthub.ArtifactService/ListBuckets"
	ArtifactService_CountArtifacts_FullMethodName        = "/InternalApi.Artifacthub.ArtifactService/CountArtifacts"
	ArtifactService_CountBuckets_FullMethodName          = "/InternalApi.Artifacthub.ArtifactService/CountBuckets"
	ArtifactService_UpdateCORS_FullMethodName            = "/InternalApi.Artifacthub.ArtifactService/UpdateCORS"
)

// ArtifactServiceClient is the client API for ArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// all operations are synchronous
type ArtifactServiceClient interface {
	// returns if db tables (and grpc) are still up and running
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (*ListPathResponse, error)
	DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error)
	UpdateRetentionPolicy(ctx context.Context, in *UpdateRetentionPolicyRequest, opts ...grpc.CallOption) (*UpdateRetentionPolicyResponse, error)
	// Used to zebra to generate a short-lived JWT token, granting temporary access
	// to a project/workflow/job artifacts for a newly created job.
	// This is how jobs get access to the artifact API.
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	// if the cleanup result has errors, that does NOT mean it has been failed: it means that there were errors
	Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error)
	GetSignedURL(ctx context.Context, in *GetSignedURLRequest, opts ...grpc.CallOption) (*GetSignedURLResponse, error)
	// if the list buckets result has errors, that does NOT mean it has been failed: it means that there were buckets that has already been deleted
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	// returns the number of artifacts for a project, a worflow or a job
	CountArtifacts(ctx context.Context, in *CountArtifactsRequest, opts ...grpc.CallOption) (*CountArtifactsResponse, error)
	// returns the number of buckets
	CountBuckets(ctx context.Context, in *CountBucketsRequest, opts ...grpc.CallOption) (*CountBucketsResponse, error)
	// updates CORS on the given bucket, and returns the next one ordered by created and bucket_name
	UpdateCORS(ctx context.Context, in *UpdateCORSRequest, opts ...grpc.CallOption) (*UpdateCORSResponse, error)
}

type artifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactServiceClient(cc grpc.ClientConnInterface) ArtifactServiceClient {
	return &artifactServiceClient{cc}
}

func (c *artifactServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ArtifactService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ArtifactService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, ArtifactService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, ArtifactService_Destroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (*ListPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPathResponse)
	err := c.cc.Invoke(ctx, ArtifactService_ListPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePathResponse)
	err := c.cc.Invoke(ctx, ArtifactService_DeletePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) UpdateRetentionPolicy(ctx context.Context, in *UpdateRetentionPolicyRequest, opts ...grpc.CallOption) (*UpdateRetentionPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRetentionPolicyResponse)
	err := c.cc.Invoke(ctx, ArtifactService_UpdateRetentionPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, ArtifactService_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupResponse)
	err := c.cc.Invoke(ctx, ArtifactService_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GetSignedURL(ctx context.Context, in *GetSignedURLRequest, opts ...grpc.CallOption) (*GetSignedURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignedURLResponse)
	err := c.cc.Invoke(ctx, ArtifactService_GetSignedURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, ArtifactService_ListBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) CountArtifacts(ctx context.Context, in *CountArtifactsRequest, opts ...grpc.CallOption) (*CountArtifactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountArtifactsResponse)
	err := c.cc.Invoke(ctx, ArtifactService_CountArtifacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) CountBuckets(ctx context.Context, in *CountBucketsRequest, opts ...grpc.CallOption) (*CountBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountBucketsResponse)
	err := c.cc.Invoke(ctx, ArtifactService_CountBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) UpdateCORS(ctx context.Context, in *UpdateCORSRequest, opts ...grpc.CallOption) (*UpdateCORSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCORSResponse)
	err := c.cc.Invoke(ctx, ArtifactService_UpdateCORS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactServiceServer is the server API for ArtifactService service.
// All implementations should embed UnimplementedArtifactServiceServer
// for forward compatibility.
//
// all operations are synchronous
type ArtifactServiceServer interface {
	// returns if db tables (and grpc) are still up and running
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	ListPath(context.Context, *ListPathRequest) (*ListPathResponse, error)
	DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error)
	UpdateRetentionPolicy(context.Context, *UpdateRetentionPolicyRequest) (*UpdateRetentionPolicyResponse, error)
	// Used to zebra to generate a short-lived JWT token, granting temporary access
	// to a project/workflow/job artifacts for a newly created job.
	// This is how jobs get access to the artifact API.
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	// if the cleanup result has errors, that does NOT mean it has been failed: it means that there were errors
	Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error)
	GetSignedURL(context.Context, *GetSignedURLRequest) (*GetSignedURLResponse, error)
	// if the list buckets result has errors, that does NOT mean it has been failed: it means that there were buckets that has already been deleted
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	// returns the number of artifacts for a project, a worflow or a job
	CountArtifacts(context.Context, *CountArtifactsRequest) (*CountArtifactsResponse, error)
	// returns the number of buckets
	CountBuckets(context.Context, *CountBucketsRequest) (*CountBucketsResponse, error)
	// updates CORS on the given bucket, and returns the next one ordered by created and bucket_name
	UpdateCORS(context.Context, *UpdateCORSRequest) (*UpdateCORSResponse, error)
}

// UnimplementedArtifactServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtifactServiceServer struct{}

func (UnimplementedArtifactServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedArtifactServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArtifactServiceServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedArtifactServiceServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedArtifactServiceServer) ListPath(context.Context, *ListPathRequest) (*ListPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPath not implemented")
}
func (UnimplementedArtifactServiceServer) DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePath not implemented")
}
func (UnimplementedArtifactServiceServer) UpdateRetentionPolicy(context.Context, *UpdateRetentionPolicyRequest) (*UpdateRetentionPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRetentionPolicy not implemented")
}
func (UnimplementedArtifactServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedArtifactServiceServer) Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedArtifactServiceServer) GetSignedURL(context.Context, *GetSignedURLRequest) (*GetSignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedURL not implemented")
}
func (UnimplementedArtifactServiceServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedArtifactServiceServer) CountArtifacts(context.Context, *CountArtifactsRequest) (*CountArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountArtifacts not implemented")
}
func (UnimplementedArtifactServiceServer) CountBuckets(context.Context, *CountBucketsRequest) (*CountBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBuckets not implemented")
}
func (UnimplementedArtifactServiceServer) UpdateCORS(context.Context, *UpdateCORSRequest) (*UpdateCORSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCORS not implemented")
}
func (UnimplementedArtifactServiceServer) testEmbeddedByValue() {}

// UnsafeArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactServiceServer will
// result in compilation errors.
type UnsafeArtifactServiceServer interface {
	mustEmbedUnimplementedArtifactServiceServer()
}

func RegisterArtifactServiceServer(s grpc.ServiceRegistrar, srv ArtifactServiceServer) {
	// If the following call pancis, it indicates UnimplementedArtifactServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtifactService_ServiceDesc, srv)
}

func _ArtifactService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_ListPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).ListPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_ListPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).ListPath(ctx, req.(*ListPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_DeletePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).DeletePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_DeletePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).DeletePath(ctx, req.(*DeletePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_UpdateRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRetentionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).UpdateRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_UpdateRetentionPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).UpdateRetentionPolicy(ctx, req.(*UpdateRetentionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).Cleanup(ctx, req.(*CleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GetSignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GetSignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_GetSignedURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GetSignedURL(ctx, req.(*GetSignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_CountArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).CountArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_CountArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).CountArtifacts(ctx, req.(*CountArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_CountBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).CountBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_CountBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).CountBuckets(ctx, req.(*CountBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_UpdateCORS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCORSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).UpdateCORS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_UpdateCORS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).UpdateCORS(ctx, req.(*UpdateCORSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactService_ServiceDesc is the grpc.ServiceDesc for ArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InternalApi.Artifacthub.ArtifactService",
	HandlerType: (*ArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ArtifactService_HealthCheck_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ArtifactService_Create_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _ArtifactService_Describe_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ArtifactService_Destroy_Handler,
		},
		{
			MethodName: "ListPath",
			Handler:    _ArtifactService_ListPath_Handler,
		},
		{
			MethodName: "DeletePath",
			Handler:    _ArtifactService_DeletePath_Handler,
		},
		{
			MethodName: "UpdateRetentionPolicy",
			Handler:    _ArtifactService_UpdateRetentionPolicy_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _ArtifactService_GenerateToken_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _ArtifactService_Cleanup_Handler,
		},
		{
			MethodName: "GetSignedURL",
			Handler:    _ArtifactService_GetSignedURL_Handler,
		},
		{
			MethodName: "ListBuckets",
			Handler:    _ArtifactService_ListBuckets_Handler,
		},
		{
			MethodName: "CountArtifacts",
			Handler:    _ArtifactService_CountArtifacts_Handler,
		},
		{
			MethodName: "CountBuckets",
			Handler:    _ArtifactService_CountBuckets_Handler,
		},
		{
			MethodName: "UpdateCORS",
			Handler:    _ArtifactService_UpdateCORS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifacthub.proto",
}
