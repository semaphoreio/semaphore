# Semaphore CI/CD configuration for Go project
version: v1.0
name: "\U0001F439 Go CI Pipeline"

# Agent configuration - defines the execution environment
agent:
  # Kubernetes-based machine type
  machine:
    type: {{ machine_type }}
    os_image: {{ os_image }}  # Empty for Docker compose style pipeline
  containers:
    - name: main
      # Use CircleCI's Go 1.21 image for consistent builds
      image: 'cimg/go:1.21'

# Fail fast configuration to stop unnecessary builds
fail_fast:
  # Stop the pipeline if not on the main branch
  stop:
    when: branch != 'main'

# Auto-cancel configuration to optimize CI resources
auto_cancel:
  # Cancel running jobs for non-main branches
  running:
    when: branch != 'main'
  # Queue jobs only for the main branch
  queued:
    when: branch = 'main'

# Global job configuration applied to all blocks
global_job_config:
  prologue:
    commands:
      # Checkout the source code
      - checkout
      # Verify Go version
      - go version
      # Clean up and download dependencies
      - go mod tidy
      - go mod download
      # Restore cached dependencies and build artifacts
      - cache restore go-mod-$(checksum go.sum)
      - cache restore go-build-$(checksum go.sum)
      - cache restore go-tools
      # Ensure tools are in PATH
      - export PATH=$PATH:~/go/bin

# CI/CD Pipeline Blocks
blocks:
  # First block: Setup and dependency installation
  - name: "\U0001F6E0 Setup and Cache"
    dependencies: []
    task:
      jobs:
        - name: Install Dependencies
          commands:
            # Install golangci-lint using official installation script
            - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
            # Install additional development and testing tools
            - go install gotest.tools/gotestsum@latest      # Test runner
            - go install honnef.co/go/tools/cmd/staticcheck@latest  # Static analysis
            - go install golang.org/x/vuln/cmd/govulncheck@latest  # Vulnerability scanner
            - go install github.com/sonatype-nexus-community/nancy@latest  # Dependency scanner
            # Cache dependencies and tools for future jobs
            - cache store go-mod-$(checksum go.sum) ~/go/pkg/mod
            - cache store go-build-$(checksum go.sum) ~/.cache/go-build
            - cache store go-tools ~/go/bin

  # Code quality check block
  - name: "\U0001F50D Code Quality"
    dependencies:
      - "\U0001F6E0 Setup and Cache"
    task:
      jobs:
        - name: Lint and Static Analysis
          commands:
            # Verify golangci-lint installation
            - golangci-lint version
            # Run linters with a 5-minute timeout
            - golangci-lint run --timeout=5m
            # Run Go vet for additional static analysis
            - go vet ./...
            # Run staticcheck for advanced static analysis
            - staticcheck ./...
            # Ensure code is properly formatted
            - test -z "$(go fmt ./...)"

  # Security scanning block
  - name: "\U0001F510 Security Checks"
    dependencies:
      - "\U0001F6E0 Setup and Cache"
    task:
      jobs:
        - name: Security Scan
          commands:
            # Scan for known vulnerabilities in the code
            - govulncheck ./...
            # Scan dependencies for known security issues
            - go list -json -m all | nancy sleuth

  # Testing block
  - name: "\U0001F9EA Test Suite"
    dependencies:
      - "\U0001F50D Code Quality"
    task:
      # Environment variables for testing
      env_vars:
        - name: GO_TEST_TIMEOUT
          value: 5m
        - name: GO_TEST_REPORT
          value: test-results.xml
      jobs:
        - name: "\U0001F7E2 Go Test"
          # Parallelize tests across 4 jobs
          parallelism: 4
          commands:
            # Prepare test packages, excluding vendor directory
            - go list ./... | grep -v /vendor/ > packages.txt
            # Split packages across parallel jobs
            - split -n l/$SEMAPHORE_JOB_COUNT --numeric-suffixes=1 packages.txt packages.
            - PACKAGE_FILE=packages.$(($SEMAPHORE_JOB_INDEX))
            # Run tests with coverage and race condition detection
            - gotestsum --junitfile=$GO_TEST_REPORT --packages-file $PACKAGE_FILE -- -race -coverprofile=coverage.txt -covermode=atomic
            # Generate coverage report
            - go tool cover -func=coverage.txt
      # Always run these commands after tests
      epilogue:
        always:
          commands:
            # Publish test results
            - test-results publish $GO_TEST_REPORT
            # Upload coverage to Codecov (only on first job)
            - |
              if [ "$SEMAPHORE_JOB_INDEX" = "1" ]; then
                bash <(curl -s https://codecov.io/bash) -f coverage.txt
              fi

  # Build block
  - name: "\U0001F4E6 Build"
    dependencies:
      - "\U0001F9EA Test Suite"
    task:
      jobs:
        - name: "\U0001F528 Build Binary"
          commands:
            # Create output directory
            - mkdir -p bin
            # Build binaries for multiple platforms
            - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bin/app
            - GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o bin/app-darwin
            - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o bin/app.exe

# Post-pipeline task
after_pipeline:
  task:
    jobs:
      - name: "Merge Reports \U0001F4CA"
        commands:
          # Generate a consolidated pipeline report
          - test-results gen-pipeline-report